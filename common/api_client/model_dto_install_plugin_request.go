/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the DtoInstallPluginRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DtoInstallPluginRequest{}

// DtoInstallPluginRequest struct for DtoInstallPluginRequest
type DtoInstallPluginRequest struct {
	DownloadUrls *map[string]string `json:"downloadUrls,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewDtoInstallPluginRequest instantiates a new DtoInstallPluginRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDtoInstallPluginRequest() *DtoInstallPluginRequest {
	this := DtoInstallPluginRequest{}
	return &this
}

// NewDtoInstallPluginRequestWithDefaults instantiates a new DtoInstallPluginRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDtoInstallPluginRequestWithDefaults() *DtoInstallPluginRequest {
	this := DtoInstallPluginRequest{}
	return &this
}

// GetDownloadUrls returns the DownloadUrls field value if set, zero value otherwise.
func (o *DtoInstallPluginRequest) GetDownloadUrls() map[string]string {
	if o == nil || IsNil(o.DownloadUrls) {
		var ret map[string]string
		return ret
	}
	return *o.DownloadUrls
}

// GetDownloadUrlsOk returns a tuple with the DownloadUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoInstallPluginRequest) GetDownloadUrlsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.DownloadUrls) {
		return nil, false
	}
	return o.DownloadUrls, true
}

// HasDownloadUrls returns a boolean if a field has been set.
func (o *DtoInstallPluginRequest) HasDownloadUrls() bool {
	if o != nil && !IsNil(o.DownloadUrls) {
		return true
	}

	return false
}

// SetDownloadUrls gets a reference to the given map[string]string and assigns it to the DownloadUrls field.
func (o *DtoInstallPluginRequest) SetDownloadUrls(v map[string]string) {
	o.DownloadUrls = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DtoInstallPluginRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DtoInstallPluginRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DtoInstallPluginRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DtoInstallPluginRequest) SetName(v string) {
	o.Name = &v
}

func (o DtoInstallPluginRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DtoInstallPluginRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DownloadUrls) {
		toSerialize["downloadUrls"] = o.DownloadUrls
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDtoInstallPluginRequest struct {
	value *DtoInstallPluginRequest
	isSet bool
}

func (v NullableDtoInstallPluginRequest) Get() *DtoInstallPluginRequest {
	return v.value
}

func (v *NullableDtoInstallPluginRequest) Set(val *DtoInstallPluginRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDtoInstallPluginRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDtoInstallPluginRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDtoInstallPluginRequest(val *DtoInstallPluginRequest) *NullableDtoInstallPluginRequest {
	return &NullableDtoInstallPluginRequest{value: val, isSet: true}
}

func (v NullableDtoInstallPluginRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDtoInstallPluginRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


