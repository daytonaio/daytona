/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the TypesFRPSConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesFRPSConfig{}

// TypesFRPSConfig struct for TypesFRPSConfig
type TypesFRPSConfig struct {
	Domain *string `json:"domain,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Protocol *string `json:"protocol,omitempty"`
}

// NewTypesFRPSConfig instantiates a new TypesFRPSConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesFRPSConfig() *TypesFRPSConfig {
	this := TypesFRPSConfig{}
	return &this
}

// NewTypesFRPSConfigWithDefaults instantiates a new TypesFRPSConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesFRPSConfigWithDefaults() *TypesFRPSConfig {
	this := TypesFRPSConfig{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *TypesFRPSConfig) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFRPSConfig) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *TypesFRPSConfig) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *TypesFRPSConfig) SetDomain(v string) {
	o.Domain = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *TypesFRPSConfig) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFRPSConfig) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *TypesFRPSConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *TypesFRPSConfig) SetPort(v int32) {
	o.Port = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *TypesFRPSConfig) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesFRPSConfig) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *TypesFRPSConfig) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *TypesFRPSConfig) SetProtocol(v string) {
	o.Protocol = &v
}

func (o TypesFRPSConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesFRPSConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	return toSerialize, nil
}

type NullableTypesFRPSConfig struct {
	value *TypesFRPSConfig
	isSet bool
}

func (v NullableTypesFRPSConfig) Get() *TypesFRPSConfig {
	return v.value
}

func (v *NullableTypesFRPSConfig) Set(val *TypesFRPSConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFRPSConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFRPSConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFRPSConfig(val *TypesFRPSConfig) *NullableTypesFRPSConfig {
	return &NullableTypesFRPSConfig{value: val, isSet: true}
}

func (v NullableTypesFRPSConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFRPSConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


