/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the TypesProject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesProject{}

// TypesProject struct for TypesProject
type TypesProject struct {
	AuthKey *string `json:"authKey,omitempty"`
	Name *string `json:"name,omitempty"`
	Repository *TypesRepository `json:"repository,omitempty"`
	WorkspaceId *string `json:"workspaceId,omitempty"`
}

// NewTypesProject instantiates a new TypesProject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesProject() *TypesProject {
	this := TypesProject{}
	return &this
}

// NewTypesProjectWithDefaults instantiates a new TypesProject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesProjectWithDefaults() *TypesProject {
	this := TypesProject{}
	return &this
}

// GetAuthKey returns the AuthKey field value if set, zero value otherwise.
func (o *TypesProject) GetAuthKey() string {
	if o == nil || IsNil(o.AuthKey) {
		var ret string
		return ret
	}
	return *o.AuthKey
}

// GetAuthKeyOk returns a tuple with the AuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProject) GetAuthKeyOk() (*string, bool) {
	if o == nil || IsNil(o.AuthKey) {
		return nil, false
	}
	return o.AuthKey, true
}

// HasAuthKey returns a boolean if a field has been set.
func (o *TypesProject) HasAuthKey() bool {
	if o != nil && !IsNil(o.AuthKey) {
		return true
	}

	return false
}

// SetAuthKey gets a reference to the given string and assigns it to the AuthKey field.
func (o *TypesProject) SetAuthKey(v string) {
	o.AuthKey = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TypesProject) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProject) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TypesProject) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TypesProject) SetName(v string) {
	o.Name = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *TypesProject) GetRepository() TypesRepository {
	if o == nil || IsNil(o.Repository) {
		var ret TypesRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProject) GetRepositoryOk() (*TypesRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *TypesProject) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given TypesRepository and assigns it to the Repository field.
func (o *TypesProject) SetRepository(v TypesRepository) {
	o.Repository = &v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *TypesProject) GetWorkspaceId() string {
	if o == nil || IsNil(o.WorkspaceId) {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProject) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkspaceId) {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *TypesProject) HasWorkspaceId() bool {
	if o != nil && !IsNil(o.WorkspaceId) {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *TypesProject) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

func (o TypesProject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesProject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthKey) {
		toSerialize["authKey"] = o.AuthKey
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.WorkspaceId) {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	return toSerialize, nil
}

type NullableTypesProject struct {
	value *TypesProject
	isSet bool
}

func (v NullableTypesProject) Get() *TypesProject {
	return v.value
}

func (v *NullableTypesProject) Set(val *TypesProject) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesProject) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesProject(val *TypesProject) *NullableTypesProject {
	return &NullableTypesProject{value: val, isSet: true}
}

func (v NullableTypesProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


