/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the TypesProjectInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesProjectInfo{}

// TypesProjectInfo struct for TypesProjectInfo
type TypesProjectInfo struct {
	Created *string `json:"created,omitempty"`
	Finished *string `json:"finished,omitempty"`
	IsRunning *bool `json:"isRunning,omitempty"`
	Name *string `json:"name,omitempty"`
	ProvisionerMetadata *GithubComGolangProtobufPtypesStructStruct `json:"provisionerMetadata,omitempty"`
	Started *string `json:"started,omitempty"`
	WorkspaceId *string `json:"workspaceId,omitempty"`
}

// NewTypesProjectInfo instantiates a new TypesProjectInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesProjectInfo() *TypesProjectInfo {
	this := TypesProjectInfo{}
	return &this
}

// NewTypesProjectInfoWithDefaults instantiates a new TypesProjectInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesProjectInfoWithDefaults() *TypesProjectInfo {
	this := TypesProjectInfo{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *TypesProjectInfo) SetCreated(v string) {
	o.Created = &v
}

// GetFinished returns the Finished field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetFinished() string {
	if o == nil || IsNil(o.Finished) {
		var ret string
		return ret
	}
	return *o.Finished
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetFinishedOk() (*string, bool) {
	if o == nil || IsNil(o.Finished) {
		return nil, false
	}
	return o.Finished, true
}

// HasFinished returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasFinished() bool {
	if o != nil && !IsNil(o.Finished) {
		return true
	}

	return false
}

// SetFinished gets a reference to the given string and assigns it to the Finished field.
func (o *TypesProjectInfo) SetFinished(v string) {
	o.Finished = &v
}

// GetIsRunning returns the IsRunning field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetIsRunning() bool {
	if o == nil || IsNil(o.IsRunning) {
		var ret bool
		return ret
	}
	return *o.IsRunning
}

// GetIsRunningOk returns a tuple with the IsRunning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetIsRunningOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRunning) {
		return nil, false
	}
	return o.IsRunning, true
}

// HasIsRunning returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasIsRunning() bool {
	if o != nil && !IsNil(o.IsRunning) {
		return true
	}

	return false
}

// SetIsRunning gets a reference to the given bool and assigns it to the IsRunning field.
func (o *TypesProjectInfo) SetIsRunning(v bool) {
	o.IsRunning = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TypesProjectInfo) SetName(v string) {
	o.Name = &v
}

// GetProvisionerMetadata returns the ProvisionerMetadata field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetProvisionerMetadata() GithubComGolangProtobufPtypesStructStruct {
	if o == nil || IsNil(o.ProvisionerMetadata) {
		var ret GithubComGolangProtobufPtypesStructStruct
		return ret
	}
	return *o.ProvisionerMetadata
}

// GetProvisionerMetadataOk returns a tuple with the ProvisionerMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetProvisionerMetadataOk() (*GithubComGolangProtobufPtypesStructStruct, bool) {
	if o == nil || IsNil(o.ProvisionerMetadata) {
		return nil, false
	}
	return o.ProvisionerMetadata, true
}

// HasProvisionerMetadata returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasProvisionerMetadata() bool {
	if o != nil && !IsNil(o.ProvisionerMetadata) {
		return true
	}

	return false
}

// SetProvisionerMetadata gets a reference to the given GithubComGolangProtobufPtypesStructStruct and assigns it to the ProvisionerMetadata field.
func (o *TypesProjectInfo) SetProvisionerMetadata(v GithubComGolangProtobufPtypesStructStruct) {
	o.ProvisionerMetadata = &v
}

// GetStarted returns the Started field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetStarted() string {
	if o == nil || IsNil(o.Started) {
		var ret string
		return ret
	}
	return *o.Started
}

// GetStartedOk returns a tuple with the Started field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetStartedOk() (*string, bool) {
	if o == nil || IsNil(o.Started) {
		return nil, false
	}
	return o.Started, true
}

// HasStarted returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasStarted() bool {
	if o != nil && !IsNil(o.Started) {
		return true
	}

	return false
}

// SetStarted gets a reference to the given string and assigns it to the Started field.
func (o *TypesProjectInfo) SetStarted(v string) {
	o.Started = &v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *TypesProjectInfo) GetWorkspaceId() string {
	if o == nil || IsNil(o.WorkspaceId) {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesProjectInfo) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkspaceId) {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *TypesProjectInfo) HasWorkspaceId() bool {
	if o != nil && !IsNil(o.WorkspaceId) {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *TypesProjectInfo) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

func (o TypesProjectInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesProjectInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Finished) {
		toSerialize["finished"] = o.Finished
	}
	if !IsNil(o.IsRunning) {
		toSerialize["isRunning"] = o.IsRunning
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProvisionerMetadata) {
		toSerialize["provisionerMetadata"] = o.ProvisionerMetadata
	}
	if !IsNil(o.Started) {
		toSerialize["started"] = o.Started
	}
	if !IsNil(o.WorkspaceId) {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	return toSerialize, nil
}

type NullableTypesProjectInfo struct {
	value *TypesProjectInfo
	isSet bool
}

func (v NullableTypesProjectInfo) Get() *TypesProjectInfo {
	return v.value
}

func (v *NullableTypesProjectInfo) Set(val *TypesProjectInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesProjectInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesProjectInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesProjectInfo(val *TypesProjectInfo) *NullableTypesProjectInfo {
	return &NullableTypesProjectInfo{value: val, isSet: true}
}

func (v NullableTypesProjectInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesProjectInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


