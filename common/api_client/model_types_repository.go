/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the TypesRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesRepository{}

// TypesRepository struct for TypesRepository
type TypesRepository struct {
	Branch *string `json:"branch,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Path *string `json:"path,omitempty"`
	PrNumber *int32 `json:"prNumber,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Source *string `json:"source,omitempty"`
	Url *string `json:"url,omitempty"`
}

// NewTypesRepository instantiates a new TypesRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesRepository() *TypesRepository {
	this := TypesRepository{}
	return &this
}

// NewTypesRepositoryWithDefaults instantiates a new TypesRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesRepositoryWithDefaults() *TypesRepository {
	this := TypesRepository{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *TypesRepository) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *TypesRepository) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *TypesRepository) SetBranch(v string) {
	o.Branch = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *TypesRepository) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *TypesRepository) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *TypesRepository) SetOwner(v string) {
	o.Owner = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *TypesRepository) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *TypesRepository) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *TypesRepository) SetPath(v string) {
	o.Path = &v
}

// GetPrNumber returns the PrNumber field value if set, zero value otherwise.
func (o *TypesRepository) GetPrNumber() int32 {
	if o == nil || IsNil(o.PrNumber) {
		var ret int32
		return ret
	}
	return *o.PrNumber
}

// GetPrNumberOk returns a tuple with the PrNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetPrNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PrNumber) {
		return nil, false
	}
	return o.PrNumber, true
}

// HasPrNumber returns a boolean if a field has been set.
func (o *TypesRepository) HasPrNumber() bool {
	if o != nil && !IsNil(o.PrNumber) {
		return true
	}

	return false
}

// SetPrNumber gets a reference to the given int32 and assigns it to the PrNumber field.
func (o *TypesRepository) SetPrNumber(v int32) {
	o.PrNumber = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *TypesRepository) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *TypesRepository) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *TypesRepository) SetSha(v string) {
	o.Sha = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *TypesRepository) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *TypesRepository) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *TypesRepository) SetSource(v string) {
	o.Source = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TypesRepository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesRepository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TypesRepository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TypesRepository) SetUrl(v string) {
	o.Url = &v
}

func (o TypesRepository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PrNumber) {
		toSerialize["prNumber"] = o.PrNumber
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableTypesRepository struct {
	value *TypesRepository
	isSet bool
}

func (v NullableTypesRepository) Get() *TypesRepository {
	return v.value
}

func (v *NullableTypesRepository) Set(val *TypesRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesRepository(val *TypesRepository) *NullableTypesRepository {
	return &NullableTypesRepository{value: val, isSet: true}
}

func (v NullableTypesRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


