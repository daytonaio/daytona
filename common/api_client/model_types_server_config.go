/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
)

// checks if the TypesServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypesServerConfig{}

// TypesServerConfig struct for TypesServerConfig
type TypesServerConfig struct {
	ApiPort *int32 `json:"apiPort,omitempty"`
	Frps *TypesFRPSConfig `json:"frps,omitempty"`
	HeadscalePort *int32 `json:"headscalePort,omitempty"`
	Id *string `json:"id,omitempty"`
	PluginRegistryUrl *string `json:"pluginRegistryUrl,omitempty"`
	PluginsDir *string `json:"pluginsDir,omitempty"`
	ServerDownloadUrl *string `json:"serverDownloadUrl,omitempty"`
}

// NewTypesServerConfig instantiates a new TypesServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesServerConfig() *TypesServerConfig {
	this := TypesServerConfig{}
	return &this
}

// NewTypesServerConfigWithDefaults instantiates a new TypesServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesServerConfigWithDefaults() *TypesServerConfig {
	this := TypesServerConfig{}
	return &this
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise.
func (o *TypesServerConfig) GetApiPort() int32 {
	if o == nil || IsNil(o.ApiPort) {
		var ret int32
		return ret
	}
	return *o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetApiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiPort) {
		return nil, false
	}
	return o.ApiPort, true
}

// HasApiPort returns a boolean if a field has been set.
func (o *TypesServerConfig) HasApiPort() bool {
	if o != nil && !IsNil(o.ApiPort) {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given int32 and assigns it to the ApiPort field.
func (o *TypesServerConfig) SetApiPort(v int32) {
	o.ApiPort = &v
}

// GetFrps returns the Frps field value if set, zero value otherwise.
func (o *TypesServerConfig) GetFrps() TypesFRPSConfig {
	if o == nil || IsNil(o.Frps) {
		var ret TypesFRPSConfig
		return ret
	}
	return *o.Frps
}

// GetFrpsOk returns a tuple with the Frps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetFrpsOk() (*TypesFRPSConfig, bool) {
	if o == nil || IsNil(o.Frps) {
		return nil, false
	}
	return o.Frps, true
}

// HasFrps returns a boolean if a field has been set.
func (o *TypesServerConfig) HasFrps() bool {
	if o != nil && !IsNil(o.Frps) {
		return true
	}

	return false
}

// SetFrps gets a reference to the given TypesFRPSConfig and assigns it to the Frps field.
func (o *TypesServerConfig) SetFrps(v TypesFRPSConfig) {
	o.Frps = &v
}

// GetHeadscalePort returns the HeadscalePort field value if set, zero value otherwise.
func (o *TypesServerConfig) GetHeadscalePort() int32 {
	if o == nil || IsNil(o.HeadscalePort) {
		var ret int32
		return ret
	}
	return *o.HeadscalePort
}

// GetHeadscalePortOk returns a tuple with the HeadscalePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetHeadscalePortOk() (*int32, bool) {
	if o == nil || IsNil(o.HeadscalePort) {
		return nil, false
	}
	return o.HeadscalePort, true
}

// HasHeadscalePort returns a boolean if a field has been set.
func (o *TypesServerConfig) HasHeadscalePort() bool {
	if o != nil && !IsNil(o.HeadscalePort) {
		return true
	}

	return false
}

// SetHeadscalePort gets a reference to the given int32 and assigns it to the HeadscalePort field.
func (o *TypesServerConfig) SetHeadscalePort(v int32) {
	o.HeadscalePort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TypesServerConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TypesServerConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TypesServerConfig) SetId(v string) {
	o.Id = &v
}

// GetPluginRegistryUrl returns the PluginRegistryUrl field value if set, zero value otherwise.
func (o *TypesServerConfig) GetPluginRegistryUrl() string {
	if o == nil || IsNil(o.PluginRegistryUrl) {
		var ret string
		return ret
	}
	return *o.PluginRegistryUrl
}

// GetPluginRegistryUrlOk returns a tuple with the PluginRegistryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetPluginRegistryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PluginRegistryUrl) {
		return nil, false
	}
	return o.PluginRegistryUrl, true
}

// HasPluginRegistryUrl returns a boolean if a field has been set.
func (o *TypesServerConfig) HasPluginRegistryUrl() bool {
	if o != nil && !IsNil(o.PluginRegistryUrl) {
		return true
	}

	return false
}

// SetPluginRegistryUrl gets a reference to the given string and assigns it to the PluginRegistryUrl field.
func (o *TypesServerConfig) SetPluginRegistryUrl(v string) {
	o.PluginRegistryUrl = &v
}

// GetPluginsDir returns the PluginsDir field value if set, zero value otherwise.
func (o *TypesServerConfig) GetPluginsDir() string {
	if o == nil || IsNil(o.PluginsDir) {
		var ret string
		return ret
	}
	return *o.PluginsDir
}

// GetPluginsDirOk returns a tuple with the PluginsDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetPluginsDirOk() (*string, bool) {
	if o == nil || IsNil(o.PluginsDir) {
		return nil, false
	}
	return o.PluginsDir, true
}

// HasPluginsDir returns a boolean if a field has been set.
func (o *TypesServerConfig) HasPluginsDir() bool {
	if o != nil && !IsNil(o.PluginsDir) {
		return true
	}

	return false
}

// SetPluginsDir gets a reference to the given string and assigns it to the PluginsDir field.
func (o *TypesServerConfig) SetPluginsDir(v string) {
	o.PluginsDir = &v
}

// GetServerDownloadUrl returns the ServerDownloadUrl field value if set, zero value otherwise.
func (o *TypesServerConfig) GetServerDownloadUrl() string {
	if o == nil || IsNil(o.ServerDownloadUrl) {
		var ret string
		return ret
	}
	return *o.ServerDownloadUrl
}

// GetServerDownloadUrlOk returns a tuple with the ServerDownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesServerConfig) GetServerDownloadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerDownloadUrl) {
		return nil, false
	}
	return o.ServerDownloadUrl, true
}

// HasServerDownloadUrl returns a boolean if a field has been set.
func (o *TypesServerConfig) HasServerDownloadUrl() bool {
	if o != nil && !IsNil(o.ServerDownloadUrl) {
		return true
	}

	return false
}

// SetServerDownloadUrl gets a reference to the given string and assigns it to the ServerDownloadUrl field.
func (o *TypesServerConfig) SetServerDownloadUrl(v string) {
	o.ServerDownloadUrl = &v
}

func (o TypesServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypesServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiPort) {
		toSerialize["apiPort"] = o.ApiPort
	}
	if !IsNil(o.Frps) {
		toSerialize["frps"] = o.Frps
	}
	if !IsNil(o.HeadscalePort) {
		toSerialize["headscalePort"] = o.HeadscalePort
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PluginRegistryUrl) {
		toSerialize["pluginRegistryUrl"] = o.PluginRegistryUrl
	}
	if !IsNil(o.PluginsDir) {
		toSerialize["pluginsDir"] = o.PluginsDir
	}
	if !IsNil(o.ServerDownloadUrl) {
		toSerialize["serverDownloadUrl"] = o.ServerDownloadUrl
	}
	return toSerialize, nil
}

type NullableTypesServerConfig struct {
	value *TypesServerConfig
	isSet bool
}

func (v NullableTypesServerConfig) Get() *TypesServerConfig {
	return v.value
}

func (v *NullableTypesServerConfig) Set(val *TypesServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesServerConfig(val *TypesServerConfig) *NullableTypesServerConfig {
	return &NullableTypesServerConfig{value: val, isSet: true}
}

func (v NullableTypesServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


