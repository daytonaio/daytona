// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: common/grpc/proto/ports.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ports_ForwardPort_FullMethodName                  = "/Ports/ForwardPort"
	Ports_GetPortForwards_FullMethodName              = "/Ports/GetPortForwards"
	Ports_GetProjectPortForwards_FullMethodName       = "/Ports/GetProjectPortForwards"
	Ports_StopPortForward_FullMethodName              = "/Ports/StopPortForward"
	Ports_StopAllWorkspacePortForwards_FullMethodName = "/Ports/StopAllWorkspacePortForwards"
)

// PortsClient is the client API for Ports service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsClient interface {
	ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (*PortForward, error)
	GetPortForwards(ctx context.Context, in *GetPortForwardsRequest, opts ...grpc.CallOption) (*WorkspacePortForward, error)
	GetProjectPortForwards(ctx context.Context, in *GetProjectPortForwardsRequest, opts ...grpc.CallOption) (*ProjectPortForwards, error)
	StopPortForward(ctx context.Context, in *StopPortForwardRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	StopAllWorkspacePortForwards(ctx context.Context, in *StopAllWorkspacePortForwardsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type portsClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsClient(cc grpc.ClientConnInterface) PortsClient {
	return &portsClient{cc}
}

func (c *portsClient) ForwardPort(ctx context.Context, in *ForwardPortRequest, opts ...grpc.CallOption) (*PortForward, error) {
	out := new(PortForward)
	err := c.cc.Invoke(ctx, Ports_ForwardPort_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsClient) GetPortForwards(ctx context.Context, in *GetPortForwardsRequest, opts ...grpc.CallOption) (*WorkspacePortForward, error) {
	out := new(WorkspacePortForward)
	err := c.cc.Invoke(ctx, Ports_GetPortForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsClient) GetProjectPortForwards(ctx context.Context, in *GetProjectPortForwardsRequest, opts ...grpc.CallOption) (*ProjectPortForwards, error) {
	out := new(ProjectPortForwards)
	err := c.cc.Invoke(ctx, Ports_GetProjectPortForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsClient) StopPortForward(ctx context.Context, in *StopPortForwardRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Ports_StopPortForward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsClient) StopAllWorkspacePortForwards(ctx context.Context, in *StopAllWorkspacePortForwardsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Ports_StopAllWorkspacePortForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortsServer is the server API for Ports service.
// All implementations should embed UnimplementedPortsServer
// for forward compatibility
type PortsServer interface {
	ForwardPort(context.Context, *ForwardPortRequest) (*PortForward, error)
	GetPortForwards(context.Context, *GetPortForwardsRequest) (*WorkspacePortForward, error)
	GetProjectPortForwards(context.Context, *GetProjectPortForwardsRequest) (*ProjectPortForwards, error)
	StopPortForward(context.Context, *StopPortForwardRequest) (*empty.Empty, error)
	StopAllWorkspacePortForwards(context.Context, *StopAllWorkspacePortForwardsRequest) (*empty.Empty, error)
}

// UnimplementedPortsServer should be embedded to have forward compatible implementations.
type UnimplementedPortsServer struct {
}

func (UnimplementedPortsServer) ForwardPort(context.Context, *ForwardPortRequest) (*PortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardPort not implemented")
}
func (UnimplementedPortsServer) GetPortForwards(context.Context, *GetPortForwardsRequest) (*WorkspacePortForward, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortForwards not implemented")
}
func (UnimplementedPortsServer) GetProjectPortForwards(context.Context, *GetProjectPortForwardsRequest) (*ProjectPortForwards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectPortForwards not implemented")
}
func (UnimplementedPortsServer) StopPortForward(context.Context, *StopPortForwardRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPortForward not implemented")
}
func (UnimplementedPortsServer) StopAllWorkspacePortForwards(context.Context, *StopAllWorkspacePortForwardsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAllWorkspacePortForwards not implemented")
}

// UnsafePortsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsServer will
// result in compilation errors.
type UnsafePortsServer interface {
	mustEmbedUnimplementedPortsServer()
}

func RegisterPortsServer(s grpc.ServiceRegistrar, srv PortsServer) {
	s.RegisterService(&Ports_ServiceDesc, srv)
}

func _Ports_ForwardPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServer).ForwardPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ports_ForwardPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServer).ForwardPort(ctx, req.(*ForwardPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ports_GetPortForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServer).GetPortForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ports_GetPortForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServer).GetPortForwards(ctx, req.(*GetPortForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ports_GetProjectPortForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectPortForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServer).GetProjectPortForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ports_GetProjectPortForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServer).GetProjectPortForwards(ctx, req.(*GetProjectPortForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ports_StopPortForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPortForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServer).StopPortForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ports_StopPortForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServer).StopPortForward(ctx, req.(*StopPortForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ports_StopAllWorkspacePortForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAllWorkspacePortForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServer).StopAllWorkspacePortForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ports_StopAllWorkspacePortForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServer).StopAllWorkspacePortForwards(ctx, req.(*StopAllWorkspacePortForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ports_ServiceDesc is the grpc.ServiceDesc for Ports service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ports_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Ports",
	HandlerType: (*PortsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardPort",
			Handler:    _Ports_ForwardPort_Handler,
		},
		{
			MethodName: "GetPortForwards",
			Handler:    _Ports_GetPortForwards_Handler,
		},
		{
			MethodName: "GetProjectPortForwards",
			Handler:    _Ports_GetProjectPortForwards_Handler,
		},
		{
			MethodName: "StopPortForward",
			Handler:    _Ports_StopPortForward_Handler,
		},
		{
			MethodName: "StopAllWorkspacePortForwards",
			Handler:    _Ports_StopAllWorkspacePortForwards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/grpc/proto/ports.proto",
}
