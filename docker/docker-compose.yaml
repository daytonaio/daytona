name: daytona
services:
  api:
    image: daytonaio/daytona-api
    ports:
      - 3000:3000
    environment:
      - OTEL_ENABLED=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
    networks:
      - daytona-network
    restart: always
    privileged: true
    depends_on:
      - db
      - runner
      - redis
      - dex
      - registry

  proxy:
    image: daytonaio/daytona-proxy
    networks:
      - daytona-network
    ports:
      - 4000:4000
    restart: always

  runner:
    image: daytonaio/daytona-runner
    networks:
      - daytona-network
    ports:
      - 3003:3003
    privileged: true
    restart: always

  ssh-gateway:
    image: daytonaio/daytona-ssh-gateway
    networks:
      - daytona-network
    ports:
      - 2222:2222
    restart: always

  dex:
    image: dexidp/dex:v2.42.0
    volumes:
      - ./dex/config.yaml:/etc/dex/config.yaml
      - dex_db:/var/dex
    entrypoint: ['sh', '-c', 'touch /var/dex/dex.db && exec dex serve /etc/dex/config.yaml']
    networks:
      - daytona-network
    ports:
      - 5556:5556
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5556/dex/.well-known/openid-configuration"]

  db:
    image: postgres:18
    environment:
      - POSTGRES_PASSWORD=pass
      - POSTGRES_USER=user
      - POSTGRES_DB=daytona
    networks:
      - daytona-network
    volumes:
      - db_data:/var/lib/postgresql/18/docker

  pgadmin:
    image: dpage/pgadmin4:9.2.0
    entrypoint: ['sh', '-c', 'chmod 600 /pgpass && exec /entrypoint.sh']
    environment:
      PGADMIN_DEFAULT_EMAIL: dev@daytona.io
      PGADMIN_DEFAULT_PASSWORD: pgadmin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    user: root
    volumes:
      - ./pgadmin4/servers.json:/pgadmin4/servers.json
      - ./pgadmin4/pgpass:/pgpass
    depends_on:
      - db
    ports:
      - 5050:80
    networks:
      - daytona-network

  redis:
    image: redis:latest
    networks:
      - daytona-network

  registry-ui:
    image: joxit/docker-registry-ui:main
    restart: always
    environment:
      - SINGLE_REGISTRY=true
      - REGISTRY_TITLE=Docker Registry UI
      - DELETE_IMAGES=true
      - SHOW_CONTENT_DIGEST=true
      - NGINX_PROXY_PASS_URL=http://localhost:6000
      - SHOW_CATALOG_NB_TAGS=true
      - CATALOG_MIN_BRANCHES=1
      - CATALOG_MAX_BRANCHES=1
      - TAGLIST_PAGE_SIZE=100
      - REGISTRY_SECURED=false
      - CATALOG_ELEMENTS_LIMIT=1000
    networks:
      - daytona-network
    ports:
      - 5100:5100

  registry:
    image: registry:2.8.2
    restart: always
    environment:
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Origin: '[http://registry-ui.example.com]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Credentials: '[true]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
      REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers: '[Docker-Content-Digest]'
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'
      REGISTRY_HTTP_ADDR: registry:6000
    volumes:
      - registry:/var/lib/registry
    networks:
      - daytona-network
    ports:
      - 6000:6000

  maildev:
    image: maildev/maildev
    networks:
      - daytona-network
    ports:
      - 1080:1080

  minio:
    image: minio/minio:latest
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_IDENTITY_STS_EXPIRY="24h"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - daytona-network
    ports:
      - 9001:9001

  jaeger:
    image: jaegertracing/all-in-one:1.67.0
    networks:
      - daytona-network
    ports:
      - 16686:16686

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.138.0
    volumes:
      - ./otel/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    networks:
      - daytona-network

volumes:
  registry: {}
  minio_data: {}
  db_data: {}
  dex_db: {}

networks:
  daytona-network:
    driver: bridge
