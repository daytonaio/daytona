// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: grpc/proto/workspace.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Workspace_Create_FullMethodName = "/Workspace/Create"
	Workspace_Info_FullMethodName   = "/Workspace/Info"
	Workspace_List_FullMethodName   = "/Workspace/List"
	Workspace_Start_FullMethodName  = "/Workspace/Start"
	Workspace_Stop_FullMethodName   = "/Workspace/Stop"
	Workspace_Remove_FullMethodName = "/Workspace/Remove"
)

// WorkspaceClient is the client API for Workspace service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkspaceClient interface {
	Create(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (Workspace_CreateClient, error)
	Info(ctx context.Context, in *WorkspaceInfoRequest, opts ...grpc.CallOption) (*WorkspaceInfoResponse, error)
	List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkspaceListResponse, error)
	Start(ctx context.Context, in *WorkspaceStartRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Stop(ctx context.Context, in *WorkspaceStopRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Remove(ctx context.Context, in *WorkspaceRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workspaceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkspaceClient(cc grpc.ClientConnInterface) WorkspaceClient {
	return &workspaceClient{cc}
}

func (c *workspaceClient) Create(ctx context.Context, in *CreateWorkspaceRequest, opts ...grpc.CallOption) (Workspace_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Workspace_ServiceDesc.Streams[0], Workspace_Create_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &workspaceCreateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Workspace_CreateClient interface {
	Recv() (*CreateWorkspaceResponse, error)
	grpc.ClientStream
}

type workspaceCreateClient struct {
	grpc.ClientStream
}

func (x *workspaceCreateClient) Recv() (*CreateWorkspaceResponse, error) {
	m := new(CreateWorkspaceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workspaceClient) Info(ctx context.Context, in *WorkspaceInfoRequest, opts ...grpc.CallOption) (*WorkspaceInfoResponse, error) {
	out := new(WorkspaceInfoResponse)
	err := c.cc.Invoke(ctx, Workspace_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) List(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WorkspaceListResponse, error) {
	out := new(WorkspaceListResponse)
	err := c.cc.Invoke(ctx, Workspace_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Start(ctx context.Context, in *WorkspaceStartRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Stop(ctx context.Context, in *WorkspaceStopRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workspaceClient) Remove(ctx context.Context, in *WorkspaceRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Workspace_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkspaceServer is the server API for Workspace service.
// All implementations must embed UnimplementedWorkspaceServer
// for forward compatibility
type WorkspaceServer interface {
	Create(*CreateWorkspaceRequest, Workspace_CreateServer) error
	Info(context.Context, *WorkspaceInfoRequest) (*WorkspaceInfoResponse, error)
	List(context.Context, *empty.Empty) (*WorkspaceListResponse, error)
	Start(context.Context, *WorkspaceStartRequest) (*empty.Empty, error)
	Stop(context.Context, *WorkspaceStopRequest) (*empty.Empty, error)
	Remove(context.Context, *WorkspaceRemoveRequest) (*empty.Empty, error)
	mustEmbedUnimplementedWorkspaceServer()
}

// UnimplementedWorkspaceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkspaceServer struct {
}

func (UnimplementedWorkspaceServer) Create(*CreateWorkspaceRequest, Workspace_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkspaceServer) Info(context.Context, *WorkspaceInfoRequest) (*WorkspaceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedWorkspaceServer) List(context.Context, *empty.Empty) (*WorkspaceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWorkspaceServer) Start(context.Context, *WorkspaceStartRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedWorkspaceServer) Stop(context.Context, *WorkspaceStopRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedWorkspaceServer) Remove(context.Context, *WorkspaceRemoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedWorkspaceServer) mustEmbedUnimplementedWorkspaceServer() {}

// UnsafeWorkspaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkspaceServer will
// result in compilation errors.
type UnsafeWorkspaceServer interface {
	mustEmbedUnimplementedWorkspaceServer()
}

func RegisterWorkspaceServer(s grpc.ServiceRegistrar, srv WorkspaceServer) {
	s.RegisterService(&Workspace_ServiceDesc, srv)
}

func _Workspace_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateWorkspaceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkspaceServer).Create(m, &workspaceCreateServer{stream})
}

type Workspace_CreateServer interface {
	Send(*CreateWorkspaceResponse) error
	grpc.ServerStream
}

type workspaceCreateServer struct {
	grpc.ServerStream
}

func (x *workspaceCreateServer) Send(m *CreateWorkspaceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Workspace_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Info(ctx, req.(*WorkspaceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).List(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Start(ctx, req.(*WorkspaceStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Stop(ctx, req.(*WorkspaceStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workspace_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkspaceRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkspaceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Workspace_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkspaceServer).Remove(ctx, req.(*WorkspaceRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Workspace_ServiceDesc is the grpc.ServiceDesc for Workspace service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Workspace_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Workspace",
	HandlerType: (*WorkspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Workspace_Info_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Workspace_List_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Workspace_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Workspace_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Workspace_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Create",
			Handler:       _Workspace_Create_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/proto/workspace.proto",
}
