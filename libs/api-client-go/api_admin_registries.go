/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type AdminRegistriesAPI interface {

	/*
		AdminCreateRegistry Create registry

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdminRegistriesAPIAdminCreateRegistryRequest
	*/
	AdminCreateRegistry(ctx context.Context) AdminRegistriesAPIAdminCreateRegistryRequest

	// AdminCreateRegistryExecute executes the request
	//  @return DockerRegistry
	AdminCreateRegistryExecute(r AdminRegistriesAPIAdminCreateRegistryRequest) (*DockerRegistry, *http.Response, error)

	/*
		AdminDeleteRegistry Delete registry

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id Registry ID
		@return AdminRegistriesAPIAdminDeleteRegistryRequest
	*/
	AdminDeleteRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminDeleteRegistryRequest

	// AdminDeleteRegistryExecute executes the request
	AdminDeleteRegistryExecute(r AdminRegistriesAPIAdminDeleteRegistryRequest) (*http.Response, error)

	/*
		AdminGetRegistry Get registry

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id Registry ID
		@return AdminRegistriesAPIAdminGetRegistryRequest
	*/
	AdminGetRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminGetRegistryRequest

	// AdminGetRegistryExecute executes the request
	//  @return DockerRegistry
	AdminGetRegistryExecute(r AdminRegistriesAPIAdminGetRegistryRequest) (*DockerRegistry, *http.Response, error)

	/*
		AdminListRegistries List registries

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdminRegistriesAPIAdminListRegistriesRequest
	*/
	AdminListRegistries(ctx context.Context) AdminRegistriesAPIAdminListRegistriesRequest

	// AdminListRegistriesExecute executes the request
	//  @return []DockerRegistry
	AdminListRegistriesExecute(r AdminRegistriesAPIAdminListRegistriesRequest) ([]DockerRegistry, *http.Response, error)

	/*
		AdminUpdateRegistry Update registry

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id Registry ID
		@return AdminRegistriesAPIAdminUpdateRegistryRequest
	*/
	AdminUpdateRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminUpdateRegistryRequest

	// AdminUpdateRegistryExecute executes the request
	//  @return DockerRegistry
	AdminUpdateRegistryExecute(r AdminRegistriesAPIAdminUpdateRegistryRequest) (*DockerRegistry, *http.Response, error)
}

// AdminRegistriesAPIService AdminRegistriesAPI service
type AdminRegistriesAPIService service

type AdminRegistriesAPIAdminCreateRegistryRequest struct {
	ctx                       context.Context
	ApiService                AdminRegistriesAPI
	adminCreateDockerRegistry *AdminCreateDockerRegistry
}

func (r AdminRegistriesAPIAdminCreateRegistryRequest) AdminCreateDockerRegistry(adminCreateDockerRegistry AdminCreateDockerRegistry) AdminRegistriesAPIAdminCreateRegistryRequest {
	r.adminCreateDockerRegistry = &adminCreateDockerRegistry
	return r
}

func (r AdminRegistriesAPIAdminCreateRegistryRequest) Execute() (*DockerRegistry, *http.Response, error) {
	return r.ApiService.AdminCreateRegistryExecute(r)
}

/*
AdminCreateRegistry Create registry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdminRegistriesAPIAdminCreateRegistryRequest
*/
func (a *AdminRegistriesAPIService) AdminCreateRegistry(ctx context.Context) AdminRegistriesAPIAdminCreateRegistryRequest {
	return AdminRegistriesAPIAdminCreateRegistryRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DockerRegistry
func (a *AdminRegistriesAPIService) AdminCreateRegistryExecute(r AdminRegistriesAPIAdminCreateRegistryRequest) (*DockerRegistry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DockerRegistry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRegistriesAPIService.AdminCreateRegistry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/registries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adminCreateDockerRegistry == nil {
		return localVarReturnValue, nil, reportError("adminCreateDockerRegistry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adminCreateDockerRegistry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRegistriesAPIAdminDeleteRegistryRequest struct {
	ctx        context.Context
	ApiService AdminRegistriesAPI
	id         string
}

func (r AdminRegistriesAPIAdminDeleteRegistryRequest) Execute() (*http.Response, error) {
	return r.ApiService.AdminDeleteRegistryExecute(r)
}

/*
AdminDeleteRegistry Delete registry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Registry ID
	@return AdminRegistriesAPIAdminDeleteRegistryRequest
*/
func (a *AdminRegistriesAPIService) AdminDeleteRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminDeleteRegistryRequest {
	return AdminRegistriesAPIAdminDeleteRegistryRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AdminRegistriesAPIService) AdminDeleteRegistryExecute(r AdminRegistriesAPIAdminDeleteRegistryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRegistriesAPIService.AdminDeleteRegistry")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/registries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type AdminRegistriesAPIAdminGetRegistryRequest struct {
	ctx        context.Context
	ApiService AdminRegistriesAPI
	id         string
}

func (r AdminRegistriesAPIAdminGetRegistryRequest) Execute() (*DockerRegistry, *http.Response, error) {
	return r.ApiService.AdminGetRegistryExecute(r)
}

/*
AdminGetRegistry Get registry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Registry ID
	@return AdminRegistriesAPIAdminGetRegistryRequest
*/
func (a *AdminRegistriesAPIService) AdminGetRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminGetRegistryRequest {
	return AdminRegistriesAPIAdminGetRegistryRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DockerRegistry
func (a *AdminRegistriesAPIService) AdminGetRegistryExecute(r AdminRegistriesAPIAdminGetRegistryRequest) (*DockerRegistry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DockerRegistry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRegistriesAPIService.AdminGetRegistry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/registries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRegistriesAPIAdminListRegistriesRequest struct {
	ctx            context.Context
	ApiService     AdminRegistriesAPI
	organizationId *string
	region         *string
}

// Filter registries by organization ID
func (r AdminRegistriesAPIAdminListRegistriesRequest) OrganizationId(organizationId string) AdminRegistriesAPIAdminListRegistriesRequest {
	r.organizationId = &organizationId
	return r
}

// Filter registries by region name (organization ID is required)
func (r AdminRegistriesAPIAdminListRegistriesRequest) Region(region string) AdminRegistriesAPIAdminListRegistriesRequest {
	r.region = &region
	return r
}

func (r AdminRegistriesAPIAdminListRegistriesRequest) Execute() ([]DockerRegistry, *http.Response, error) {
	return r.ApiService.AdminListRegistriesExecute(r)
}

/*
AdminListRegistries List registries

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdminRegistriesAPIAdminListRegistriesRequest
*/
func (a *AdminRegistriesAPIService) AdminListRegistries(ctx context.Context) AdminRegistriesAPIAdminListRegistriesRequest {
	return AdminRegistriesAPIAdminListRegistriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DockerRegistry
func (a *AdminRegistriesAPIService) AdminListRegistriesExecute(r AdminRegistriesAPIAdminListRegistriesRequest) ([]DockerRegistry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DockerRegistry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRegistriesAPIService.AdminListRegistries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/registries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRegistriesAPIAdminUpdateRegistryRequest struct {
	ctx                       context.Context
	ApiService                AdminRegistriesAPI
	id                        string
	adminUpdateDockerRegistry *AdminUpdateDockerRegistry
}

func (r AdminRegistriesAPIAdminUpdateRegistryRequest) AdminUpdateDockerRegistry(adminUpdateDockerRegistry AdminUpdateDockerRegistry) AdminRegistriesAPIAdminUpdateRegistryRequest {
	r.adminUpdateDockerRegistry = &adminUpdateDockerRegistry
	return r
}

func (r AdminRegistriesAPIAdminUpdateRegistryRequest) Execute() (*DockerRegistry, *http.Response, error) {
	return r.ApiService.AdminUpdateRegistryExecute(r)
}

/*
AdminUpdateRegistry Update registry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id Registry ID
	@return AdminRegistriesAPIAdminUpdateRegistryRequest
*/
func (a *AdminRegistriesAPIService) AdminUpdateRegistry(ctx context.Context, id string) AdminRegistriesAPIAdminUpdateRegistryRequest {
	return AdminRegistriesAPIAdminUpdateRegistryRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DockerRegistry
func (a *AdminRegistriesAPIService) AdminUpdateRegistryExecute(r AdminRegistriesAPIAdminUpdateRegistryRequest) (*DockerRegistry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DockerRegistry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRegistriesAPIService.AdminUpdateRegistry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/registries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adminUpdateDockerRegistry == nil {
		return localVarReturnValue, nil, reportError("adminUpdateDockerRegistry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adminUpdateDockerRegistry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
