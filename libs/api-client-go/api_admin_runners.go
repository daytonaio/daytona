/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type AdminRunnersAPI interface {

	/*
		AdminCreateRunner Create runner

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdminRunnersAPIAdminCreateRunnerRequest
	*/
	AdminCreateRunner(ctx context.Context) AdminRunnersAPIAdminCreateRunnerRequest

	// AdminCreateRunnerExecute executes the request
	//  @return Runner
	AdminCreateRunnerExecute(r AdminRunnersAPIAdminCreateRunnerRequest) (*Runner, *http.Response, error)

	/*
		AdminListRunners List all runners

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdminRunnersAPIAdminListRunnersRequest
	*/
	AdminListRunners(ctx context.Context) AdminRunnersAPIAdminListRunnersRequest

	// AdminListRunnersExecute executes the request
	//  @return []Runner
	AdminListRunnersExecute(r AdminRunnersAPIAdminListRunnersRequest) ([]Runner, *http.Response, error)

	/*
		GetRunnerBySandboxId Get runner by sandbox ID

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param sandboxId
		@return AdminRunnersAPIGetRunnerBySandboxIdRequest
	*/
	GetRunnerBySandboxId(ctx context.Context, sandboxId string) AdminRunnersAPIGetRunnerBySandboxIdRequest

	// GetRunnerBySandboxIdExecute executes the request
	//  @return Runner
	GetRunnerBySandboxIdExecute(r AdminRunnersAPIGetRunnerBySandboxIdRequest) (*Runner, *http.Response, error)

	/*
		GetRunnersBySnapshotRef Get runners by snapshot ref

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AdminRunnersAPIGetRunnersBySnapshotRefRequest
	*/
	GetRunnersBySnapshotRef(ctx context.Context) AdminRunnersAPIGetRunnersBySnapshotRefRequest

	// GetRunnersBySnapshotRefExecute executes the request
	//  @return []RunnerSnapshotDto
	GetRunnersBySnapshotRefExecute(r AdminRunnersAPIGetRunnersBySnapshotRefRequest) ([]RunnerSnapshotDto, *http.Response, error)
}

// AdminRunnersAPIService AdminRunnersAPI service
type AdminRunnersAPIService service

type AdminRunnersAPIAdminCreateRunnerRequest struct {
	ctx               context.Context
	ApiService        AdminRunnersAPI
	adminCreateRunner *AdminCreateRunner
}

func (r AdminRunnersAPIAdminCreateRunnerRequest) AdminCreateRunner(adminCreateRunner AdminCreateRunner) AdminRunnersAPIAdminCreateRunnerRequest {
	r.adminCreateRunner = &adminCreateRunner
	return r
}

func (r AdminRunnersAPIAdminCreateRunnerRequest) Execute() (*Runner, *http.Response, error) {
	return r.ApiService.AdminCreateRunnerExecute(r)
}

/*
AdminCreateRunner Create runner

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdminRunnersAPIAdminCreateRunnerRequest
*/
func (a *AdminRunnersAPIService) AdminCreateRunner(ctx context.Context) AdminRunnersAPIAdminCreateRunnerRequest {
	return AdminRunnersAPIAdminCreateRunnerRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Runner
func (a *AdminRunnersAPIService) AdminCreateRunnerExecute(r AdminRunnersAPIAdminCreateRunnerRequest) (*Runner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Runner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRunnersAPIService.AdminCreateRunner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/runners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adminCreateRunner == nil {
		return localVarReturnValue, nil, reportError("adminCreateRunner is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adminCreateRunner
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRunnersAPIAdminListRunnersRequest struct {
	ctx            context.Context
	ApiService     AdminRunnersAPI
	organizationId *string
	region         *string
}

// Filter runners by organization ID
func (r AdminRunnersAPIAdminListRunnersRequest) OrganizationId(organizationId string) AdminRunnersAPIAdminListRunnersRequest {
	r.organizationId = &organizationId
	return r
}

// Filter runners by region name (organization ID is required)
func (r AdminRunnersAPIAdminListRunnersRequest) Region(region string) AdminRunnersAPIAdminListRunnersRequest {
	r.region = &region
	return r
}

func (r AdminRunnersAPIAdminListRunnersRequest) Execute() ([]Runner, *http.Response, error) {
	return r.ApiService.AdminListRunnersExecute(r)
}

/*
AdminListRunners List all runners

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdminRunnersAPIAdminListRunnersRequest
*/
func (a *AdminRunnersAPIService) AdminListRunners(ctx context.Context) AdminRunnersAPIAdminListRunnersRequest {
	return AdminRunnersAPIAdminListRunnersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Runner
func (a *AdminRunnersAPIService) AdminListRunnersExecute(r AdminRunnersAPIAdminListRunnersRequest) ([]Runner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Runner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRunnersAPIService.AdminListRunners")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/runners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "form", "")
	}
	if r.region != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "region", r.region, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRunnersAPIGetRunnerBySandboxIdRequest struct {
	ctx        context.Context
	ApiService AdminRunnersAPI
	sandboxId  string
}

func (r AdminRunnersAPIGetRunnerBySandboxIdRequest) Execute() (*Runner, *http.Response, error) {
	return r.ApiService.GetRunnerBySandboxIdExecute(r)
}

/*
GetRunnerBySandboxId Get runner by sandbox ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param sandboxId
	@return AdminRunnersAPIGetRunnerBySandboxIdRequest
*/
func (a *AdminRunnersAPIService) GetRunnerBySandboxId(ctx context.Context, sandboxId string) AdminRunnersAPIGetRunnerBySandboxIdRequest {
	return AdminRunnersAPIGetRunnerBySandboxIdRequest{
		ApiService: a,
		ctx:        ctx,
		sandboxId:  sandboxId,
	}
}

// Execute executes the request
//
//	@return Runner
func (a *AdminRunnersAPIService) GetRunnerBySandboxIdExecute(r AdminRunnersAPIGetRunnerBySandboxIdRequest) (*Runner, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Runner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRunnersAPIService.GetRunnerBySandboxId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/runners/by-sandbox/{sandboxId}"
	localVarPath = strings.Replace(localVarPath, "{"+"sandboxId"+"}", url.PathEscape(parameterValueToString(r.sandboxId, "sandboxId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AdminRunnersAPIGetRunnersBySnapshotRefRequest struct {
	ctx        context.Context
	ApiService AdminRunnersAPI
	ref        *string
}

// Snapshot ref
func (r AdminRunnersAPIGetRunnersBySnapshotRefRequest) Ref(ref string) AdminRunnersAPIGetRunnersBySnapshotRefRequest {
	r.ref = &ref
	return r
}

func (r AdminRunnersAPIGetRunnersBySnapshotRefRequest) Execute() ([]RunnerSnapshotDto, *http.Response, error) {
	return r.ApiService.GetRunnersBySnapshotRefExecute(r)
}

/*
GetRunnersBySnapshotRef Get runners by snapshot ref

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AdminRunnersAPIGetRunnersBySnapshotRefRequest
*/
func (a *AdminRunnersAPIService) GetRunnersBySnapshotRef(ctx context.Context) AdminRunnersAPIGetRunnersBySnapshotRefRequest {
	return AdminRunnersAPIGetRunnersBySnapshotRefRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []RunnerSnapshotDto
func (a *AdminRunnersAPIService) GetRunnersBySnapshotRefExecute(r AdminRunnersAPIGetRunnersBySnapshotRefRequest) ([]RunnerSnapshotDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []RunnerSnapshotDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminRunnersAPIService.GetRunnersBySnapshotRef")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin/runners/by-snapshot-ref"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ref == nil {
		return localVarReturnValue, nil, reportError("ref is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "ref", r.ref, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
