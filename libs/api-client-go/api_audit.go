/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

type AuditAPI interface {

	/*
		GetAllAuditLogs Get all audit logs

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return AuditAPIGetAllAuditLogsRequest
	*/
	GetAllAuditLogs(ctx context.Context) AuditAPIGetAllAuditLogsRequest

	// GetAllAuditLogsExecute executes the request
	//  @return PaginatedAuditLogs
	GetAllAuditLogsExecute(r AuditAPIGetAllAuditLogsRequest) (*PaginatedAuditLogs, *http.Response, error)

	/*
		GetOrganizationAuditLogs Get audit logs for organization

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param organizationId Organization ID
		@return AuditAPIGetOrganizationAuditLogsRequest
	*/
	GetOrganizationAuditLogs(ctx context.Context, organizationId string) AuditAPIGetOrganizationAuditLogsRequest

	// GetOrganizationAuditLogsExecute executes the request
	//  @return PaginatedAuditLogs
	GetOrganizationAuditLogsExecute(r AuditAPIGetOrganizationAuditLogsRequest) (*PaginatedAuditLogs, *http.Response, error)
}

// AuditAPIService AuditAPI service
type AuditAPIService service

type AuditAPIGetAllAuditLogsRequest struct {
	ctx        context.Context
	ApiService AuditAPI
	page       *float32
	limit      *float32
	from       *time.Time
	to         *time.Time
	nextToken  *string
}

// Page number of the results
func (r AuditAPIGetAllAuditLogsRequest) Page(page float32) AuditAPIGetAllAuditLogsRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r AuditAPIGetAllAuditLogsRequest) Limit(limit float32) AuditAPIGetAllAuditLogsRequest {
	r.limit = &limit
	return r
}

// From date (ISO 8601 format)
func (r AuditAPIGetAllAuditLogsRequest) From(from time.Time) AuditAPIGetAllAuditLogsRequest {
	r.from = &from
	return r
}

// To date (ISO 8601 format)
func (r AuditAPIGetAllAuditLogsRequest) To(to time.Time) AuditAPIGetAllAuditLogsRequest {
	r.to = &to
	return r
}

// Token for cursor-based pagination. When provided, takes precedence over page parameter.
func (r AuditAPIGetAllAuditLogsRequest) NextToken(nextToken string) AuditAPIGetAllAuditLogsRequest {
	r.nextToken = &nextToken
	return r
}

func (r AuditAPIGetAllAuditLogsRequest) Execute() (*PaginatedAuditLogs, *http.Response, error) {
	return r.ApiService.GetAllAuditLogsExecute(r)
}

/*
GetAllAuditLogs Get all audit logs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return AuditAPIGetAllAuditLogsRequest
*/
func (a *AuditAPIService) GetAllAuditLogs(ctx context.Context) AuditAPIGetAllAuditLogsRequest {
	return AuditAPIGetAllAuditLogsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PaginatedAuditLogs
func (a *AuditAPIService) GetAllAuditLogsExecute(r AuditAPIGetAllAuditLogsRequest) (*PaginatedAuditLogs, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedAuditLogs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditAPIService.GetAllAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue float32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 100
		r.limit = &defaultValue
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "form", "")
	}
	if r.nextToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextToken", r.nextToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AuditAPIGetOrganizationAuditLogsRequest struct {
	ctx            context.Context
	ApiService     AuditAPI
	organizationId string
	page           *float32
	limit          *float32
	from           *time.Time
	to             *time.Time
	nextToken      *string
}

// Page number of the results
func (r AuditAPIGetOrganizationAuditLogsRequest) Page(page float32) AuditAPIGetOrganizationAuditLogsRequest {
	r.page = &page
	return r
}

// Number of results per page
func (r AuditAPIGetOrganizationAuditLogsRequest) Limit(limit float32) AuditAPIGetOrganizationAuditLogsRequest {
	r.limit = &limit
	return r
}

// From date (ISO 8601 format)
func (r AuditAPIGetOrganizationAuditLogsRequest) From(from time.Time) AuditAPIGetOrganizationAuditLogsRequest {
	r.from = &from
	return r
}

// To date (ISO 8601 format)
func (r AuditAPIGetOrganizationAuditLogsRequest) To(to time.Time) AuditAPIGetOrganizationAuditLogsRequest {
	r.to = &to
	return r
}

// Token for cursor-based pagination. When provided, takes precedence over page parameter.
func (r AuditAPIGetOrganizationAuditLogsRequest) NextToken(nextToken string) AuditAPIGetOrganizationAuditLogsRequest {
	r.nextToken = &nextToken
	return r
}

func (r AuditAPIGetOrganizationAuditLogsRequest) Execute() (*PaginatedAuditLogs, *http.Response, error) {
	return r.ApiService.GetOrganizationAuditLogsExecute(r)
}

/*
GetOrganizationAuditLogs Get audit logs for organization

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param organizationId Organization ID
	@return AuditAPIGetOrganizationAuditLogsRequest
*/
func (a *AuditAPIService) GetOrganizationAuditLogs(ctx context.Context, organizationId string) AuditAPIGetOrganizationAuditLogsRequest {
	return AuditAPIGetOrganizationAuditLogsRequest{
		ApiService:     a,
		ctx:            ctx,
		organizationId: organizationId,
	}
}

// Execute executes the request
//
//	@return PaginatedAuditLogs
func (a *AuditAPIService) GetOrganizationAuditLogsExecute(r AuditAPIGetOrganizationAuditLogsRequest) (*PaginatedAuditLogs, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PaginatedAuditLogs
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuditAPIService.GetOrganizationAuditLogs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/audit/organizations/{organizationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationId"+"}", url.PathEscape(parameterValueToString(r.organizationId, "organizationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue float32 = 1
		r.page = &defaultValue
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue float32 = 100
		r.limit = &defaultValue
	}
	if r.from != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "form", "")
	}
	if r.to != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "form", "")
	}
	if r.nextToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "nextToken", r.nextToken, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
