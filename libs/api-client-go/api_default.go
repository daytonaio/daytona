/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type DefaultAPI interface {

	/*
		SandboxCreatedPost Method for SandboxCreatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPISandboxCreatedPostRequest
	*/
	SandboxCreatedPost(ctx context.Context) DefaultAPISandboxCreatedPostRequest

	// SandboxCreatedPostExecute executes the request
	SandboxCreatedPostExecute(r DefaultAPISandboxCreatedPostRequest) (*http.Response, error)

	/*
		SandboxStateUpdatedPost Method for SandboxStateUpdatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPISandboxStateUpdatedPostRequest
	*/
	SandboxStateUpdatedPost(ctx context.Context) DefaultAPISandboxStateUpdatedPostRequest

	// SandboxStateUpdatedPostExecute executes the request
	SandboxStateUpdatedPostExecute(r DefaultAPISandboxStateUpdatedPostRequest) (*http.Response, error)

	/*
		SnapshotCreatedPost Method for SnapshotCreatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPISnapshotCreatedPostRequest
	*/
	SnapshotCreatedPost(ctx context.Context) DefaultAPISnapshotCreatedPostRequest

	// SnapshotCreatedPostExecute executes the request
	SnapshotCreatedPostExecute(r DefaultAPISnapshotCreatedPostRequest) (*http.Response, error)

	/*
		SnapshotRemovedPost Method for SnapshotRemovedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPISnapshotRemovedPostRequest
	*/
	SnapshotRemovedPost(ctx context.Context) DefaultAPISnapshotRemovedPostRequest

	// SnapshotRemovedPostExecute executes the request
	SnapshotRemovedPostExecute(r DefaultAPISnapshotRemovedPostRequest) (*http.Response, error)

	/*
		SnapshotStateUpdatedPost Method for SnapshotStateUpdatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPISnapshotStateUpdatedPostRequest
	*/
	SnapshotStateUpdatedPost(ctx context.Context) DefaultAPISnapshotStateUpdatedPostRequest

	// SnapshotStateUpdatedPostExecute executes the request
	SnapshotStateUpdatedPostExecute(r DefaultAPISnapshotStateUpdatedPostRequest) (*http.Response, error)

	/*
		VolumeCreatedPost Method for VolumeCreatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIVolumeCreatedPostRequest
	*/
	VolumeCreatedPost(ctx context.Context) DefaultAPIVolumeCreatedPostRequest

	// VolumeCreatedPostExecute executes the request
	VolumeCreatedPostExecute(r DefaultAPIVolumeCreatedPostRequest) (*http.Response, error)

	/*
		VolumeStateUpdatedPost Method for VolumeStateUpdatedPost

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DefaultAPIVolumeStateUpdatedPostRequest
	*/
	VolumeStateUpdatedPost(ctx context.Context) DefaultAPIVolumeStateUpdatedPostRequest

	// VolumeStateUpdatedPostExecute executes the request
	VolumeStateUpdatedPostExecute(r DefaultAPIVolumeStateUpdatedPostRequest) (*http.Response, error)
}

// DefaultAPIService DefaultAPI service
type DefaultAPIService service

type DefaultAPISandboxCreatedPostRequest struct {
	ctx                       context.Context
	ApiService                DefaultAPI
	sandboxCreatedPostRequest *SandboxCreatedPostRequest
}

// Sandbox created event
func (r DefaultAPISandboxCreatedPostRequest) SandboxCreatedPostRequest(sandboxCreatedPostRequest SandboxCreatedPostRequest) DefaultAPISandboxCreatedPostRequest {
	r.sandboxCreatedPostRequest = &sandboxCreatedPostRequest
	return r
}

func (r DefaultAPISandboxCreatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SandboxCreatedPostExecute(r)
}

/*
SandboxCreatedPost Method for SandboxCreatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPISandboxCreatedPostRequest
*/
func (a *DefaultAPIService) SandboxCreatedPost(ctx context.Context) DefaultAPISandboxCreatedPostRequest {
	return DefaultAPISandboxCreatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SandboxCreatedPostExecute(r DefaultAPISandboxCreatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SandboxCreatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sandbox.created"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sandboxCreatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPISandboxStateUpdatedPostRequest struct {
	ctx                            context.Context
	ApiService                     DefaultAPI
	sandboxStateUpdatedPostRequest *SandboxStateUpdatedPostRequest
}

// Sandbox state updated event
func (r DefaultAPISandboxStateUpdatedPostRequest) SandboxStateUpdatedPostRequest(sandboxStateUpdatedPostRequest SandboxStateUpdatedPostRequest) DefaultAPISandboxStateUpdatedPostRequest {
	r.sandboxStateUpdatedPostRequest = &sandboxStateUpdatedPostRequest
	return r
}

func (r DefaultAPISandboxStateUpdatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SandboxStateUpdatedPostExecute(r)
}

/*
SandboxStateUpdatedPost Method for SandboxStateUpdatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPISandboxStateUpdatedPostRequest
*/
func (a *DefaultAPIService) SandboxStateUpdatedPost(ctx context.Context) DefaultAPISandboxStateUpdatedPostRequest {
	return DefaultAPISandboxStateUpdatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SandboxStateUpdatedPostExecute(r DefaultAPISandboxStateUpdatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SandboxStateUpdatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sandbox.state.updated"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.sandboxStateUpdatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPISnapshotCreatedPostRequest struct {
	ctx                        context.Context
	ApiService                 DefaultAPI
	snapshotCreatedPostRequest *SnapshotCreatedPostRequest
}

// Snapshot created event
func (r DefaultAPISnapshotCreatedPostRequest) SnapshotCreatedPostRequest(snapshotCreatedPostRequest SnapshotCreatedPostRequest) DefaultAPISnapshotCreatedPostRequest {
	r.snapshotCreatedPostRequest = &snapshotCreatedPostRequest
	return r
}

func (r DefaultAPISnapshotCreatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SnapshotCreatedPostExecute(r)
}

/*
SnapshotCreatedPost Method for SnapshotCreatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPISnapshotCreatedPostRequest
*/
func (a *DefaultAPIService) SnapshotCreatedPost(ctx context.Context) DefaultAPISnapshotCreatedPostRequest {
	return DefaultAPISnapshotCreatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SnapshotCreatedPostExecute(r DefaultAPISnapshotCreatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SnapshotCreatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/snapshot.created"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.snapshotCreatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPISnapshotRemovedPostRequest struct {
	ctx                        context.Context
	ApiService                 DefaultAPI
	snapshotRemovedPostRequest *SnapshotRemovedPostRequest
}

// Snapshot removed event
func (r DefaultAPISnapshotRemovedPostRequest) SnapshotRemovedPostRequest(snapshotRemovedPostRequest SnapshotRemovedPostRequest) DefaultAPISnapshotRemovedPostRequest {
	r.snapshotRemovedPostRequest = &snapshotRemovedPostRequest
	return r
}

func (r DefaultAPISnapshotRemovedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SnapshotRemovedPostExecute(r)
}

/*
SnapshotRemovedPost Method for SnapshotRemovedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPISnapshotRemovedPostRequest
*/
func (a *DefaultAPIService) SnapshotRemovedPost(ctx context.Context) DefaultAPISnapshotRemovedPostRequest {
	return DefaultAPISnapshotRemovedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SnapshotRemovedPostExecute(r DefaultAPISnapshotRemovedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SnapshotRemovedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/snapshot.removed"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.snapshotRemovedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPISnapshotStateUpdatedPostRequest struct {
	ctx                             context.Context
	ApiService                      DefaultAPI
	snapshotStateUpdatedPostRequest *SnapshotStateUpdatedPostRequest
}

// Snapshot state updated event
func (r DefaultAPISnapshotStateUpdatedPostRequest) SnapshotStateUpdatedPostRequest(snapshotStateUpdatedPostRequest SnapshotStateUpdatedPostRequest) DefaultAPISnapshotStateUpdatedPostRequest {
	r.snapshotStateUpdatedPostRequest = &snapshotStateUpdatedPostRequest
	return r
}

func (r DefaultAPISnapshotStateUpdatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.SnapshotStateUpdatedPostExecute(r)
}

/*
SnapshotStateUpdatedPost Method for SnapshotStateUpdatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPISnapshotStateUpdatedPostRequest
*/
func (a *DefaultAPIService) SnapshotStateUpdatedPost(ctx context.Context) DefaultAPISnapshotStateUpdatedPostRequest {
	return DefaultAPISnapshotStateUpdatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) SnapshotStateUpdatedPostExecute(r DefaultAPISnapshotStateUpdatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.SnapshotStateUpdatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/snapshot.state.updated"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.snapshotStateUpdatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIVolumeCreatedPostRequest struct {
	ctx                      context.Context
	ApiService               DefaultAPI
	volumeCreatedPostRequest *VolumeCreatedPostRequest
}

// Volume created event
func (r DefaultAPIVolumeCreatedPostRequest) VolumeCreatedPostRequest(volumeCreatedPostRequest VolumeCreatedPostRequest) DefaultAPIVolumeCreatedPostRequest {
	r.volumeCreatedPostRequest = &volumeCreatedPostRequest
	return r
}

func (r DefaultAPIVolumeCreatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumeCreatedPostExecute(r)
}

/*
VolumeCreatedPost Method for VolumeCreatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIVolumeCreatedPostRequest
*/
func (a *DefaultAPIService) VolumeCreatedPost(ctx context.Context) DefaultAPIVolumeCreatedPostRequest {
	return DefaultAPIVolumeCreatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) VolumeCreatedPostExecute(r DefaultAPIVolumeCreatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.VolumeCreatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume.created"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeCreatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultAPIVolumeStateUpdatedPostRequest struct {
	ctx                           context.Context
	ApiService                    DefaultAPI
	volumeStateUpdatedPostRequest *VolumeStateUpdatedPostRequest
}

// Volume state updated event
func (r DefaultAPIVolumeStateUpdatedPostRequest) VolumeStateUpdatedPostRequest(volumeStateUpdatedPostRequest VolumeStateUpdatedPostRequest) DefaultAPIVolumeStateUpdatedPostRequest {
	r.volumeStateUpdatedPostRequest = &volumeStateUpdatedPostRequest
	return r
}

func (r DefaultAPIVolumeStateUpdatedPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumeStateUpdatedPostExecute(r)
}

/*
VolumeStateUpdatedPost Method for VolumeStateUpdatedPost

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DefaultAPIVolumeStateUpdatedPostRequest
*/
func (a *DefaultAPIService) VolumeStateUpdatedPost(ctx context.Context) DefaultAPIVolumeStateUpdatedPostRequest {
	return DefaultAPIVolumeStateUpdatedPostRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DefaultAPIService) VolumeStateUpdatedPostExecute(r DefaultAPIVolumeStateUpdatedPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultAPIService.VolumeStateUpdatedPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volume.state.updated"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.volumeStateUpdatedPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
