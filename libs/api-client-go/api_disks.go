/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type DisksAPI interface {

	/*
		CreateDisk Create a new disk

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DisksAPICreateDiskRequest
	*/
	CreateDisk(ctx context.Context) DisksAPICreateDiskRequest

	// CreateDiskExecute executes the request
	//  @return DiskDto
	CreateDiskExecute(r DisksAPICreateDiskRequest) (*DiskDto, *http.Response, error)

	/*
		DeleteDisk Delete disk

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param diskId ID of the disk
		@return DisksAPIDeleteDiskRequest
	*/
	DeleteDisk(ctx context.Context, diskId string) DisksAPIDeleteDiskRequest

	// DeleteDiskExecute executes the request
	DeleteDiskExecute(r DisksAPIDeleteDiskRequest) (*http.Response, error)

	/*
		GetDisk Get disk details

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param diskId ID of the disk
		@return DisksAPIGetDiskRequest
	*/
	GetDisk(ctx context.Context, diskId string) DisksAPIGetDiskRequest

	// GetDiskExecute executes the request
	//  @return DiskDto
	GetDiskExecute(r DisksAPIGetDiskRequest) (*DiskDto, *http.Response, error)

	/*
		ListDisks List all disks

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return DisksAPIListDisksRequest
	*/
	ListDisks(ctx context.Context) DisksAPIListDisksRequest

	// ListDisksExecute executes the request
	//  @return []DiskDto
	ListDisksExecute(r DisksAPIListDisksRequest) ([]DiskDto, *http.Response, error)
}

// DisksAPIService DisksAPI service
type DisksAPIService service

type DisksAPICreateDiskRequest struct {
	ctx                    context.Context
	ApiService             DisksAPI
	createDiskDto          *CreateDiskDto
	xDaytonaOrganizationID *string
}

func (r DisksAPICreateDiskRequest) CreateDiskDto(createDiskDto CreateDiskDto) DisksAPICreateDiskRequest {
	r.createDiskDto = &createDiskDto
	return r
}

// Use with JWT to specify the organization ID
func (r DisksAPICreateDiskRequest) XDaytonaOrganizationID(xDaytonaOrganizationID string) DisksAPICreateDiskRequest {
	r.xDaytonaOrganizationID = &xDaytonaOrganizationID
	return r
}

func (r DisksAPICreateDiskRequest) Execute() (*DiskDto, *http.Response, error) {
	return r.ApiService.CreateDiskExecute(r)
}

/*
CreateDisk Create a new disk

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DisksAPICreateDiskRequest
*/
func (a *DisksAPIService) CreateDisk(ctx context.Context) DisksAPICreateDiskRequest {
	return DisksAPICreateDiskRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DiskDto
func (a *DisksAPIService) CreateDiskExecute(r DisksAPICreateDiskRequest) (*DiskDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiskDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisksAPIService.CreateDisk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDiskDto == nil {
		return localVarReturnValue, nil, reportError("createDiskDto is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDaytonaOrganizationID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Daytona-Organization-ID", r.xDaytonaOrganizationID, "simple", "")
	}
	// body params
	localVarPostBody = r.createDiskDto
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DisksAPIDeleteDiskRequest struct {
	ctx                    context.Context
	ApiService             DisksAPI
	diskId                 string
	xDaytonaOrganizationID *string
}

// Use with JWT to specify the organization ID
func (r DisksAPIDeleteDiskRequest) XDaytonaOrganizationID(xDaytonaOrganizationID string) DisksAPIDeleteDiskRequest {
	r.xDaytonaOrganizationID = &xDaytonaOrganizationID
	return r
}

func (r DisksAPIDeleteDiskRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteDiskExecute(r)
}

/*
DeleteDisk Delete disk

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param diskId ID of the disk
	@return DisksAPIDeleteDiskRequest
*/
func (a *DisksAPIService) DeleteDisk(ctx context.Context, diskId string) DisksAPIDeleteDiskRequest {
	return DisksAPIDeleteDiskRequest{
		ApiService: a,
		ctx:        ctx,
		diskId:     diskId,
	}
}

// Execute executes the request
func (a *DisksAPIService) DeleteDiskExecute(r DisksAPIDeleteDiskRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisksAPIService.DeleteDisk")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disks/{diskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"diskId"+"}", url.PathEscape(parameterValueToString(r.diskId, "diskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDaytonaOrganizationID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Daytona-Organization-ID", r.xDaytonaOrganizationID, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DisksAPIGetDiskRequest struct {
	ctx                    context.Context
	ApiService             DisksAPI
	diskId                 string
	xDaytonaOrganizationID *string
}

// Use with JWT to specify the organization ID
func (r DisksAPIGetDiskRequest) XDaytonaOrganizationID(xDaytonaOrganizationID string) DisksAPIGetDiskRequest {
	r.xDaytonaOrganizationID = &xDaytonaOrganizationID
	return r
}

func (r DisksAPIGetDiskRequest) Execute() (*DiskDto, *http.Response, error) {
	return r.ApiService.GetDiskExecute(r)
}

/*
GetDisk Get disk details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param diskId ID of the disk
	@return DisksAPIGetDiskRequest
*/
func (a *DisksAPIService) GetDisk(ctx context.Context, diskId string) DisksAPIGetDiskRequest {
	return DisksAPIGetDiskRequest{
		ApiService: a,
		ctx:        ctx,
		diskId:     diskId,
	}
}

// Execute executes the request
//
//	@return DiskDto
func (a *DisksAPIService) GetDiskExecute(r DisksAPIGetDiskRequest) (*DiskDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiskDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisksAPIService.GetDisk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disks/{diskId}"
	localVarPath = strings.Replace(localVarPath, "{"+"diskId"+"}", url.PathEscape(parameterValueToString(r.diskId, "diskId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDaytonaOrganizationID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Daytona-Organization-ID", r.xDaytonaOrganizationID, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DisksAPIListDisksRequest struct {
	ctx                    context.Context
	ApiService             DisksAPI
	xDaytonaOrganizationID *string
}

// Use with JWT to specify the organization ID
func (r DisksAPIListDisksRequest) XDaytonaOrganizationID(xDaytonaOrganizationID string) DisksAPIListDisksRequest {
	r.xDaytonaOrganizationID = &xDaytonaOrganizationID
	return r
}

func (r DisksAPIListDisksRequest) Execute() ([]DiskDto, *http.Response, error) {
	return r.ApiService.ListDisksExecute(r)
}

/*
ListDisks List all disks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return DisksAPIListDisksRequest
*/
func (a *DisksAPIService) ListDisks(ctx context.Context) DisksAPIListDisksRequest {
	return DisksAPIListDisksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DiskDto
func (a *DisksAPIService) ListDisksExecute(r DisksAPIListDisksRequest) ([]DiskDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DiskDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DisksAPIService.ListDisks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/disks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDaytonaOrganizationID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Daytona-Organization-ID", r.xDaytonaOrganizationID, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
