/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ObjectStorageAPI interface {

	/*
		GetPushAccess Get temporary storage access for pushing objects

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ObjectStorageAPIGetPushAccessRequest
	*/
	GetPushAccess(ctx context.Context) ObjectStorageAPIGetPushAccessRequest

	// GetPushAccessExecute executes the request
	//  @return StorageAccessDto
	GetPushAccessExecute(r ObjectStorageAPIGetPushAccessRequest) (*StorageAccessDto, *http.Response, error)
}

// ObjectStorageAPIService ObjectStorageAPI service
type ObjectStorageAPIService service

type ObjectStorageAPIGetPushAccessRequest struct {
	ctx                    context.Context
	ApiService             ObjectStorageAPI
	xDaytonaOrganizationID *string
}

// Use with JWT to specify the organization ID
func (r ObjectStorageAPIGetPushAccessRequest) XDaytonaOrganizationID(xDaytonaOrganizationID string) ObjectStorageAPIGetPushAccessRequest {
	r.xDaytonaOrganizationID = &xDaytonaOrganizationID
	return r
}

func (r ObjectStorageAPIGetPushAccessRequest) Execute() (*StorageAccessDto, *http.Response, error) {
	return r.ApiService.GetPushAccessExecute(r)
}

/*
GetPushAccess Get temporary storage access for pushing objects

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ObjectStorageAPIGetPushAccessRequest
*/
func (a *ObjectStorageAPIService) GetPushAccess(ctx context.Context) ObjectStorageAPIGetPushAccessRequest {
	return ObjectStorageAPIGetPushAccessRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return StorageAccessDto
func (a *ObjectStorageAPIService) GetPushAccessExecute(r ObjectStorageAPIGetPushAccessRequest) (*StorageAccessDto, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StorageAccessDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ObjectStorageAPIService.GetPushAccess")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/object-storage/push-access"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xDaytonaOrganizationID != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "X-Daytona-Organization-ID", r.xDaytonaOrganizationID, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
