/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AdminCreateDockerRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminCreateDockerRegistry{}

// AdminCreateDockerRegistry struct for AdminCreateDockerRegistry
type AdminCreateDockerRegistry struct {
	// Registry name
	Name string `json:"name"`
	// Registry URL
	Url string `json:"url"`
	// Registry username
	Username string `json:"username"`
	// Registry password
	Password string `json:"password"`
	// Registry project
	Project *string `json:"project,omitempty"`
	// Registry type
	RegistryType string `json:"registryType"`
	// Whether the registry is active is available for use
	IsActive *bool `json:"isActive,omitempty"`
	// Whether the registry can be used as a fallback registry
	IsFallback           *bool `json:"isFallback,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdminCreateDockerRegistry AdminCreateDockerRegistry

// NewAdminCreateDockerRegistry instantiates a new AdminCreateDockerRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminCreateDockerRegistry(name string, url string, username string, password string, registryType string) *AdminCreateDockerRegistry {
	this := AdminCreateDockerRegistry{}
	this.Name = name
	this.Url = url
	this.Username = username
	this.Password = password
	this.RegistryType = registryType
	return &this
}

// NewAdminCreateDockerRegistryWithDefaults instantiates a new AdminCreateDockerRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminCreateDockerRegistryWithDefaults() *AdminCreateDockerRegistry {
	this := AdminCreateDockerRegistry{}
	var registryType string = "source"
	this.RegistryType = registryType
	return &this
}

// GetName returns the Name field value
func (o *AdminCreateDockerRegistry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AdminCreateDockerRegistry) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *AdminCreateDockerRegistry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AdminCreateDockerRegistry) SetUrl(v string) {
	o.Url = v
}

// GetUsername returns the Username field value
func (o *AdminCreateDockerRegistry) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AdminCreateDockerRegistry) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *AdminCreateDockerRegistry) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AdminCreateDockerRegistry) SetPassword(v string) {
	o.Password = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *AdminCreateDockerRegistry) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *AdminCreateDockerRegistry) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *AdminCreateDockerRegistry) SetProject(v string) {
	o.Project = &v
}

// GetRegistryType returns the RegistryType field value
func (o *AdminCreateDockerRegistry) GetRegistryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryType
}

// GetRegistryTypeOk returns a tuple with the RegistryType field value
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetRegistryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryType, true
}

// SetRegistryType sets field value
func (o *AdminCreateDockerRegistry) SetRegistryType(v string) {
	o.RegistryType = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AdminCreateDockerRegistry) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AdminCreateDockerRegistry) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AdminCreateDockerRegistry) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsFallback returns the IsFallback field value if set, zero value otherwise.
func (o *AdminCreateDockerRegistry) GetIsFallback() bool {
	if o == nil || IsNil(o.IsFallback) {
		var ret bool
		return ret
	}
	return *o.IsFallback
}

// GetIsFallbackOk returns a tuple with the IsFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminCreateDockerRegistry) GetIsFallbackOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFallback) {
		return nil, false
	}
	return o.IsFallback, true
}

// HasIsFallback returns a boolean if a field has been set.
func (o *AdminCreateDockerRegistry) HasIsFallback() bool {
	if o != nil && !IsNil(o.IsFallback) {
		return true
	}

	return false
}

// SetIsFallback gets a reference to the given bool and assigns it to the IsFallback field.
func (o *AdminCreateDockerRegistry) SetIsFallback(v bool) {
	o.IsFallback = &v
}

func (o AdminCreateDockerRegistry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminCreateDockerRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	toSerialize["registryType"] = o.RegistryType
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IsFallback) {
		toSerialize["isFallback"] = o.IsFallback
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdminCreateDockerRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"username",
		"password",
		"registryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminCreateDockerRegistry := _AdminCreateDockerRegistry{}

	err = json.Unmarshal(data, &varAdminCreateDockerRegistry)

	if err != nil {
		return err
	}

	*o = AdminCreateDockerRegistry(varAdminCreateDockerRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "project")
		delete(additionalProperties, "registryType")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "isFallback")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdminCreateDockerRegistry struct {
	value *AdminCreateDockerRegistry
	isSet bool
}

func (v NullableAdminCreateDockerRegistry) Get() *AdminCreateDockerRegistry {
	return v.value
}

func (v *NullableAdminCreateDockerRegistry) Set(val *AdminCreateDockerRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminCreateDockerRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminCreateDockerRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminCreateDockerRegistry(val *AdminCreateDockerRegistry) *NullableAdminCreateDockerRegistry {
	return &NullableAdminCreateDockerRegistry{value: val, isSet: true}
}

func (v NullableAdminCreateDockerRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminCreateDockerRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
