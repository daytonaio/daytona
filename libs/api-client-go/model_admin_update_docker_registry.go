/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AdminUpdateDockerRegistry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminUpdateDockerRegistry{}

// AdminUpdateDockerRegistry struct for AdminUpdateDockerRegistry
type AdminUpdateDockerRegistry struct {
	// Registry name
	Name string `json:"name"`
	// Registry URL
	Url string `json:"url"`
	// Registry username
	Username string `json:"username"`
	// Registry password
	Password *string `json:"password,omitempty"`
	// Registry project
	Project *string `json:"project,omitempty"`
	// Whether the registry is active and available for use
	IsActive *bool `json:"isActive,omitempty"`
	// Whether the registry can be used as a fallback registry
	IsFallback           *bool `json:"isFallback,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AdminUpdateDockerRegistry AdminUpdateDockerRegistry

// NewAdminUpdateDockerRegistry instantiates a new AdminUpdateDockerRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminUpdateDockerRegistry(name string, url string, username string) *AdminUpdateDockerRegistry {
	this := AdminUpdateDockerRegistry{}
	this.Name = name
	this.Url = url
	this.Username = username
	return &this
}

// NewAdminUpdateDockerRegistryWithDefaults instantiates a new AdminUpdateDockerRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminUpdateDockerRegistryWithDefaults() *AdminUpdateDockerRegistry {
	this := AdminUpdateDockerRegistry{}
	return &this
}

// GetName returns the Name field value
func (o *AdminUpdateDockerRegistry) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AdminUpdateDockerRegistry) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *AdminUpdateDockerRegistry) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AdminUpdateDockerRegistry) SetUrl(v string) {
	o.Url = v
}

// GetUsername returns the Username field value
func (o *AdminUpdateDockerRegistry) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AdminUpdateDockerRegistry) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *AdminUpdateDockerRegistry) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *AdminUpdateDockerRegistry) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *AdminUpdateDockerRegistry) SetPassword(v string) {
	o.Password = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *AdminUpdateDockerRegistry) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *AdminUpdateDockerRegistry) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *AdminUpdateDockerRegistry) SetProject(v string) {
	o.Project = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AdminUpdateDockerRegistry) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AdminUpdateDockerRegistry) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AdminUpdateDockerRegistry) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsFallback returns the IsFallback field value if set, zero value otherwise.
func (o *AdminUpdateDockerRegistry) GetIsFallback() bool {
	if o == nil || IsNil(o.IsFallback) {
		var ret bool
		return ret
	}
	return *o.IsFallback
}

// GetIsFallbackOk returns a tuple with the IsFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminUpdateDockerRegistry) GetIsFallbackOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFallback) {
		return nil, false
	}
	return o.IsFallback, true
}

// HasIsFallback returns a boolean if a field has been set.
func (o *AdminUpdateDockerRegistry) HasIsFallback() bool {
	if o != nil && !IsNil(o.IsFallback) {
		return true
	}

	return false
}

// SetIsFallback gets a reference to the given bool and assigns it to the IsFallback field.
func (o *AdminUpdateDockerRegistry) SetIsFallback(v bool) {
	o.IsFallback = &v
}

func (o AdminUpdateDockerRegistry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminUpdateDockerRegistry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["url"] = o.Url
	toSerialize["username"] = o.Username
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.IsActive) {
		toSerialize["isActive"] = o.IsActive
	}
	if !IsNil(o.IsFallback) {
		toSerialize["isFallback"] = o.IsFallback
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AdminUpdateDockerRegistry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"url",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminUpdateDockerRegistry := _AdminUpdateDockerRegistry{}

	err = json.Unmarshal(data, &varAdminUpdateDockerRegistry)

	if err != nil {
		return err
	}

	*o = AdminUpdateDockerRegistry(varAdminUpdateDockerRegistry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "project")
		delete(additionalProperties, "isActive")
		delete(additionalProperties, "isFallback")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAdminUpdateDockerRegistry struct {
	value *AdminUpdateDockerRegistry
	isSet bool
}

func (v NullableAdminUpdateDockerRegistry) Get() *AdminUpdateDockerRegistry {
	return v.value
}

func (v *NullableAdminUpdateDockerRegistry) Set(val *AdminUpdateDockerRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminUpdateDockerRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminUpdateDockerRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminUpdateDockerRegistry(val *AdminUpdateDockerRegistry) *NullableAdminUpdateDockerRegistry {
	return &NullableAdminUpdateDockerRegistry{value: val, isSet: true}
}

func (v NullableAdminUpdateDockerRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminUpdateDockerRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
