/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Announcement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Announcement{}

// Announcement struct for Announcement
type Announcement struct {
	// The announcement text
	Text string `json:"text"`
	// URL to learn more about the announcement
	LearnMoreUrl *string `json:"learnMoreUrl,omitempty"`
}

type _Announcement Announcement

// NewAnnouncement instantiates a new Announcement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncement(text string) *Announcement {
	this := Announcement{}
	this.Text = text
	return &this
}

// NewAnnouncementWithDefaults instantiates a new Announcement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementWithDefaults() *Announcement {
	this := Announcement{}
	return &this
}

// GetText returns the Text field value
func (o *Announcement) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *Announcement) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *Announcement) SetText(v string) {
	o.Text = v
}

// GetLearnMoreUrl returns the LearnMoreUrl field value if set, zero value otherwise.
func (o *Announcement) GetLearnMoreUrl() string {
	if o == nil || IsNil(o.LearnMoreUrl) {
		var ret string
		return ret
	}
	return *o.LearnMoreUrl
}

// GetLearnMoreUrlOk returns a tuple with the LearnMoreUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcement) GetLearnMoreUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LearnMoreUrl) {
		return nil, false
	}
	return o.LearnMoreUrl, true
}

// HasLearnMoreUrl returns a boolean if a field has been set.
func (o *Announcement) HasLearnMoreUrl() bool {
	if o != nil && !IsNil(o.LearnMoreUrl) {
		return true
	}

	return false
}

// SetLearnMoreUrl gets a reference to the given string and assigns it to the LearnMoreUrl field.
func (o *Announcement) SetLearnMoreUrl(v string) {
	o.LearnMoreUrl = &v
}

func (o Announcement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Announcement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.LearnMoreUrl) {
		toSerialize["learnMoreUrl"] = o.LearnMoreUrl
	}
	return toSerialize, nil
}

func (o *Announcement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnnouncement := _Announcement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnnouncement)

	if err != nil {
		return err
	}

	*o = Announcement(varAnnouncement)

	return err
}

type NullableAnnouncement struct {
	value *Announcement
	isSet bool
}

func (v NullableAnnouncement) Get() *Announcement {
	return v.value
}

func (v *NullableAnnouncement) Set(val *Announcement) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncement) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncement(val *Announcement) *NullableAnnouncement {
	return &NullableAnnouncement{value: val, isSet: true}
}

func (v NullableAnnouncement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
