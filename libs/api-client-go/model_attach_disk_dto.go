/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the AttachDiskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AttachDiskDto{}

// AttachDiskDto struct for AttachDiskDto
type AttachDiskDto struct {
	// Sandbox ID to attach the disk to
	SandboxId            string `json:"sandboxId"`
	AdditionalProperties map[string]interface{}
}

type _AttachDiskDto AttachDiskDto

// NewAttachDiskDto instantiates a new AttachDiskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachDiskDto(sandboxId string) *AttachDiskDto {
	this := AttachDiskDto{}
	this.SandboxId = sandboxId
	return &this
}

// NewAttachDiskDtoWithDefaults instantiates a new AttachDiskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachDiskDtoWithDefaults() *AttachDiskDto {
	this := AttachDiskDto{}
	return &this
}

// GetSandboxId returns the SandboxId field value
func (o *AttachDiskDto) GetSandboxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SandboxId
}

// GetSandboxIdOk returns a tuple with the SandboxId field value
// and a boolean to check if the value has been set.
func (o *AttachDiskDto) GetSandboxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SandboxId, true
}

// SetSandboxId sets field value
func (o *AttachDiskDto) SetSandboxId(v string) {
	o.SandboxId = v
}

func (o AttachDiskDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AttachDiskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sandboxId"] = o.SandboxId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AttachDiskDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sandboxId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAttachDiskDto := _AttachDiskDto{}

	err = json.Unmarshal(data, &varAttachDiskDto)

	if err != nil {
		return err
	}

	*o = AttachDiskDto(varAttachDiskDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "sandboxId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAttachDiskDto struct {
	value *AttachDiskDto
	isSet bool
}

func (v NullableAttachDiskDto) Get() *AttachDiskDto {
	return v.value
}

func (v *NullableAttachDiskDto) Set(val *AttachDiskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachDiskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachDiskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachDiskDto(val *AttachDiskDto) *NullableAttachDiskDto {
	return &NullableAttachDiskDto{value: val, isSet: true}
}

func (v NullableAttachDiskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachDiskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
