/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BuildSnapshot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildSnapshot{}

// BuildSnapshot struct for BuildSnapshot
type BuildSnapshot struct {
	// The name of the snapshot to build
	Name string `json:"name"`
	// Build information for the snapshot
	BuildInfo CreateBuildInfo `json:"buildInfo"`
}

type _BuildSnapshot BuildSnapshot

// NewBuildSnapshot instantiates a new BuildSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildSnapshot(name string, buildInfo CreateBuildInfo) *BuildSnapshot {
	this := BuildSnapshot{}
	this.Name = name
	this.BuildInfo = buildInfo
	return &this
}

// NewBuildSnapshotWithDefaults instantiates a new BuildSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildSnapshotWithDefaults() *BuildSnapshot {
	this := BuildSnapshot{}
	return &this
}

// GetName returns the Name field value
func (o *BuildSnapshot) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BuildSnapshot) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BuildSnapshot) SetName(v string) {
	o.Name = v
}

// GetBuildInfo returns the BuildInfo field value
func (o *BuildSnapshot) GetBuildInfo() CreateBuildInfo {
	if o == nil {
		var ret CreateBuildInfo
		return ret
	}

	return o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value
// and a boolean to check if the value has been set.
func (o *BuildSnapshot) GetBuildInfoOk() (*CreateBuildInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuildInfo, true
}

// SetBuildInfo sets field value
func (o *BuildSnapshot) SetBuildInfo(v CreateBuildInfo) {
	o.BuildInfo = v
}

func (o BuildSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildSnapshot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["buildInfo"] = o.BuildInfo
	return toSerialize, nil
}

func (o *BuildSnapshot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"buildInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildSnapshot := _BuildSnapshot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildSnapshot)

	if err != nil {
		return err
	}

	*o = BuildSnapshot(varBuildSnapshot)

	return err
}

type NullableBuildSnapshot struct {
	value *BuildSnapshot
	isSet bool
}

func (v NullableBuildSnapshot) Get() *BuildSnapshot {
	return v.value
}

func (v *NullableBuildSnapshot) Set(val *BuildSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildSnapshot(val *BuildSnapshot) *NullableBuildSnapshot {
	return &NullableBuildSnapshot{value: val, isSet: true}
}

func (v NullableBuildSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
