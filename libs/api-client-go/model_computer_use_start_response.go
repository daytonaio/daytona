/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ComputerUseStartResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComputerUseStartResponse{}

// ComputerUseStartResponse struct for ComputerUseStartResponse
type ComputerUseStartResponse struct {
	// A message indicating the result of starting computer use processes
	Message string `json:"message"`
	// Status information about all VNC desktop processes after starting
	Status map[string]interface{} `json:"status"`
}

type _ComputerUseStartResponse ComputerUseStartResponse

// NewComputerUseStartResponse instantiates a new ComputerUseStartResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputerUseStartResponse(message string, status map[string]interface{}) *ComputerUseStartResponse {
	this := ComputerUseStartResponse{}
	this.Message = message
	this.Status = status
	return &this
}

// NewComputerUseStartResponseWithDefaults instantiates a new ComputerUseStartResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputerUseStartResponseWithDefaults() *ComputerUseStartResponse {
	this := ComputerUseStartResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *ComputerUseStartResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ComputerUseStartResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ComputerUseStartResponse) SetMessage(v string) {
	o.Message = v
}

// GetStatus returns the Status field value
func (o *ComputerUseStartResponse) GetStatus() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ComputerUseStartResponse) GetStatusOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Status, true
}

// SetStatus sets field value
func (o *ComputerUseStartResponse) SetStatus(v map[string]interface{}) {
	o.Status = v
}

func (o ComputerUseStartResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComputerUseStartResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ComputerUseStartResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varComputerUseStartResponse := _ComputerUseStartResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varComputerUseStartResponse)

	if err != nil {
		return err
	}

	*o = ComputerUseStartResponse(varComputerUseStartResponse)

	return err
}

type NullableComputerUseStartResponse struct {
	value *ComputerUseStartResponse
	isSet bool
}

func (v NullableComputerUseStartResponse) Get() *ComputerUseStartResponse {
	return v.value
}

func (v *NullableComputerUseStartResponse) Set(val *ComputerUseStartResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableComputerUseStartResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableComputerUseStartResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputerUseStartResponse(val *ComputerUseStartResponse) *NullableComputerUseStartResponse {
	return &NullableComputerUseStartResponse{value: val, isSet: true}
}

func (v NullableComputerUseStartResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputerUseStartResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
