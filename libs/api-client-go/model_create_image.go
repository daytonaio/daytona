/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateImage{}

// CreateImage struct for CreateImage
type CreateImage struct {
	// The name of the image
	Name string `json:"name"`
	// The entrypoint command for the image
	Entrypoint []string `json:"entrypoint,omitempty"`
	// Whether the image is general
	General *bool `json:"general,omitempty"`
}

type _CreateImage CreateImage

// NewCreateImage instantiates a new CreateImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateImage(name string) *CreateImage {
	this := CreateImage{}
	this.Name = name
	return &this
}

// NewCreateImageWithDefaults instantiates a new CreateImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateImageWithDefaults() *CreateImage {
	this := CreateImage{}
	return &this
}

// GetName returns the Name field value
func (o *CreateImage) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateImage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateImage) SetName(v string) {
	o.Name = v
}

// GetEntrypoint returns the Entrypoint field value if set, zero value otherwise.
func (o *CreateImage) GetEntrypoint() []string {
	if o == nil || IsNil(o.Entrypoint) {
		var ret []string
		return ret
	}
	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateImage) GetEntrypointOk() ([]string, bool) {
	if o == nil || IsNil(o.Entrypoint) {
		return nil, false
	}
	return o.Entrypoint, true
}

// HasEntrypoint returns a boolean if a field has been set.
func (o *CreateImage) HasEntrypoint() bool {
	if o != nil && !IsNil(o.Entrypoint) {
		return true
	}

	return false
}

// SetEntrypoint gets a reference to the given []string and assigns it to the Entrypoint field.
func (o *CreateImage) SetEntrypoint(v []string) {
	o.Entrypoint = v
}

// GetGeneral returns the General field value if set, zero value otherwise.
func (o *CreateImage) GetGeneral() bool {
	if o == nil || IsNil(o.General) {
		var ret bool
		return ret
	}
	return *o.General
}

// GetGeneralOk returns a tuple with the General field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateImage) GetGeneralOk() (*bool, bool) {
	if o == nil || IsNil(o.General) {
		return nil, false
	}
	return o.General, true
}

// HasGeneral returns a boolean if a field has been set.
func (o *CreateImage) HasGeneral() bool {
	if o != nil && !IsNil(o.General) {
		return true
	}

	return false
}

// SetGeneral gets a reference to the given bool and assigns it to the General field.
func (o *CreateImage) SetGeneral(v bool) {
	o.General = &v
}

func (o CreateImage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Entrypoint) {
		toSerialize["entrypoint"] = o.Entrypoint
	}
	if !IsNil(o.General) {
		toSerialize["general"] = o.General
	}
	return toSerialize, nil
}

func (o *CreateImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateImage := _CreateImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateImage)

	if err != nil {
		return err
	}

	*o = CreateImage(varCreateImage)

	return err
}

type NullableCreateImage struct {
	value *CreateImage
	isSet bool
}

func (v NullableCreateImage) Get() *CreateImage {
	return v.value
}

func (v *NullableCreateImage) Set(val *CreateImage) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateImage) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateImage(val *CreateImage) *NullableCreateImage {
	return &NullableCreateImage{value: val, isSet: true}
}

func (v NullableCreateImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
