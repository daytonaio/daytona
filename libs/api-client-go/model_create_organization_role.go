/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateOrganizationRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrganizationRole{}

// CreateOrganizationRole struct for CreateOrganizationRole
type CreateOrganizationRole struct {
	// The name of the role
	Name string `json:"name"`
	// The description of the role
	Description string `json:"description"`
	// The list of permissions assigned to the role
	Permissions []string `json:"permissions"`
}

type _CreateOrganizationRole CreateOrganizationRole

// NewCreateOrganizationRole instantiates a new CreateOrganizationRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrganizationRole(name string, description string, permissions []string) *CreateOrganizationRole {
	this := CreateOrganizationRole{}
	this.Name = name
	this.Description = description
	this.Permissions = permissions
	return &this
}

// NewCreateOrganizationRoleWithDefaults instantiates a new CreateOrganizationRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrganizationRoleWithDefaults() *CreateOrganizationRole {
	this := CreateOrganizationRole{}
	return &this
}

// GetName returns the Name field value
func (o *CreateOrganizationRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateOrganizationRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateOrganizationRole) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *CreateOrganizationRole) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CreateOrganizationRole) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CreateOrganizationRole) SetDescription(v string) {
	o.Description = v
}

// GetPermissions returns the Permissions field value
func (o *CreateOrganizationRole) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *CreateOrganizationRole) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *CreateOrganizationRole) SetPermissions(v []string) {
	o.Permissions = v
}

func (o CreateOrganizationRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrganizationRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

func (o *CreateOrganizationRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateOrganizationRole := _CreateOrganizationRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateOrganizationRole)

	if err != nil {
		return err
	}

	*o = CreateOrganizationRole(varCreateOrganizationRole)

	return err
}

type NullableCreateOrganizationRole struct {
	value *CreateOrganizationRole
	isSet bool
}

func (v NullableCreateOrganizationRole) Get() *CreateOrganizationRole {
	return v.value
}

func (v *NullableCreateOrganizationRole) Set(val *CreateOrganizationRole) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrganizationRole) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrganizationRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrganizationRole(val *CreateOrganizationRole) *NullableCreateOrganizationRole {
	return &NullableCreateOrganizationRole{value: val, isSet: true}
}

func (v NullableCreateOrganizationRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrganizationRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
