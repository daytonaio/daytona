/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateRunner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRunner{}

// CreateRunner struct for CreateRunner
type CreateRunner struct {
	Domain               string  `json:"domain"`
	ApiUrl               string  `json:"apiUrl"`
	ProxyUrl             string  `json:"proxyUrl"`
	ApiKey               string  `json:"apiKey"`
	Cpu                  float32 `json:"cpu"`
	MemoryGiB            float32 `json:"memoryGiB"`
	DiskGiB              float32 `json:"diskGiB"`
	RegionId             string  `json:"regionId"`
	AdditionalProperties map[string]interface{}
}

type _CreateRunner CreateRunner

// NewCreateRunner instantiates a new CreateRunner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRunner(domain string, apiUrl string, proxyUrl string, apiKey string, cpu float32, memoryGiB float32, diskGiB float32, regionId string) *CreateRunner {
	this := CreateRunner{}
	this.Domain = domain
	this.ApiUrl = apiUrl
	this.ProxyUrl = proxyUrl
	this.ApiKey = apiKey
	this.Cpu = cpu
	this.MemoryGiB = memoryGiB
	this.DiskGiB = diskGiB
	this.RegionId = regionId
	return &this
}

// NewCreateRunnerWithDefaults instantiates a new CreateRunner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRunnerWithDefaults() *CreateRunner {
	this := CreateRunner{}
	return &this
}

// GetDomain returns the Domain field value
func (o *CreateRunner) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CreateRunner) SetDomain(v string) {
	o.Domain = v
}

// GetApiUrl returns the ApiUrl field value
func (o *CreateRunner) GetApiUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetApiUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiUrl, true
}

// SetApiUrl sets field value
func (o *CreateRunner) SetApiUrl(v string) {
	o.ApiUrl = v
}

// GetProxyUrl returns the ProxyUrl field value
func (o *CreateRunner) GetProxyUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProxyUrl
}

// GetProxyUrlOk returns a tuple with the ProxyUrl field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetProxyUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProxyUrl, true
}

// SetProxyUrl sets field value
func (o *CreateRunner) SetProxyUrl(v string) {
	o.ProxyUrl = v
}

// GetApiKey returns the ApiKey field value
func (o *CreateRunner) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *CreateRunner) SetApiKey(v string) {
	o.ApiKey = v
}

// GetCpu returns the Cpu field value
func (o *CreateRunner) GetCpu() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetCpuOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cpu, true
}

// SetCpu sets field value
func (o *CreateRunner) SetCpu(v float32) {
	o.Cpu = v
}

// GetMemoryGiB returns the MemoryGiB field value
func (o *CreateRunner) GetMemoryGiB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MemoryGiB
}

// GetMemoryGiBOk returns a tuple with the MemoryGiB field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetMemoryGiBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MemoryGiB, true
}

// SetMemoryGiB sets field value
func (o *CreateRunner) SetMemoryGiB(v float32) {
	o.MemoryGiB = v
}

// GetDiskGiB returns the DiskGiB field value
func (o *CreateRunner) GetDiskGiB() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.DiskGiB
}

// GetDiskGiBOk returns a tuple with the DiskGiB field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetDiskGiBOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskGiB, true
}

// SetDiskGiB sets field value
func (o *CreateRunner) SetDiskGiB(v float32) {
	o.DiskGiB = v
}

// GetRegionId returns the RegionId field value
func (o *CreateRunner) GetRegionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegionId
}

// GetRegionIdOk returns a tuple with the RegionId field value
// and a boolean to check if the value has been set.
func (o *CreateRunner) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegionId, true
}

// SetRegionId sets field value
func (o *CreateRunner) SetRegionId(v string) {
	o.RegionId = v
}

func (o CreateRunner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRunner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain
	toSerialize["apiUrl"] = o.ApiUrl
	toSerialize["proxyUrl"] = o.ProxyUrl
	toSerialize["apiKey"] = o.ApiKey
	toSerialize["cpu"] = o.Cpu
	toSerialize["memoryGiB"] = o.MemoryGiB
	toSerialize["diskGiB"] = o.DiskGiB
	toSerialize["regionId"] = o.RegionId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateRunner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"apiUrl",
		"proxyUrl",
		"apiKey",
		"cpu",
		"memoryGiB",
		"diskGiB",
		"regionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRunner := _CreateRunner{}

	err = json.Unmarshal(data, &varCreateRunner)

	if err != nil {
		return err
	}

	*o = CreateRunner(varCreateRunner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain")
		delete(additionalProperties, "apiUrl")
		delete(additionalProperties, "proxyUrl")
		delete(additionalProperties, "apiKey")
		delete(additionalProperties, "cpu")
		delete(additionalProperties, "memoryGiB")
		delete(additionalProperties, "diskGiB")
		delete(additionalProperties, "regionId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateRunner struct {
	value *CreateRunner
	isSet bool
}

func (v NullableCreateRunner) Get() *CreateRunner {
	return v.value
}

func (v *NullableCreateRunner) Set(val *CreateRunner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRunner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRunner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRunner(val *CreateRunner) *NullableCreateRunner {
	return &NullableCreateRunner{value: val, isSet: true}
}

func (v NullableCreateRunner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRunner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
