/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the CreateSandbox type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateSandbox{}

// CreateSandbox struct for CreateSandbox
type CreateSandbox struct {
	// The ID or name of the snapshot used for the sandbox
	Snapshot *string `json:"snapshot,omitempty"`
	// The user associated with the project
	User *string `json:"user,omitempty"`
	// Environment variables for the sandbox
	Env *map[string]string `json:"env,omitempty"`
	// Labels for the sandbox
	Labels *map[string]string `json:"labels,omitempty"`
	// Whether the sandbox http preview is publicly accessible
	Public *bool `json:"public,omitempty"`
	// The sandbox class type
	Class *string `json:"class,omitempty"`
	// The target (region) where the sandbox will be created
	Target *string `json:"target,omitempty"`
	// CPU cores allocated to the sandbox
	Cpu *int32 `json:"cpu,omitempty"`
	// GPU units allocated to the sandbox
	Gpu *int32 `json:"gpu,omitempty"`
	// Memory allocated to the sandbox in GB
	Memory *int32 `json:"memory,omitempty"`
	// Disk space allocated to the sandbox in GB
	Disk *int32 `json:"disk,omitempty"`
	// Auto-stop interval in minutes (0 means disabled)
	AutoStopInterval *int32 `json:"autoStopInterval,omitempty"`
	// Auto-archive interval in minutes (0 means the maximum interval will be used)
	AutoArchiveInterval *int32 `json:"autoArchiveInterval,omitempty"`
	// Auto-delete interval in minutes (negative value means disabled, 0 means delete immediately upon stopping)
	AutoDeleteInterval *int32 `json:"autoDeleteInterval,omitempty"`
	// Array of volumes to attach to the sandbox
	Volumes []SandboxVolume `json:"volumes,omitempty"`
	// Build information for the sandbox
	BuildInfo *CreateBuildInfo `json:"buildInfo,omitempty"`
}

// NewCreateSandbox instantiates a new CreateSandbox object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateSandbox() *CreateSandbox {
	this := CreateSandbox{}
	return &this
}

// NewCreateSandboxWithDefaults instantiates a new CreateSandbox object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateSandboxWithDefaults() *CreateSandbox {
	this := CreateSandbox{}
	return &this
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *CreateSandbox) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *CreateSandbox) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *CreateSandbox) SetSnapshot(v string) {
	o.Snapshot = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CreateSandbox) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CreateSandbox) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CreateSandbox) SetUser(v string) {
	o.User = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *CreateSandbox) GetEnv() map[string]string {
	if o == nil || IsNil(o.Env) {
		var ret map[string]string
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetEnvOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Env) {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *CreateSandbox) HasEnv() bool {
	if o != nil && !IsNil(o.Env) {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]string and assigns it to the Env field.
func (o *CreateSandbox) SetEnv(v map[string]string) {
	o.Env = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CreateSandbox) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CreateSandbox) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CreateSandbox) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *CreateSandbox) GetPublic() bool {
	if o == nil || IsNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.Public) {
		return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *CreateSandbox) HasPublic() bool {
	if o != nil && !IsNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *CreateSandbox) SetPublic(v bool) {
	o.Public = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *CreateSandbox) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *CreateSandbox) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *CreateSandbox) SetClass(v string) {
	o.Class = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *CreateSandbox) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *CreateSandbox) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *CreateSandbox) SetTarget(v string) {
	o.Target = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *CreateSandbox) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *CreateSandbox) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *CreateSandbox) SetCpu(v int32) {
	o.Cpu = &v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *CreateSandbox) GetGpu() int32 {
	if o == nil || IsNil(o.Gpu) {
		var ret int32
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetGpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *CreateSandbox) HasGpu() bool {
	if o != nil && !IsNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given int32 and assigns it to the Gpu field.
func (o *CreateSandbox) SetGpu(v int32) {
	o.Gpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *CreateSandbox) GetMemory() int32 {
	if o == nil || IsNil(o.Memory) {
		var ret int32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetMemoryOk() (*int32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *CreateSandbox) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given int32 and assigns it to the Memory field.
func (o *CreateSandbox) SetMemory(v int32) {
	o.Memory = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *CreateSandbox) GetDisk() int32 {
	if o == nil || IsNil(o.Disk) {
		var ret int32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetDiskOk() (*int32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *CreateSandbox) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given int32 and assigns it to the Disk field.
func (o *CreateSandbox) SetDisk(v int32) {
	o.Disk = &v
}

// GetAutoStopInterval returns the AutoStopInterval field value if set, zero value otherwise.
func (o *CreateSandbox) GetAutoStopInterval() int32 {
	if o == nil || IsNil(o.AutoStopInterval) {
		var ret int32
		return ret
	}
	return *o.AutoStopInterval
}

// GetAutoStopIntervalOk returns a tuple with the AutoStopInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetAutoStopIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoStopInterval) {
		return nil, false
	}
	return o.AutoStopInterval, true
}

// HasAutoStopInterval returns a boolean if a field has been set.
func (o *CreateSandbox) HasAutoStopInterval() bool {
	if o != nil && !IsNil(o.AutoStopInterval) {
		return true
	}

	return false
}

// SetAutoStopInterval gets a reference to the given int32 and assigns it to the AutoStopInterval field.
func (o *CreateSandbox) SetAutoStopInterval(v int32) {
	o.AutoStopInterval = &v
}

// GetAutoArchiveInterval returns the AutoArchiveInterval field value if set, zero value otherwise.
func (o *CreateSandbox) GetAutoArchiveInterval() int32 {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		var ret int32
		return ret
	}
	return *o.AutoArchiveInterval
}

// GetAutoArchiveIntervalOk returns a tuple with the AutoArchiveInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetAutoArchiveIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		return nil, false
	}
	return o.AutoArchiveInterval, true
}

// HasAutoArchiveInterval returns a boolean if a field has been set.
func (o *CreateSandbox) HasAutoArchiveInterval() bool {
	if o != nil && !IsNil(o.AutoArchiveInterval) {
		return true
	}

	return false
}

// SetAutoArchiveInterval gets a reference to the given int32 and assigns it to the AutoArchiveInterval field.
func (o *CreateSandbox) SetAutoArchiveInterval(v int32) {
	o.AutoArchiveInterval = &v
}

// GetAutoDeleteInterval returns the AutoDeleteInterval field value if set, zero value otherwise.
func (o *CreateSandbox) GetAutoDeleteInterval() int32 {
	if o == nil || IsNil(o.AutoDeleteInterval) {
		var ret int32
		return ret
	}
	return *o.AutoDeleteInterval
}

// GetAutoDeleteIntervalOk returns a tuple with the AutoDeleteInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetAutoDeleteIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.AutoDeleteInterval) {
		return nil, false
	}
	return o.AutoDeleteInterval, true
}

// HasAutoDeleteInterval returns a boolean if a field has been set.
func (o *CreateSandbox) HasAutoDeleteInterval() bool {
	if o != nil && !IsNil(o.AutoDeleteInterval) {
		return true
	}

	return false
}

// SetAutoDeleteInterval gets a reference to the given int32 and assigns it to the AutoDeleteInterval field.
func (o *CreateSandbox) SetAutoDeleteInterval(v int32) {
	o.AutoDeleteInterval = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *CreateSandbox) GetVolumes() []SandboxVolume {
	if o == nil || IsNil(o.Volumes) {
		var ret []SandboxVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetVolumesOk() ([]SandboxVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *CreateSandbox) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []SandboxVolume and assigns it to the Volumes field.
func (o *CreateSandbox) SetVolumes(v []SandboxVolume) {
	o.Volumes = v
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *CreateSandbox) GetBuildInfo() CreateBuildInfo {
	if o == nil || IsNil(o.BuildInfo) {
		var ret CreateBuildInfo
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateSandbox) GetBuildInfoOk() (*CreateBuildInfo, bool) {
	if o == nil || IsNil(o.BuildInfo) {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *CreateSandbox) HasBuildInfo() bool {
	if o != nil && !IsNil(o.BuildInfo) {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given CreateBuildInfo and assigns it to the BuildInfo field.
func (o *CreateSandbox) SetBuildInfo(v CreateBuildInfo) {
	o.BuildInfo = &v
}

func (o CreateSandbox) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateSandbox) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Env) {
		toSerialize["env"] = o.Env
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.AutoStopInterval) {
		toSerialize["autoStopInterval"] = o.AutoStopInterval
	}
	if !IsNil(o.AutoArchiveInterval) {
		toSerialize["autoArchiveInterval"] = o.AutoArchiveInterval
	}
	if !IsNil(o.AutoDeleteInterval) {
		toSerialize["autoDeleteInterval"] = o.AutoDeleteInterval
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !IsNil(o.BuildInfo) {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	return toSerialize, nil
}

type NullableCreateSandbox struct {
	value *CreateSandbox
	isSet bool
}

func (v NullableCreateSandbox) Get() *CreateSandbox {
	return v.value
}

func (v *NullableCreateSandbox) Set(val *CreateSandbox) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateSandbox) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateSandbox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateSandbox(val *CreateSandbox) *NullableCreateSandbox {
	return &NullableCreateSandbox{value: val, isSet: true}
}

func (v NullableCreateSandbox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateSandbox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
