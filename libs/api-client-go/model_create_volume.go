/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVolume{}

// CreateVolume struct for CreateVolume
type CreateVolume struct {
	Name string `json:"name"`
}

type _CreateVolume CreateVolume

// NewCreateVolume instantiates a new CreateVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVolume(name string) *CreateVolume {
	this := CreateVolume{}
	this.Name = name
	return &this
}

// NewCreateVolumeWithDefaults instantiates a new CreateVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVolumeWithDefaults() *CreateVolume {
	this := CreateVolume{}
	return &this
}

// GetName returns the Name field value
func (o *CreateVolume) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateVolume) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateVolume) SetName(v string) {
	o.Name = v
}

func (o CreateVolume) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *CreateVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVolume := _CreateVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateVolume)

	if err != nil {
		return err
	}

	*o = CreateVolume(varCreateVolume)

	return err
}

type NullableCreateVolume struct {
	value *CreateVolume
	isSet bool
}

func (v NullableCreateVolume) Get() *CreateVolume {
	return v.value
}

func (v *NullableCreateVolume) Set(val *CreateVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVolume(val *CreateVolume) *NullableCreateVolume {
	return &NullableCreateVolume{value: val, isSet: true}
}

func (v NullableCreateVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
