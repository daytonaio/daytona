/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DaytonaConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaytonaConfiguration{}

// DaytonaConfiguration struct for DaytonaConfiguration
type DaytonaConfiguration struct {
	// PostHog configuration
	Posthog *PosthogConfig `json:"posthog,omitempty"`
	// OIDC configuration
	Oidc OidcConfig `json:"oidc"`
	// Whether linked accounts are enabled
	LinkedAccountsEnabled bool `json:"linkedAccountsEnabled"`
	// System announcements
	Announcements map[string]Announcement `json:"announcements"`
	// Pylon application ID
	PylonAppId *string `json:"pylonAppId,omitempty"`
	// Proxy template URL
	ProxyTemplateUrl string `json:"proxyTemplateUrl"`
	// Default snapshot for sandboxes
	DefaultSnapshot string `json:"defaultSnapshot"`
	// Dashboard URL
	DashboardUrl string `json:"dashboardUrl"`
	// Maximum auto-archive interval in minutes
	MaxAutoArchiveInterval float32 `json:"maxAutoArchiveInterval"`
	// Whether maintenance mode is enabled
	MaintananceMode bool `json:"maintananceMode"`
	// Current environment
	Environment string `json:"environment"`
	// Billing API URL
	BillingApiUrl *string `json:"billingApiUrl,omitempty"`
}

type _DaytonaConfiguration DaytonaConfiguration

// NewDaytonaConfiguration instantiates a new DaytonaConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaytonaConfiguration(oidc OidcConfig, linkedAccountsEnabled bool, announcements map[string]Announcement, proxyTemplateUrl string, defaultSnapshot string, dashboardUrl string, maxAutoArchiveInterval float32, maintananceMode bool, environment string) *DaytonaConfiguration {
	this := DaytonaConfiguration{}
	this.Oidc = oidc
	this.LinkedAccountsEnabled = linkedAccountsEnabled
	this.Announcements = announcements
	this.ProxyTemplateUrl = proxyTemplateUrl
	this.DefaultSnapshot = defaultSnapshot
	this.DashboardUrl = dashboardUrl
	this.MaxAutoArchiveInterval = maxAutoArchiveInterval
	this.MaintananceMode = maintananceMode
	this.Environment = environment
	return &this
}

// NewDaytonaConfigurationWithDefaults instantiates a new DaytonaConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaytonaConfigurationWithDefaults() *DaytonaConfiguration {
	this := DaytonaConfiguration{}
	return &this
}

// GetPosthog returns the Posthog field value if set, zero value otherwise.
func (o *DaytonaConfiguration) GetPosthog() PosthogConfig {
	if o == nil || IsNil(o.Posthog) {
		var ret PosthogConfig
		return ret
	}
	return *o.Posthog
}

// GetPosthogOk returns a tuple with the Posthog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetPosthogOk() (*PosthogConfig, bool) {
	if o == nil || IsNil(o.Posthog) {
		return nil, false
	}
	return o.Posthog, true
}

// HasPosthog returns a boolean if a field has been set.
func (o *DaytonaConfiguration) HasPosthog() bool {
	if o != nil && !IsNil(o.Posthog) {
		return true
	}

	return false
}

// SetPosthog gets a reference to the given PosthogConfig and assigns it to the Posthog field.
func (o *DaytonaConfiguration) SetPosthog(v PosthogConfig) {
	o.Posthog = &v
}

// GetOidc returns the Oidc field value
func (o *DaytonaConfiguration) GetOidc() OidcConfig {
	if o == nil {
		var ret OidcConfig
		return ret
	}

	return o.Oidc
}

// GetOidcOk returns a tuple with the Oidc field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetOidcOk() (*OidcConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Oidc, true
}

// SetOidc sets field value
func (o *DaytonaConfiguration) SetOidc(v OidcConfig) {
	o.Oidc = v
}

// GetLinkedAccountsEnabled returns the LinkedAccountsEnabled field value
func (o *DaytonaConfiguration) GetLinkedAccountsEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.LinkedAccountsEnabled
}

// GetLinkedAccountsEnabledOk returns a tuple with the LinkedAccountsEnabled field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetLinkedAccountsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkedAccountsEnabled, true
}

// SetLinkedAccountsEnabled sets field value
func (o *DaytonaConfiguration) SetLinkedAccountsEnabled(v bool) {
	o.LinkedAccountsEnabled = v
}

// GetAnnouncements returns the Announcements field value
func (o *DaytonaConfiguration) GetAnnouncements() map[string]Announcement {
	if o == nil {
		var ret map[string]Announcement
		return ret
	}

	return o.Announcements
}

// GetAnnouncementsOk returns a tuple with the Announcements field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetAnnouncementsOk() (*map[string]Announcement, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Announcements, true
}

// SetAnnouncements sets field value
func (o *DaytonaConfiguration) SetAnnouncements(v map[string]Announcement) {
	o.Announcements = v
}

// GetPylonAppId returns the PylonAppId field value if set, zero value otherwise.
func (o *DaytonaConfiguration) GetPylonAppId() string {
	if o == nil || IsNil(o.PylonAppId) {
		var ret string
		return ret
	}
	return *o.PylonAppId
}

// GetPylonAppIdOk returns a tuple with the PylonAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetPylonAppIdOk() (*string, bool) {
	if o == nil || IsNil(o.PylonAppId) {
		return nil, false
	}
	return o.PylonAppId, true
}

// HasPylonAppId returns a boolean if a field has been set.
func (o *DaytonaConfiguration) HasPylonAppId() bool {
	if o != nil && !IsNil(o.PylonAppId) {
		return true
	}

	return false
}

// SetPylonAppId gets a reference to the given string and assigns it to the PylonAppId field.
func (o *DaytonaConfiguration) SetPylonAppId(v string) {
	o.PylonAppId = &v
}

// GetProxyTemplateUrl returns the ProxyTemplateUrl field value
func (o *DaytonaConfiguration) GetProxyTemplateUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProxyTemplateUrl
}

// GetProxyTemplateUrlOk returns a tuple with the ProxyTemplateUrl field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetProxyTemplateUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProxyTemplateUrl, true
}

// SetProxyTemplateUrl sets field value
func (o *DaytonaConfiguration) SetProxyTemplateUrl(v string) {
	o.ProxyTemplateUrl = v
}

// GetDefaultSnapshot returns the DefaultSnapshot field value
func (o *DaytonaConfiguration) GetDefaultSnapshot() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultSnapshot
}

// GetDefaultSnapshotOk returns a tuple with the DefaultSnapshot field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetDefaultSnapshotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultSnapshot, true
}

// SetDefaultSnapshot sets field value
func (o *DaytonaConfiguration) SetDefaultSnapshot(v string) {
	o.DefaultSnapshot = v
}

// GetDashboardUrl returns the DashboardUrl field value
func (o *DaytonaConfiguration) GetDashboardUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DashboardUrl
}

// GetDashboardUrlOk returns a tuple with the DashboardUrl field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetDashboardUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DashboardUrl, true
}

// SetDashboardUrl sets field value
func (o *DaytonaConfiguration) SetDashboardUrl(v string) {
	o.DashboardUrl = v
}

// GetMaxAutoArchiveInterval returns the MaxAutoArchiveInterval field value
func (o *DaytonaConfiguration) GetMaxAutoArchiveInterval() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxAutoArchiveInterval
}

// GetMaxAutoArchiveIntervalOk returns a tuple with the MaxAutoArchiveInterval field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetMaxAutoArchiveIntervalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAutoArchiveInterval, true
}

// SetMaxAutoArchiveInterval sets field value
func (o *DaytonaConfiguration) SetMaxAutoArchiveInterval(v float32) {
	o.MaxAutoArchiveInterval = v
}

// GetMaintananceMode returns the MaintananceMode field value
func (o *DaytonaConfiguration) GetMaintananceMode() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MaintananceMode
}

// GetMaintananceModeOk returns a tuple with the MaintananceMode field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetMaintananceModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaintananceMode, true
}

// SetMaintananceMode sets field value
func (o *DaytonaConfiguration) SetMaintananceMode(v bool) {
	o.MaintananceMode = v
}

// GetEnvironment returns the Environment field value
func (o *DaytonaConfiguration) GetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Environment, true
}

// SetEnvironment sets field value
func (o *DaytonaConfiguration) SetEnvironment(v string) {
	o.Environment = v
}

// GetBillingApiUrl returns the BillingApiUrl field value if set, zero value otherwise.
func (o *DaytonaConfiguration) GetBillingApiUrl() string {
	if o == nil || IsNil(o.BillingApiUrl) {
		var ret string
		return ret
	}
	return *o.BillingApiUrl
}

// GetBillingApiUrlOk returns a tuple with the BillingApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaytonaConfiguration) GetBillingApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BillingApiUrl) {
		return nil, false
	}
	return o.BillingApiUrl, true
}

// HasBillingApiUrl returns a boolean if a field has been set.
func (o *DaytonaConfiguration) HasBillingApiUrl() bool {
	if o != nil && !IsNil(o.BillingApiUrl) {
		return true
	}

	return false
}

// SetBillingApiUrl gets a reference to the given string and assigns it to the BillingApiUrl field.
func (o *DaytonaConfiguration) SetBillingApiUrl(v string) {
	o.BillingApiUrl = &v
}

func (o DaytonaConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaytonaConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Posthog) {
		toSerialize["posthog"] = o.Posthog
	}
	toSerialize["oidc"] = o.Oidc
	toSerialize["linkedAccountsEnabled"] = o.LinkedAccountsEnabled
	toSerialize["announcements"] = o.Announcements
	if !IsNil(o.PylonAppId) {
		toSerialize["pylonAppId"] = o.PylonAppId
	}
	toSerialize["proxyTemplateUrl"] = o.ProxyTemplateUrl
	toSerialize["defaultSnapshot"] = o.DefaultSnapshot
	toSerialize["dashboardUrl"] = o.DashboardUrl
	toSerialize["maxAutoArchiveInterval"] = o.MaxAutoArchiveInterval
	toSerialize["maintananceMode"] = o.MaintananceMode
	toSerialize["environment"] = o.Environment
	if !IsNil(o.BillingApiUrl) {
		toSerialize["billingApiUrl"] = o.BillingApiUrl
	}
	return toSerialize, nil
}

func (o *DaytonaConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"oidc",
		"linkedAccountsEnabled",
		"announcements",
		"proxyTemplateUrl",
		"defaultSnapshot",
		"dashboardUrl",
		"maxAutoArchiveInterval",
		"maintananceMode",
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDaytonaConfiguration := _DaytonaConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDaytonaConfiguration)

	if err != nil {
		return err
	}

	*o = DaytonaConfiguration(varDaytonaConfiguration)

	return err
}

type NullableDaytonaConfiguration struct {
	value *DaytonaConfiguration
	isSet bool
}

func (v NullableDaytonaConfiguration) Get() *DaytonaConfiguration {
	return v.value
}

func (v *NullableDaytonaConfiguration) Set(val *DaytonaConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableDaytonaConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableDaytonaConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaytonaConfiguration(val *DaytonaConfiguration) *NullableDaytonaConfiguration {
	return &NullableDaytonaConfiguration{value: val, isSet: true}
}

func (v NullableDaytonaConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaytonaConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
