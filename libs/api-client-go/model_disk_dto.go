/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the DiskDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskDto{}

// DiskDto struct for DiskDto
type DiskDto struct {
	// Disk ID
	Id string `json:"id"`
	// Organization ID
	OrganizationId string `json:"organizationId"`
	// Disk name
	Name string `json:"name"`
	// Disk size in GB
	Size float32 `json:"size"`
	// Disk state
	State DiskState `json:"state"`
	// Runner ID
	RunnerId NullableString `json:"runnerId,omitempty"`
	// Sandbox ID
	SandboxId NullableString `json:"sandboxId,omitempty"`
	// Error reason
	ErrorReason NullableString `json:"errorReason,omitempty"`
	// Creation timestamp
	CreatedAt string `json:"createdAt"`
	// Last update timestamp
	UpdatedAt            string `json:"updatedAt"`
	AdditionalProperties map[string]interface{}
}

type _DiskDto DiskDto

// NewDiskDto instantiates a new DiskDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskDto(id string, organizationId string, name string, size float32, state DiskState, createdAt string, updatedAt string) *DiskDto {
	this := DiskDto{}
	this.Id = id
	this.OrganizationId = organizationId
	this.Name = name
	this.Size = size
	this.State = state
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewDiskDtoWithDefaults instantiates a new DiskDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskDtoWithDefaults() *DiskDto {
	this := DiskDto{}
	return &this
}

// GetId returns the Id field value
func (o *DiskDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DiskDto) SetId(v string) {
	o.Id = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *DiskDto) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *DiskDto) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetName returns the Name field value
func (o *DiskDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DiskDto) SetName(v string) {
	o.Name = v
}

// GetSize returns the Size field value
func (o *DiskDto) GetSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *DiskDto) SetSize(v float32) {
	o.Size = v
}

// GetState returns the State field value
func (o *DiskDto) GetState() DiskState {
	if o == nil {
		var ret DiskState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetStateOk() (*DiskState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *DiskDto) SetState(v DiskState) {
	o.State = v
}

// GetRunnerId returns the RunnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskDto) GetRunnerId() string {
	if o == nil || IsNil(o.RunnerId.Get()) {
		var ret string
		return ret
	}
	return *o.RunnerId.Get()
}

// GetRunnerIdOk returns a tuple with the RunnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskDto) GetRunnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunnerId.Get(), o.RunnerId.IsSet()
}

// HasRunnerId returns a boolean if a field has been set.
func (o *DiskDto) HasRunnerId() bool {
	if o != nil && o.RunnerId.IsSet() {
		return true
	}

	return false
}

// SetRunnerId gets a reference to the given NullableString and assigns it to the RunnerId field.
func (o *DiskDto) SetRunnerId(v string) {
	o.RunnerId.Set(&v)
}

// SetRunnerIdNil sets the value for RunnerId to be an explicit nil
func (o *DiskDto) SetRunnerIdNil() {
	o.RunnerId.Set(nil)
}

// UnsetRunnerId ensures that no value is present for RunnerId, not even an explicit nil
func (o *DiskDto) UnsetRunnerId() {
	o.RunnerId.Unset()
}

// GetSandboxId returns the SandboxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskDto) GetSandboxId() string {
	if o == nil || IsNil(o.SandboxId.Get()) {
		var ret string
		return ret
	}
	return *o.SandboxId.Get()
}

// GetSandboxIdOk returns a tuple with the SandboxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskDto) GetSandboxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SandboxId.Get(), o.SandboxId.IsSet()
}

// HasSandboxId returns a boolean if a field has been set.
func (o *DiskDto) HasSandboxId() bool {
	if o != nil && o.SandboxId.IsSet() {
		return true
	}

	return false
}

// SetSandboxId gets a reference to the given NullableString and assigns it to the SandboxId field.
func (o *DiskDto) SetSandboxId(v string) {
	o.SandboxId.Set(&v)
}

// SetSandboxIdNil sets the value for SandboxId to be an explicit nil
func (o *DiskDto) SetSandboxIdNil() {
	o.SandboxId.Set(nil)
}

// UnsetSandboxId ensures that no value is present for SandboxId, not even an explicit nil
func (o *DiskDto) UnsetSandboxId() {
	o.SandboxId.Unset()
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskDto) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorReason.Get()
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskDto) GetErrorReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorReason.Get(), o.ErrorReason.IsSet()
}

// HasErrorReason returns a boolean if a field has been set.
func (o *DiskDto) HasErrorReason() bool {
	if o != nil && o.ErrorReason.IsSet() {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given NullableString and assigns it to the ErrorReason field.
func (o *DiskDto) SetErrorReason(v string) {
	o.ErrorReason.Set(&v)
}

// SetErrorReasonNil sets the value for ErrorReason to be an explicit nil
func (o *DiskDto) SetErrorReasonNil() {
	o.ErrorReason.Set(nil)
}

// UnsetErrorReason ensures that no value is present for ErrorReason, not even an explicit nil
func (o *DiskDto) UnsetErrorReason() {
	o.ErrorReason.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *DiskDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DiskDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *DiskDto) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *DiskDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *DiskDto) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o DiskDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["name"] = o.Name
	toSerialize["size"] = o.Size
	toSerialize["state"] = o.State
	if o.RunnerId.IsSet() {
		toSerialize["runnerId"] = o.RunnerId.Get()
	}
	if o.SandboxId.IsSet() {
		toSerialize["sandboxId"] = o.SandboxId.Get()
	}
	if o.ErrorReason.IsSet() {
		toSerialize["errorReason"] = o.ErrorReason.Get()
	}
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DiskDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"organizationId",
		"name",
		"size",
		"state",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiskDto := _DiskDto{}

	err = json.Unmarshal(data, &varDiskDto)

	if err != nil {
		return err
	}

	*o = DiskDto(varDiskDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "organizationId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "size")
		delete(additionalProperties, "state")
		delete(additionalProperties, "runnerId")
		delete(additionalProperties, "sandboxId")
		delete(additionalProperties, "errorReason")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDiskDto struct {
	value *DiskDto
	isSet bool
}

func (v NullableDiskDto) Get() *DiskDto {
	return v.value
}

func (v *NullableDiskDto) Set(val *DiskDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskDto(val *DiskDto) *NullableDiskDto {
	return &NullableDiskDto{value: val, isSet: true}
}

func (v NullableDiskDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
