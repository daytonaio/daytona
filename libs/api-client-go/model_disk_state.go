/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// DiskState Disk state
type DiskState string

// List of DiskState
const (
	DISKSTATE_FRESH     DiskState = "fresh"
	DISKSTATE_PULLING   DiskState = "pulling"
	DISKSTATE_READY     DiskState = "ready"
	DISKSTATE_ATTACHED  DiskState = "attached"
	DISKSTATE_UPLOADING DiskState = "uploading"
	DISKSTATE_STORED    DiskState = "stored"
)

// All allowed values of DiskState enum
var AllowedDiskStateEnumValues = []DiskState{
	"fresh",
	"pulling",
	"ready",
	"attached",
	"uploading",
	"stored",
}

func (v *DiskState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiskState(value)
	for _, existing := range AllowedDiskStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiskState", value)
}

// NewDiskStateFromValue returns a pointer to a valid DiskState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiskStateFromValue(v string) (*DiskState, error) {
	ev := DiskState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiskState: valid values are %v", v, AllowedDiskStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiskState) IsValid() bool {
	for _, existing := range AllowedDiskStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiskState value
func (v DiskState) Ptr() *DiskState {
	return &v
}

type NullableDiskState struct {
	value *DiskState
	isSet bool
}

func (v NullableDiskState) Get() *DiskState {
	return v.value
}

func (v *NullableDiskState) Set(val *DiskState) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskState) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskState(val *DiskState) *NullableDiskState {
	return &NullableDiskState{value: val, isSet: true}
}

func (v NullableDiskState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
