/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the DisplayInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayInfoResponse{}

// DisplayInfoResponse struct for DisplayInfoResponse
type DisplayInfoResponse struct {
	// Array of display information for all connected displays
	Displays []map[string]interface{} `json:"displays"`
}

type _DisplayInfoResponse DisplayInfoResponse

// NewDisplayInfoResponse instantiates a new DisplayInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayInfoResponse(displays []map[string]interface{}) *DisplayInfoResponse {
	this := DisplayInfoResponse{}
	this.Displays = displays
	return &this
}

// NewDisplayInfoResponseWithDefaults instantiates a new DisplayInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayInfoResponseWithDefaults() *DisplayInfoResponse {
	this := DisplayInfoResponse{}
	return &this
}

// GetDisplays returns the Displays field value
func (o *DisplayInfoResponse) GetDisplays() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Displays
}

// GetDisplaysOk returns a tuple with the Displays field value
// and a boolean to check if the value has been set.
func (o *DisplayInfoResponse) GetDisplaysOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Displays, true
}

// SetDisplays sets field value
func (o *DisplayInfoResponse) SetDisplays(v []map[string]interface{}) {
	o.Displays = v
}

func (o DisplayInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["displays"] = o.Displays
	return toSerialize, nil
}

func (o *DisplayInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"displays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDisplayInfoResponse := _DisplayInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDisplayInfoResponse)

	if err != nil {
		return err
	}

	*o = DisplayInfoResponse(varDisplayInfoResponse)

	return err
}

type NullableDisplayInfoResponse struct {
	value *DisplayInfoResponse
	isSet bool
}

func (v NullableDisplayInfoResponse) Get() *DisplayInfoResponse {
	return v.value
}

func (v *NullableDisplayInfoResponse) Set(val *DisplayInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayInfoResponse(val *DisplayInfoResponse) *NullableDisplayInfoResponse {
	return &NullableDisplayInfoResponse{value: val, isSet: true}
}

func (v NullableDisplayInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
