/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"encoding/json"
)

// checks if the GetBuildLogs400Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetBuildLogs400Response{}

// GetBuildLogs400Response struct for GetBuildLogs400Response
type GetBuildLogs400Response struct {
	Message    *string  `json:"message,omitempty"`
	StatusCode *float32 `json:"statusCode,omitempty"`
}

// NewGetBuildLogs400Response instantiates a new GetBuildLogs400Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetBuildLogs400Response() *GetBuildLogs400Response {
	this := GetBuildLogs400Response{}
	return &this
}

// NewGetBuildLogs400ResponseWithDefaults instantiates a new GetBuildLogs400Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetBuildLogs400ResponseWithDefaults() *GetBuildLogs400Response {
	this := GetBuildLogs400Response{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GetBuildLogs400Response) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBuildLogs400Response) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GetBuildLogs400Response) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GetBuildLogs400Response) SetMessage(v string) {
	o.Message = &v
}

// GetStatusCode returns the StatusCode field value if set, zero value otherwise.
func (o *GetBuildLogs400Response) GetStatusCode() float32 {
	if o == nil || IsNil(o.StatusCode) {
		var ret float32
		return ret
	}
	return *o.StatusCode
}

// GetStatusCodeOk returns a tuple with the StatusCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetBuildLogs400Response) GetStatusCodeOk() (*float32, bool) {
	if o == nil || IsNil(o.StatusCode) {
		return nil, false
	}
	return o.StatusCode, true
}

// HasStatusCode returns a boolean if a field has been set.
func (o *GetBuildLogs400Response) HasStatusCode() bool {
	if o != nil && !IsNil(o.StatusCode) {
		return true
	}

	return false
}

// SetStatusCode gets a reference to the given float32 and assigns it to the StatusCode field.
func (o *GetBuildLogs400Response) SetStatusCode(v float32) {
	o.StatusCode = &v
}

func (o GetBuildLogs400Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetBuildLogs400Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.StatusCode) {
		toSerialize["statusCode"] = o.StatusCode
	}
	return toSerialize, nil
}

type NullableGetBuildLogs400Response struct {
	value *GetBuildLogs400Response
	isSet bool
}

func (v NullableGetBuildLogs400Response) Get() *GetBuildLogs400Response {
	return v.value
}

func (v *NullableGetBuildLogs400Response) Set(val *GetBuildLogs400Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBuildLogs400Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBuildLogs400Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBuildLogs400Response(val *GetBuildLogs400Response) *NullableGetBuildLogs400Response {
	return &NullableGetBuildLogs400Response{value: val, isSet: true}
}

func (v NullableGetBuildLogs400Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBuildLogs400Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
