/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"encoding/json"
	"fmt"
)

// ImageState the model 'ImageState'
type ImageState string

// List of ImageState
const (
	IMAGESTATE_BUILD_PENDING      ImageState = "build_pending"
	IMAGESTATE_BUILDING           ImageState = "building"
	IMAGESTATE_PENDING            ImageState = "pending"
	IMAGESTATE_PULLING_IMAGE      ImageState = "pulling_image"
	IMAGESTATE_PENDING_VALIDATION ImageState = "pending_validation"
	IMAGESTATE_VALIDATING         ImageState = "validating"
	IMAGESTATE_ACTIVE             ImageState = "active"
	IMAGESTATE_ERROR              ImageState = "error"
	IMAGESTATE_REMOVING           ImageState = "removing"
)

// All allowed values of ImageState enum
var AllowedImageStateEnumValues = []ImageState{
	"build_pending",
	"building",
	"pending",
	"pulling_image",
	"pending_validation",
	"validating",
	"active",
	"error",
	"removing",
}

func (v *ImageState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageState(value)
	for _, existing := range AllowedImageStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageState", value)
}

// NewImageStateFromValue returns a pointer to a valid ImageState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageStateFromValue(v string) (*ImageState, error) {
	ev := ImageState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageState: valid values are %v", v, AllowedImageStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageState) IsValid() bool {
	for _, existing := range AllowedImageStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageState value
func (v ImageState) Ptr() *ImageState {
	return &v
}

type NullableImageState struct {
	value *ImageState
	isSet bool
}

func (v NullableImageState) Get() *ImageState {
	return v.value
}

func (v *NullableImageState) Set(val *ImageState) {
	v.value = val
	v.isSet = true
}

func (v NullableImageState) IsSet() bool {
	return v.isSet
}

func (v *NullableImageState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageState(val *ImageState) *NullableImageState {
	return &NullableImageState{value: val, isSet: true}
}

func (v NullableImageState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
