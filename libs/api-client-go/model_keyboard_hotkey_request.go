/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeyboardHotkeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyboardHotkeyRequest{}

// KeyboardHotkeyRequest struct for KeyboardHotkeyRequest
type KeyboardHotkeyRequest struct {
	// The hotkey combination to press (e.g., \"ctrl+c\", \"cmd+v\", \"alt+tab\")
	Keys string `json:"keys"`
}

type _KeyboardHotkeyRequest KeyboardHotkeyRequest

// NewKeyboardHotkeyRequest instantiates a new KeyboardHotkeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyboardHotkeyRequest(keys string) *KeyboardHotkeyRequest {
	this := KeyboardHotkeyRequest{}
	this.Keys = keys
	return &this
}

// NewKeyboardHotkeyRequestWithDefaults instantiates a new KeyboardHotkeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyboardHotkeyRequestWithDefaults() *KeyboardHotkeyRequest {
	this := KeyboardHotkeyRequest{}
	return &this
}

// GetKeys returns the Keys field value
func (o *KeyboardHotkeyRequest) GetKeys() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value
// and a boolean to check if the value has been set.
func (o *KeyboardHotkeyRequest) GetKeysOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Keys, true
}

// SetKeys sets field value
func (o *KeyboardHotkeyRequest) SetKeys(v string) {
	o.Keys = v
}

func (o KeyboardHotkeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyboardHotkeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["keys"] = o.Keys
	return toSerialize, nil
}

func (o *KeyboardHotkeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"keys",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyboardHotkeyRequest := _KeyboardHotkeyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyboardHotkeyRequest)

	if err != nil {
		return err
	}

	*o = KeyboardHotkeyRequest(varKeyboardHotkeyRequest)

	return err
}

type NullableKeyboardHotkeyRequest struct {
	value *KeyboardHotkeyRequest
	isSet bool
}

func (v NullableKeyboardHotkeyRequest) Get() *KeyboardHotkeyRequest {
	return v.value
}

func (v *NullableKeyboardHotkeyRequest) Set(val *KeyboardHotkeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyboardHotkeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyboardHotkeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyboardHotkeyRequest(val *KeyboardHotkeyRequest) *NullableKeyboardHotkeyRequest {
	return &NullableKeyboardHotkeyRequest{value: val, isSet: true}
}

func (v NullableKeyboardHotkeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyboardHotkeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
