/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeyboardHotkeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyboardHotkeyResponse{}

// KeyboardHotkeyResponse struct for KeyboardHotkeyResponse
type KeyboardHotkeyResponse struct {
	Success bool   `json:"success"`
	Hotkey  string `json:"hotkey"`
}

type _KeyboardHotkeyResponse KeyboardHotkeyResponse

// NewKeyboardHotkeyResponse instantiates a new KeyboardHotkeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyboardHotkeyResponse(success bool, hotkey string) *KeyboardHotkeyResponse {
	this := KeyboardHotkeyResponse{}
	this.Success = success
	this.Hotkey = hotkey
	return &this
}

// NewKeyboardHotkeyResponseWithDefaults instantiates a new KeyboardHotkeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyboardHotkeyResponseWithDefaults() *KeyboardHotkeyResponse {
	this := KeyboardHotkeyResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *KeyboardHotkeyResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *KeyboardHotkeyResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *KeyboardHotkeyResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetHotkey returns the Hotkey field value
func (o *KeyboardHotkeyResponse) GetHotkey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hotkey
}

// GetHotkeyOk returns a tuple with the Hotkey field value
// and a boolean to check if the value has been set.
func (o *KeyboardHotkeyResponse) GetHotkeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hotkey, true
}

// SetHotkey sets field value
func (o *KeyboardHotkeyResponse) SetHotkey(v string) {
	o.Hotkey = v
}

func (o KeyboardHotkeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyboardHotkeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["hotkey"] = o.Hotkey
	return toSerialize, nil
}

func (o *KeyboardHotkeyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"hotkey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyboardHotkeyResponse := _KeyboardHotkeyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyboardHotkeyResponse)

	if err != nil {
		return err
	}

	*o = KeyboardHotkeyResponse(varKeyboardHotkeyResponse)

	return err
}

type NullableKeyboardHotkeyResponse struct {
	value *KeyboardHotkeyResponse
	isSet bool
}

func (v NullableKeyboardHotkeyResponse) Get() *KeyboardHotkeyResponse {
	return v.value
}

func (v *NullableKeyboardHotkeyResponse) Set(val *KeyboardHotkeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyboardHotkeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyboardHotkeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyboardHotkeyResponse(val *KeyboardHotkeyResponse) *NullableKeyboardHotkeyResponse {
	return &NullableKeyboardHotkeyResponse{value: val, isSet: true}
}

func (v NullableKeyboardHotkeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyboardHotkeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
