/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeyboardPressRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyboardPressRequest{}

// KeyboardPressRequest struct for KeyboardPressRequest
type KeyboardPressRequest struct {
	// The key to press (e.g., a, b, c, enter, space, etc.)
	Key string `json:"key"`
	// Array of modifier keys to press along with the main key (ctrl, alt, shift, cmd)
	Modifiers []string `json:"modifiers,omitempty"`
}

type _KeyboardPressRequest KeyboardPressRequest

// NewKeyboardPressRequest instantiates a new KeyboardPressRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyboardPressRequest(key string) *KeyboardPressRequest {
	this := KeyboardPressRequest{}
	this.Key = key
	return &this
}

// NewKeyboardPressRequestWithDefaults instantiates a new KeyboardPressRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyboardPressRequestWithDefaults() *KeyboardPressRequest {
	this := KeyboardPressRequest{}
	return &this
}

// GetKey returns the Key field value
func (o *KeyboardPressRequest) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *KeyboardPressRequest) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *KeyboardPressRequest) SetKey(v string) {
	o.Key = v
}

// GetModifiers returns the Modifiers field value if set, zero value otherwise.
func (o *KeyboardPressRequest) GetModifiers() []string {
	if o == nil || IsNil(o.Modifiers) {
		var ret []string
		return ret
	}
	return o.Modifiers
}

// GetModifiersOk returns a tuple with the Modifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyboardPressRequest) GetModifiersOk() ([]string, bool) {
	if o == nil || IsNil(o.Modifiers) {
		return nil, false
	}
	return o.Modifiers, true
}

// HasModifiers returns a boolean if a field has been set.
func (o *KeyboardPressRequest) HasModifiers() bool {
	if o != nil && !IsNil(o.Modifiers) {
		return true
	}

	return false
}

// SetModifiers gets a reference to the given []string and assigns it to the Modifiers field.
func (o *KeyboardPressRequest) SetModifiers(v []string) {
	o.Modifiers = v
}

func (o KeyboardPressRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyboardPressRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	if !IsNil(o.Modifiers) {
		toSerialize["modifiers"] = o.Modifiers
	}
	return toSerialize, nil
}

func (o *KeyboardPressRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyboardPressRequest := _KeyboardPressRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyboardPressRequest)

	if err != nil {
		return err
	}

	*o = KeyboardPressRequest(varKeyboardPressRequest)

	return err
}

type NullableKeyboardPressRequest struct {
	value *KeyboardPressRequest
	isSet bool
}

func (v NullableKeyboardPressRequest) Get() *KeyboardPressRequest {
	return v.value
}

func (v *NullableKeyboardPressRequest) Set(val *KeyboardPressRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyboardPressRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyboardPressRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyboardPressRequest(val *KeyboardPressRequest) *NullableKeyboardPressRequest {
	return &NullableKeyboardPressRequest{value: val, isSet: true}
}

func (v NullableKeyboardPressRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyboardPressRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
