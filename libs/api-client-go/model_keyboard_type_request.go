/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the KeyboardTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyboardTypeRequest{}

// KeyboardTypeRequest struct for KeyboardTypeRequest
type KeyboardTypeRequest struct {
	// The text to type using the keyboard
	Text string `json:"text"`
	// Delay in milliseconds between keystrokes. Defaults to 0
	Delay *float32 `json:"delay,omitempty"`
}

type _KeyboardTypeRequest KeyboardTypeRequest

// NewKeyboardTypeRequest instantiates a new KeyboardTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyboardTypeRequest(text string) *KeyboardTypeRequest {
	this := KeyboardTypeRequest{}
	this.Text = text
	return &this
}

// NewKeyboardTypeRequestWithDefaults instantiates a new KeyboardTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyboardTypeRequestWithDefaults() *KeyboardTypeRequest {
	this := KeyboardTypeRequest{}
	return &this
}

// GetText returns the Text field value
func (o *KeyboardTypeRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *KeyboardTypeRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *KeyboardTypeRequest) SetText(v string) {
	o.Text = v
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *KeyboardTypeRequest) GetDelay() float32 {
	if o == nil || IsNil(o.Delay) {
		var ret float32
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyboardTypeRequest) GetDelayOk() (*float32, bool) {
	if o == nil || IsNil(o.Delay) {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *KeyboardTypeRequest) HasDelay() bool {
	if o != nil && !IsNil(o.Delay) {
		return true
	}

	return false
}

// SetDelay gets a reference to the given float32 and assigns it to the Delay field.
func (o *KeyboardTypeRequest) SetDelay(v float32) {
	o.Delay = &v
}

func (o KeyboardTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyboardTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.Delay) {
		toSerialize["delay"] = o.Delay
	}
	return toSerialize, nil
}

func (o *KeyboardTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeyboardTypeRequest := _KeyboardTypeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeyboardTypeRequest)

	if err != nil {
		return err
	}

	*o = KeyboardTypeRequest(varKeyboardTypeRequest)

	return err
}

type NullableKeyboardTypeRequest struct {
	value *KeyboardTypeRequest
	isSet bool
}

func (v NullableKeyboardTypeRequest) Get() *KeyboardTypeRequest {
	return v.value
}

func (v *NullableKeyboardTypeRequest) Set(val *KeyboardTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyboardTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyboardTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyboardTypeRequest(val *KeyboardTypeRequest) *NullableKeyboardTypeRequest {
	return &NullableKeyboardTypeRequest{value: val, isSet: true}
}

func (v NullableKeyboardTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyboardTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
