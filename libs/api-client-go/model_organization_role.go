/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OrganizationRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationRole{}

// OrganizationRole struct for OrganizationRole
type OrganizationRole struct {
	// Role ID
	Id string `json:"id"`
	// Role name
	Name string `json:"name"`
	// Role description
	Description string `json:"description"`
	// Roles assigned to the user
	Permissions []string `json:"permissions"`
	// Global role flag
	IsGlobal bool `json:"isGlobal"`
	// Creation timestamp
	CreatedAt time.Time `json:"createdAt"`
	// Last update timestamp
	UpdatedAt time.Time `json:"updatedAt"`
}

type _OrganizationRole OrganizationRole

// NewOrganizationRole instantiates a new OrganizationRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationRole(id string, name string, description string, permissions []string, isGlobal bool, createdAt time.Time, updatedAt time.Time) *OrganizationRole {
	this := OrganizationRole{}
	this.Id = id
	this.Name = name
	this.Description = description
	this.Permissions = permissions
	this.IsGlobal = isGlobal
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewOrganizationRoleWithDefaults instantiates a new OrganizationRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationRoleWithDefaults() *OrganizationRole {
	this := OrganizationRole{}
	return &this
}

// GetId returns the Id field value
func (o *OrganizationRole) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationRole) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OrganizationRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationRole) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *OrganizationRole) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *OrganizationRole) SetDescription(v string) {
	o.Description = v
}

// GetPermissions returns the Permissions field value
func (o *OrganizationRole) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetPermissionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *OrganizationRole) SetPermissions(v []string) {
	o.Permissions = v
}

// GetIsGlobal returns the IsGlobal field value
func (o *OrganizationRole) GetIsGlobal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGlobal
}

// GetIsGlobalOk returns a tuple with the IsGlobal field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetIsGlobalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsGlobal, true
}

// SetIsGlobal sets field value
func (o *OrganizationRole) SetIsGlobal(v bool) {
	o.IsGlobal = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *OrganizationRole) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *OrganizationRole) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *OrganizationRole) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *OrganizationRole) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *OrganizationRole) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o OrganizationRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	toSerialize["permissions"] = o.Permissions
	toSerialize["isGlobal"] = o.IsGlobal
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *OrganizationRole) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"description",
		"permissions",
		"isGlobal",
		"createdAt",
		"updatedAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationRole := _OrganizationRole{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrganizationRole)

	if err != nil {
		return err
	}

	*o = OrganizationRole(varOrganizationRole)

	return err
}

type NullableOrganizationRole struct {
	value *OrganizationRole
	isSet bool
}

func (v NullableOrganizationRole) Get() *OrganizationRole {
	return v.value
}

func (v *NullableOrganizationRole) Set(val *OrganizationRole) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationRole) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationRole(val *OrganizationRole) *NullableOrganizationRole {
	return &NullableOrganizationRole{value: val, isSet: true}
}

func (v NullableOrganizationRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
