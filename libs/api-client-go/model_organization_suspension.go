/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OrganizationSuspension type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationSuspension{}

// OrganizationSuspension struct for OrganizationSuspension
type OrganizationSuspension struct {
	// Suspension reason
	Reason string `json:"reason"`
	// Suspension until
	Until time.Time `json:"until"`
}

type _OrganizationSuspension OrganizationSuspension

// NewOrganizationSuspension instantiates a new OrganizationSuspension object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationSuspension(reason string, until time.Time) *OrganizationSuspension {
	this := OrganizationSuspension{}
	this.Reason = reason
	this.Until = until
	return &this
}

// NewOrganizationSuspensionWithDefaults instantiates a new OrganizationSuspension object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationSuspensionWithDefaults() *OrganizationSuspension {
	this := OrganizationSuspension{}
	return &this
}

// GetReason returns the Reason field value
func (o *OrganizationSuspension) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *OrganizationSuspension) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *OrganizationSuspension) SetReason(v string) {
	o.Reason = v
}

// GetUntil returns the Until field value
func (o *OrganizationSuspension) GetUntil() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Until
}

// GetUntilOk returns a tuple with the Until field value
// and a boolean to check if the value has been set.
func (o *OrganizationSuspension) GetUntilOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Until, true
}

// SetUntil sets field value
func (o *OrganizationSuspension) SetUntil(v time.Time) {
	o.Until = v
}

func (o OrganizationSuspension) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationSuspension) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reason"] = o.Reason
	toSerialize["until"] = o.Until
	return toSerialize, nil
}

func (o *OrganizationSuspension) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reason",
		"until",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationSuspension := _OrganizationSuspension{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOrganizationSuspension)

	if err != nil {
		return err
	}

	*o = OrganizationSuspension(varOrganizationSuspension)

	return err
}

type NullableOrganizationSuspension struct {
	value *OrganizationSuspension
	isSet bool
}

func (v NullableOrganizationSuspension) Get() *OrganizationSuspension {
	return v.value
}

func (v *NullableOrganizationSuspension) Set(val *OrganizationSuspension) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationSuspension) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationSuspension) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationSuspension(val *OrganizationSuspension) *NullableOrganizationSuspension {
	return &NullableOrganizationSuspension{value: val, isSet: true}
}

func (v NullableOrganizationSuspension) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationSuspension) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
