/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the PaginatedSnapshots type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedSnapshots{}

// PaginatedSnapshots struct for PaginatedSnapshots
type PaginatedSnapshots struct {
	Items                []SnapshotDto `json:"items"`
	Total                float32       `json:"total"`
	Page                 float32       `json:"page"`
	TotalPages           float32       `json:"totalPages"`
	AdditionalProperties map[string]interface{}
}

type _PaginatedSnapshots PaginatedSnapshots

// NewPaginatedSnapshots instantiates a new PaginatedSnapshots object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedSnapshots(items []SnapshotDto, total float32, page float32, totalPages float32) *PaginatedSnapshots {
	this := PaginatedSnapshots{}
	this.Items = items
	this.Total = total
	this.Page = page
	this.TotalPages = totalPages
	return &this
}

// NewPaginatedSnapshotsWithDefaults instantiates a new PaginatedSnapshots object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedSnapshotsWithDefaults() *PaginatedSnapshots {
	this := PaginatedSnapshots{}
	return &this
}

// GetItems returns the Items field value
func (o *PaginatedSnapshots) GetItems() []SnapshotDto {
	if o == nil {
		var ret []SnapshotDto
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PaginatedSnapshots) GetItemsOk() ([]SnapshotDto, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PaginatedSnapshots) SetItems(v []SnapshotDto) {
	o.Items = v
}

// GetTotal returns the Total field value
func (o *PaginatedSnapshots) GetTotal() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *PaginatedSnapshots) GetTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *PaginatedSnapshots) SetTotal(v float32) {
	o.Total = v
}

// GetPage returns the Page field value
func (o *PaginatedSnapshots) GetPage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Page
}

// GetPageOk returns a tuple with the Page field value
// and a boolean to check if the value has been set.
func (o *PaginatedSnapshots) GetPageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Page, true
}

// SetPage sets field value
func (o *PaginatedSnapshots) SetPage(v float32) {
	o.Page = v
}

// GetTotalPages returns the TotalPages field value
func (o *PaginatedSnapshots) GetTotalPages() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value
// and a boolean to check if the value has been set.
func (o *PaginatedSnapshots) GetTotalPagesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalPages, true
}

// SetTotalPages sets field value
func (o *PaginatedSnapshots) SetTotalPages(v float32) {
	o.TotalPages = v
}

func (o PaginatedSnapshots) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedSnapshots) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["total"] = o.Total
	toSerialize["page"] = o.Page
	toSerialize["totalPages"] = o.TotalPages

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaginatedSnapshots) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"total",
		"page",
		"totalPages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPaginatedSnapshots := _PaginatedSnapshots{}

	err = json.Unmarshal(data, &varPaginatedSnapshots)

	if err != nil {
		return err
	}

	*o = PaginatedSnapshots(varPaginatedSnapshots)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		delete(additionalProperties, "total")
		delete(additionalProperties, "page")
		delete(additionalProperties, "totalPages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginatedSnapshots struct {
	value *PaginatedSnapshots
	isSet bool
}

func (v NullablePaginatedSnapshots) Get() *PaginatedSnapshots {
	return v.value
}

func (v *NullablePaginatedSnapshots) Set(val *PaginatedSnapshots) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedSnapshots) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedSnapshots) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedSnapshots(val *PaginatedSnapshots) *NullablePaginatedSnapshots {
	return &NullablePaginatedSnapshots{value: val, isSet: true}
}

func (v NullablePaginatedSnapshots) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedSnapshots) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
