/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProcessLogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessLogsResponse{}

// ProcessLogsResponse struct for ProcessLogsResponse
type ProcessLogsResponse struct {
	// The name of the VNC process whose logs were retrieved
	ProcessName string `json:"processName"`
	// The log output from the specified VNC process
	Logs string `json:"logs"`
}

type _ProcessLogsResponse ProcessLogsResponse

// NewProcessLogsResponse instantiates a new ProcessLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessLogsResponse(processName string, logs string) *ProcessLogsResponse {
	this := ProcessLogsResponse{}
	this.ProcessName = processName
	this.Logs = logs
	return &this
}

// NewProcessLogsResponseWithDefaults instantiates a new ProcessLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessLogsResponseWithDefaults() *ProcessLogsResponse {
	this := ProcessLogsResponse{}
	return &this
}

// GetProcessName returns the ProcessName field value
func (o *ProcessLogsResponse) GetProcessName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessName
}

// GetProcessNameOk returns a tuple with the ProcessName field value
// and a boolean to check if the value has been set.
func (o *ProcessLogsResponse) GetProcessNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessName, true
}

// SetProcessName sets field value
func (o *ProcessLogsResponse) SetProcessName(v string) {
	o.ProcessName = v
}

// GetLogs returns the Logs field value
func (o *ProcessLogsResponse) GetLogs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Logs
}

// GetLogsOk returns a tuple with the Logs field value
// and a boolean to check if the value has been set.
func (o *ProcessLogsResponse) GetLogsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Logs, true
}

// SetLogs sets field value
func (o *ProcessLogsResponse) SetLogs(v string) {
	o.Logs = v
}

func (o ProcessLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessLogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["processName"] = o.ProcessName
	toSerialize["logs"] = o.Logs
	return toSerialize, nil
}

func (o *ProcessLogsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"processName",
		"logs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcessLogsResponse := _ProcessLogsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcessLogsResponse)

	if err != nil {
		return err
	}

	*o = ProcessLogsResponse(varProcessLogsResponse)

	return err
}

type NullableProcessLogsResponse struct {
	value *ProcessLogsResponse
	isSet bool
}

func (v NullableProcessLogsResponse) Get() *ProcessLogsResponse {
	return v.value
}

func (v *NullableProcessLogsResponse) Set(val *ProcessLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessLogsResponse(val *ProcessLogsResponse) *NullableProcessLogsResponse {
	return &NullableProcessLogsResponse{value: val, isSet: true}
}

func (v NullableProcessLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
