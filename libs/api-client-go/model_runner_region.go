/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// RunnerRegion The region of the runner
type RunnerRegion string

// List of RunnerRegion
const (
	RUNNERREGION_EU   RunnerRegion = "eu"
	RUNNERREGION_US   RunnerRegion = "us"
	RUNNERREGION_ASIA RunnerRegion = "asia"
)

// All allowed values of RunnerRegion enum
var AllowedRunnerRegionEnumValues = []RunnerRegion{
	"eu",
	"us",
	"asia",
}

func (v *RunnerRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RunnerRegion(value)
	for _, existing := range AllowedRunnerRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RunnerRegion", value)
}

// NewRunnerRegionFromValue returns a pointer to a valid RunnerRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRunnerRegionFromValue(v string) (*RunnerRegion, error) {
	ev := RunnerRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RunnerRegion: valid values are %v", v, AllowedRunnerRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RunnerRegion) IsValid() bool {
	for _, existing := range AllowedRunnerRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RunnerRegion value
func (v RunnerRegion) Ptr() *RunnerRegion {
	return &v
}

type NullableRunnerRegion struct {
	value *RunnerRegion
	isSet bool
}

func (v NullableRunnerRegion) Get() *RunnerRegion {
	return v.value
}

func (v *NullableRunnerRegion) Set(val *RunnerRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableRunnerRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableRunnerRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunnerRegion(val *RunnerRegion) *NullableRunnerRegion {
	return &NullableRunnerRegion{value: val, isSet: true}
}

func (v NullableRunnerRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunnerRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
