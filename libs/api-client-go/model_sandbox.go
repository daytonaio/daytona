/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Sandbox type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sandbox{}

// Sandbox struct for Sandbox
type Sandbox struct {
	// The ID of the sandbox
	Id string `json:"id"`
	// The name of the sandbox
	// Deprecated
	Name string `json:"name"`
	// The organization ID of the sandbox
	OrganizationId string `json:"organizationId"`
	// The snapshot used for the sandbox
	Snapshot *string `json:"snapshot,omitempty"`
	// The user associated with the project
	User string `json:"user"`
	// Environment variables for the sandbox
	Env map[string]string `json:"env"`
	// Labels for the sandbox
	Labels map[string]string `json:"labels"`
	// Whether the sandbox http preview is public
	Public bool `json:"public"`
	// The target environment for the sandbox
	Target string `json:"target"`
	// Additional information about the sandbox
	Info *SandboxInfo `json:"info,omitempty"`
	// The CPU quota for the sandbox
	Cpu *float32 `json:"cpu,omitempty"`
	// The GPU quota for the sandbox
	Gpu *float32 `json:"gpu,omitempty"`
	// The memory quota for the sandbox
	Memory *float32 `json:"memory,omitempty"`
	// The disk quota for the sandbox
	Disk *float32 `json:"disk,omitempty"`
	// The state of the sandbox
	State *SandboxState `json:"state,omitempty"`
	// The error reason of the sandbox
	ErrorReason *string `json:"errorReason,omitempty"`
	// The state of the backup
	BackupState *string `json:"backupState,omitempty"`
	// The creation timestamp of the last backup
	BackupCreatedAt *string `json:"backupCreatedAt,omitempty"`
	// Auto-stop interval in minutes (0 means disabled)
	AutoStopInterval *float32 `json:"autoStopInterval,omitempty"`
	// Auto-archive interval in minutes
	AutoArchiveInterval *float32 `json:"autoArchiveInterval,omitempty"`
	// Array of volumes attached to the sandbox
	Volumes []SandboxVolume `json:"volumes,omitempty"`
	// Build information for the sandbox
	BuildInfo *BuildInfo `json:"buildInfo,omitempty"`
}

type _Sandbox Sandbox

// NewSandbox instantiates a new Sandbox object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandbox(id string, name string, organizationId string, user string, env map[string]string, labels map[string]string, public bool, target string) *Sandbox {
	this := Sandbox{}
	this.Id = id
	this.Name = name
	this.OrganizationId = organizationId
	this.User = user
	this.Env = env
	this.Labels = labels
	this.Public = public
	this.Target = target
	return &this
}

// NewSandboxWithDefaults instantiates a new Sandbox object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxWithDefaults() *Sandbox {
	this := Sandbox{}
	var name string = ""
	this.Name = name
	return &this
}

// GetId returns the Id field value
func (o *Sandbox) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Sandbox) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
// Deprecated
func (o *Sandbox) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *Sandbox) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
// Deprecated
func (o *Sandbox) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Sandbox) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Sandbox) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *Sandbox) GetSnapshot() string {
	if o == nil || IsNil(o.Snapshot) {
		var ret string
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetSnapshotOk() (*string, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *Sandbox) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given string and assigns it to the Snapshot field.
func (o *Sandbox) SetSnapshot(v string) {
	o.Snapshot = &v
}

// GetUser returns the User field value
func (o *Sandbox) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Sandbox) SetUser(v string) {
	o.User = v
}

// GetEnv returns the Env field value
func (o *Sandbox) GetEnv() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetEnvOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Env, true
}

// SetEnv sets field value
func (o *Sandbox) SetEnv(v map[string]string) {
	o.Env = v
}

// GetLabels returns the Labels field value
func (o *Sandbox) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *Sandbox) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetPublic returns the Public field value
func (o *Sandbox) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *Sandbox) SetPublic(v bool) {
	o.Public = v
}

// GetTarget returns the Target field value
func (o *Sandbox) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *Sandbox) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *Sandbox) SetTarget(v string) {
	o.Target = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Sandbox) GetInfo() SandboxInfo {
	if o == nil || IsNil(o.Info) {
		var ret SandboxInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetInfoOk() (*SandboxInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Sandbox) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given SandboxInfo and assigns it to the Info field.
func (o *Sandbox) SetInfo(v SandboxInfo) {
	o.Info = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Sandbox) GetCpu() float32 {
	if o == nil || IsNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetCpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Sandbox) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *Sandbox) SetCpu(v float32) {
	o.Cpu = &v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *Sandbox) GetGpu() float32 {
	if o == nil || IsNil(o.Gpu) {
		var ret float32
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetGpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *Sandbox) HasGpu() bool {
	if o != nil && !IsNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given float32 and assigns it to the Gpu field.
func (o *Sandbox) SetGpu(v float32) {
	o.Gpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Sandbox) GetMemory() float32 {
	if o == nil || IsNil(o.Memory) {
		var ret float32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetMemoryOk() (*float32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Sandbox) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given float32 and assigns it to the Memory field.
func (o *Sandbox) SetMemory(v float32) {
	o.Memory = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *Sandbox) GetDisk() float32 {
	if o == nil || IsNil(o.Disk) {
		var ret float32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetDiskOk() (*float32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *Sandbox) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given float32 and assigns it to the Disk field.
func (o *Sandbox) SetDisk(v float32) {
	o.Disk = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Sandbox) GetState() SandboxState {
	if o == nil || IsNil(o.State) {
		var ret SandboxState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetStateOk() (*SandboxState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Sandbox) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given SandboxState and assigns it to the State field.
func (o *Sandbox) SetState(v SandboxState) {
	o.State = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *Sandbox) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *Sandbox) HasErrorReason() bool {
	if o != nil && !IsNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *Sandbox) SetErrorReason(v string) {
	o.ErrorReason = &v
}

// GetBackupState returns the BackupState field value if set, zero value otherwise.
func (o *Sandbox) GetBackupState() string {
	if o == nil || IsNil(o.BackupState) {
		var ret string
		return ret
	}
	return *o.BackupState
}

// GetBackupStateOk returns a tuple with the BackupState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetBackupStateOk() (*string, bool) {
	if o == nil || IsNil(o.BackupState) {
		return nil, false
	}
	return o.BackupState, true
}

// HasBackupState returns a boolean if a field has been set.
func (o *Sandbox) HasBackupState() bool {
	if o != nil && !IsNil(o.BackupState) {
		return true
	}

	return false
}

// SetBackupState gets a reference to the given string and assigns it to the BackupState field.
func (o *Sandbox) SetBackupState(v string) {
	o.BackupState = &v
}

// GetBackupCreatedAt returns the BackupCreatedAt field value if set, zero value otherwise.
func (o *Sandbox) GetBackupCreatedAt() string {
	if o == nil || IsNil(o.BackupCreatedAt) {
		var ret string
		return ret
	}
	return *o.BackupCreatedAt
}

// GetBackupCreatedAtOk returns a tuple with the BackupCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetBackupCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.BackupCreatedAt) {
		return nil, false
	}
	return o.BackupCreatedAt, true
}

// HasBackupCreatedAt returns a boolean if a field has been set.
func (o *Sandbox) HasBackupCreatedAt() bool {
	if o != nil && !IsNil(o.BackupCreatedAt) {
		return true
	}

	return false
}

// SetBackupCreatedAt gets a reference to the given string and assigns it to the BackupCreatedAt field.
func (o *Sandbox) SetBackupCreatedAt(v string) {
	o.BackupCreatedAt = &v
}

// GetAutoStopInterval returns the AutoStopInterval field value if set, zero value otherwise.
func (o *Sandbox) GetAutoStopInterval() float32 {
	if o == nil || IsNil(o.AutoStopInterval) {
		var ret float32
		return ret
	}
	return *o.AutoStopInterval
}

// GetAutoStopIntervalOk returns a tuple with the AutoStopInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetAutoStopIntervalOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoStopInterval) {
		return nil, false
	}
	return o.AutoStopInterval, true
}

// HasAutoStopInterval returns a boolean if a field has been set.
func (o *Sandbox) HasAutoStopInterval() bool {
	if o != nil && !IsNil(o.AutoStopInterval) {
		return true
	}

	return false
}

// SetAutoStopInterval gets a reference to the given float32 and assigns it to the AutoStopInterval field.
func (o *Sandbox) SetAutoStopInterval(v float32) {
	o.AutoStopInterval = &v
}

// GetAutoArchiveInterval returns the AutoArchiveInterval field value if set, zero value otherwise.
func (o *Sandbox) GetAutoArchiveInterval() float32 {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		var ret float32
		return ret
	}
	return *o.AutoArchiveInterval
}

// GetAutoArchiveIntervalOk returns a tuple with the AutoArchiveInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetAutoArchiveIntervalOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		return nil, false
	}
	return o.AutoArchiveInterval, true
}

// HasAutoArchiveInterval returns a boolean if a field has been set.
func (o *Sandbox) HasAutoArchiveInterval() bool {
	if o != nil && !IsNil(o.AutoArchiveInterval) {
		return true
	}

	return false
}

// SetAutoArchiveInterval gets a reference to the given float32 and assigns it to the AutoArchiveInterval field.
func (o *Sandbox) SetAutoArchiveInterval(v float32) {
	o.AutoArchiveInterval = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *Sandbox) GetVolumes() []SandboxVolume {
	if o == nil || IsNil(o.Volumes) {
		var ret []SandboxVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetVolumesOk() ([]SandboxVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *Sandbox) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []SandboxVolume and assigns it to the Volumes field.
func (o *Sandbox) SetVolumes(v []SandboxVolume) {
	o.Volumes = v
}

// GetBuildInfo returns the BuildInfo field value if set, zero value otherwise.
func (o *Sandbox) GetBuildInfo() BuildInfo {
	if o == nil || IsNil(o.BuildInfo) {
		var ret BuildInfo
		return ret
	}
	return *o.BuildInfo
}

// GetBuildInfoOk returns a tuple with the BuildInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sandbox) GetBuildInfoOk() (*BuildInfo, bool) {
	if o == nil || IsNil(o.BuildInfo) {
		return nil, false
	}
	return o.BuildInfo, true
}

// HasBuildInfo returns a boolean if a field has been set.
func (o *Sandbox) HasBuildInfo() bool {
	if o != nil && !IsNil(o.BuildInfo) {
		return true
	}

	return false
}

// SetBuildInfo gets a reference to the given BuildInfo and assigns it to the BuildInfo field.
func (o *Sandbox) SetBuildInfo(v BuildInfo) {
	o.BuildInfo = &v
}

func (o Sandbox) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sandbox) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["organizationId"] = o.OrganizationId
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	toSerialize["user"] = o.User
	toSerialize["env"] = o.Env
	toSerialize["labels"] = o.Labels
	toSerialize["public"] = o.Public
	toSerialize["target"] = o.Target
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ErrorReason) {
		toSerialize["errorReason"] = o.ErrorReason
	}
	if !IsNil(o.BackupState) {
		toSerialize["backupState"] = o.BackupState
	}
	if !IsNil(o.BackupCreatedAt) {
		toSerialize["backupCreatedAt"] = o.BackupCreatedAt
	}
	if !IsNil(o.AutoStopInterval) {
		toSerialize["autoStopInterval"] = o.AutoStopInterval
	}
	if !IsNil(o.AutoArchiveInterval) {
		toSerialize["autoArchiveInterval"] = o.AutoArchiveInterval
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	if !IsNil(o.BuildInfo) {
		toSerialize["buildInfo"] = o.BuildInfo
	}
	return toSerialize, nil
}

func (o *Sandbox) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"organizationId",
		"user",
		"env",
		"labels",
		"public",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSandbox := _Sandbox{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSandbox)

	if err != nil {
		return err
	}

	*o = Sandbox(varSandbox)

	return err
}

type NullableSandbox struct {
	value *Sandbox
	isSet bool
}

func (v NullableSandbox) Get() *Sandbox {
	return v.value
}

func (v *NullableSandbox) Set(val *Sandbox) {
	v.value = val
	v.isSet = true
}

func (v NullableSandbox) IsSet() bool {
	return v.isSet
}

func (v *NullableSandbox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandbox(val *Sandbox) *NullableSandbox {
	return &NullableSandbox{value: val, isSet: true}
}

func (v NullableSandbox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandbox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
