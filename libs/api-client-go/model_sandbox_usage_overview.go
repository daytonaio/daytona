/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the SandboxUsageOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SandboxUsageOverview{}

// SandboxUsageOverview struct for SandboxUsageOverview
type SandboxUsageOverview struct {
	Region               string  `json:"region"`
	TotalCpuQuota        float32 `json:"totalCpuQuota"`
	CurrentCpuUsage      float32 `json:"currentCpuUsage"`
	TotalMemoryQuota     float32 `json:"totalMemoryQuota"`
	CurrentMemoryUsage   float32 `json:"currentMemoryUsage"`
	TotalDiskQuota       float32 `json:"totalDiskQuota"`
	CurrentDiskUsage     float32 `json:"currentDiskUsage"`
	AdditionalProperties map[string]interface{}
}

type _SandboxUsageOverview SandboxUsageOverview

// NewSandboxUsageOverview instantiates a new SandboxUsageOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSandboxUsageOverview(region string, totalCpuQuota float32, currentCpuUsage float32, totalMemoryQuota float32, currentMemoryUsage float32, totalDiskQuota float32, currentDiskUsage float32) *SandboxUsageOverview {
	this := SandboxUsageOverview{}
	this.Region = region
	this.TotalCpuQuota = totalCpuQuota
	this.CurrentCpuUsage = currentCpuUsage
	this.TotalMemoryQuota = totalMemoryQuota
	this.CurrentMemoryUsage = currentMemoryUsage
	this.TotalDiskQuota = totalDiskQuota
	this.CurrentDiskUsage = currentDiskUsage
	return &this
}

// NewSandboxUsageOverviewWithDefaults instantiates a new SandboxUsageOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSandboxUsageOverviewWithDefaults() *SandboxUsageOverview {
	this := SandboxUsageOverview{}
	return &this
}

// GetRegion returns the Region field value
func (o *SandboxUsageOverview) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *SandboxUsageOverview) SetRegion(v string) {
	o.Region = v
}

// GetTotalCpuQuota returns the TotalCpuQuota field value
func (o *SandboxUsageOverview) GetTotalCpuQuota() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalCpuQuota
}

// GetTotalCpuQuotaOk returns a tuple with the TotalCpuQuota field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetTotalCpuQuotaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCpuQuota, true
}

// SetTotalCpuQuota sets field value
func (o *SandboxUsageOverview) SetTotalCpuQuota(v float32) {
	o.TotalCpuQuota = v
}

// GetCurrentCpuUsage returns the CurrentCpuUsage field value
func (o *SandboxUsageOverview) GetCurrentCpuUsage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentCpuUsage
}

// GetCurrentCpuUsageOk returns a tuple with the CurrentCpuUsage field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetCurrentCpuUsageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentCpuUsage, true
}

// SetCurrentCpuUsage sets field value
func (o *SandboxUsageOverview) SetCurrentCpuUsage(v float32) {
	o.CurrentCpuUsage = v
}

// GetTotalMemoryQuota returns the TotalMemoryQuota field value
func (o *SandboxUsageOverview) GetTotalMemoryQuota() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalMemoryQuota
}

// GetTotalMemoryQuotaOk returns a tuple with the TotalMemoryQuota field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetTotalMemoryQuotaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalMemoryQuota, true
}

// SetTotalMemoryQuota sets field value
func (o *SandboxUsageOverview) SetTotalMemoryQuota(v float32) {
	o.TotalMemoryQuota = v
}

// GetCurrentMemoryUsage returns the CurrentMemoryUsage field value
func (o *SandboxUsageOverview) GetCurrentMemoryUsage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentMemoryUsage
}

// GetCurrentMemoryUsageOk returns a tuple with the CurrentMemoryUsage field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetCurrentMemoryUsageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentMemoryUsage, true
}

// SetCurrentMemoryUsage sets field value
func (o *SandboxUsageOverview) SetCurrentMemoryUsage(v float32) {
	o.CurrentMemoryUsage = v
}

// GetTotalDiskQuota returns the TotalDiskQuota field value
func (o *SandboxUsageOverview) GetTotalDiskQuota() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalDiskQuota
}

// GetTotalDiskQuotaOk returns a tuple with the TotalDiskQuota field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetTotalDiskQuotaOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDiskQuota, true
}

// SetTotalDiskQuota sets field value
func (o *SandboxUsageOverview) SetTotalDiskQuota(v float32) {
	o.TotalDiskQuota = v
}

// GetCurrentDiskUsage returns the CurrentDiskUsage field value
func (o *SandboxUsageOverview) GetCurrentDiskUsage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.CurrentDiskUsage
}

// GetCurrentDiskUsageOk returns a tuple with the CurrentDiskUsage field value
// and a boolean to check if the value has been set.
func (o *SandboxUsageOverview) GetCurrentDiskUsageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentDiskUsage, true
}

// SetCurrentDiskUsage sets field value
func (o *SandboxUsageOverview) SetCurrentDiskUsage(v float32) {
	o.CurrentDiskUsage = v
}

func (o SandboxUsageOverview) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SandboxUsageOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	toSerialize["totalCpuQuota"] = o.TotalCpuQuota
	toSerialize["currentCpuUsage"] = o.CurrentCpuUsage
	toSerialize["totalMemoryQuota"] = o.TotalMemoryQuota
	toSerialize["currentMemoryUsage"] = o.CurrentMemoryUsage
	toSerialize["totalDiskQuota"] = o.TotalDiskQuota
	toSerialize["currentDiskUsage"] = o.CurrentDiskUsage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SandboxUsageOverview) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"totalCpuQuota",
		"currentCpuUsage",
		"totalMemoryQuota",
		"currentMemoryUsage",
		"totalDiskQuota",
		"currentDiskUsage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSandboxUsageOverview := _SandboxUsageOverview{}

	err = json.Unmarshal(data, &varSandboxUsageOverview)

	if err != nil {
		return err
	}

	*o = SandboxUsageOverview(varSandboxUsageOverview)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "region")
		delete(additionalProperties, "totalCpuQuota")
		delete(additionalProperties, "currentCpuUsage")
		delete(additionalProperties, "totalMemoryQuota")
		delete(additionalProperties, "currentMemoryUsage")
		delete(additionalProperties, "totalDiskQuota")
		delete(additionalProperties, "currentDiskUsage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSandboxUsageOverview struct {
	value *SandboxUsageOverview
	isSet bool
}

func (v NullableSandboxUsageOverview) Get() *SandboxUsageOverview {
	return v.value
}

func (v *NullableSandboxUsageOverview) Set(val *SandboxUsageOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableSandboxUsageOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableSandboxUsageOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSandboxUsageOverview(val *SandboxUsageOverview) *NullableSandboxUsageOverview {
	return &NullableSandboxUsageOverview{value: val, isSet: true}
}

func (v NullableSandboxUsageOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSandboxUsageOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
