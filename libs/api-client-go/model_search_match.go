/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchMatch{}

// SearchMatch struct for SearchMatch
type SearchMatch struct {
	// File path
	File string `json:"file"`
	// Line number
	LineNumber float32 `json:"line_number"`
	// Column number
	Column float32 `json:"column"`
	// Line content
	Line string `json:"line"`
	// Matched text
	Match string `json:"match"`
	// Context lines before match
	ContextBefore []string `json:"context_before,omitempty"`
	// Context lines after match
	ContextAfter []string `json:"context_after,omitempty"`
}

type _SearchMatch SearchMatch

// NewSearchMatch instantiates a new SearchMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchMatch(file string, lineNumber float32, column float32, line string, match string) *SearchMatch {
	this := SearchMatch{}
	this.File = file
	this.LineNumber = lineNumber
	this.Column = column
	this.Line = line
	this.Match = match
	return &this
}

// NewSearchMatchWithDefaults instantiates a new SearchMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchMatchWithDefaults() *SearchMatch {
	this := SearchMatch{}
	return &this
}

// GetFile returns the File field value
func (o *SearchMatch) GetFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *SearchMatch) SetFile(v string) {
	o.File = v
}

// GetLineNumber returns the LineNumber field value
func (o *SearchMatch) GetLineNumber() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetLineNumberOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineNumber, true
}

// SetLineNumber sets field value
func (o *SearchMatch) SetLineNumber(v float32) {
	o.LineNumber = v
}

// GetColumn returns the Column field value
func (o *SearchMatch) GetColumn() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Column
}

// GetColumnOk returns a tuple with the Column field value
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetColumnOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Column, true
}

// SetColumn sets field value
func (o *SearchMatch) SetColumn(v float32) {
	o.Column = v
}

// GetLine returns the Line field value
func (o *SearchMatch) GetLine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line
}

// GetLineOk returns a tuple with the Line field value
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetLineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Line, true
}

// SetLine sets field value
func (o *SearchMatch) SetLine(v string) {
	o.Line = v
}

// GetMatch returns the Match field value
func (o *SearchMatch) GetMatch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Match
}

// GetMatchOk returns a tuple with the Match field value
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetMatchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Match, true
}

// SetMatch sets field value
func (o *SearchMatch) SetMatch(v string) {
	o.Match = v
}

// GetContextBefore returns the ContextBefore field value if set, zero value otherwise.
func (o *SearchMatch) GetContextBefore() []string {
	if o == nil || IsNil(o.ContextBefore) {
		var ret []string
		return ret
	}
	return o.ContextBefore
}

// GetContextBeforeOk returns a tuple with the ContextBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetContextBeforeOk() ([]string, bool) {
	if o == nil || IsNil(o.ContextBefore) {
		return nil, false
	}
	return o.ContextBefore, true
}

// HasContextBefore returns a boolean if a field has been set.
func (o *SearchMatch) HasContextBefore() bool {
	if o != nil && !IsNil(o.ContextBefore) {
		return true
	}

	return false
}

// SetContextBefore gets a reference to the given []string and assigns it to the ContextBefore field.
func (o *SearchMatch) SetContextBefore(v []string) {
	o.ContextBefore = v
}

// GetContextAfter returns the ContextAfter field value if set, zero value otherwise.
func (o *SearchMatch) GetContextAfter() []string {
	if o == nil || IsNil(o.ContextAfter) {
		var ret []string
		return ret
	}
	return o.ContextAfter
}

// GetContextAfterOk returns a tuple with the ContextAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchMatch) GetContextAfterOk() ([]string, bool) {
	if o == nil || IsNil(o.ContextAfter) {
		return nil, false
	}
	return o.ContextAfter, true
}

// HasContextAfter returns a boolean if a field has been set.
func (o *SearchMatch) HasContextAfter() bool {
	if o != nil && !IsNil(o.ContextAfter) {
		return true
	}

	return false
}

// SetContextAfter gets a reference to the given []string and assigns it to the ContextAfter field.
func (o *SearchMatch) SetContextAfter(v []string) {
	o.ContextAfter = v
}

func (o SearchMatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File
	toSerialize["line_number"] = o.LineNumber
	toSerialize["column"] = o.Column
	toSerialize["line"] = o.Line
	toSerialize["match"] = o.Match
	if !IsNil(o.ContextBefore) {
		toSerialize["context_before"] = o.ContextBefore
	}
	if !IsNil(o.ContextAfter) {
		toSerialize["context_after"] = o.ContextAfter
	}
	return toSerialize, nil
}

func (o *SearchMatch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
		"line_number",
		"column",
		"line",
		"match",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchMatch := _SearchMatch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchMatch)

	if err != nil {
		return err
	}

	*o = SearchMatch(varSearchMatch)

	return err
}

type NullableSearchMatch struct {
	value *SearchMatch
	isSet bool
}

func (v NullableSearchMatch) Get() *SearchMatch {
	return v.value
}

func (v *NullableSearchMatch) Set(val *SearchMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchMatch(val *SearchMatch) *NullableSearchMatch {
	return &NullableSearchMatch{value: val, isSet: true}
}

func (v NullableSearchMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
