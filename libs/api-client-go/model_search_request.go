/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequest{}

// SearchRequest struct for SearchRequest
type SearchRequest struct {
	// Search query/pattern
	Query string `json:"query"`
	// Path to search in (default: \".\")
	Path *string `json:"path,omitempty"`
	// File types to include (e.g., [\"js\", \"ts\"])
	FileTypes []string `json:"file_types,omitempty"`
	// Include glob patterns
	IncludeGlobs []string `json:"include_globs,omitempty"`
	// Exclude glob patterns
	ExcludeGlobs []string `json:"exclude_globs,omitempty"`
	// Case sensitive search (default: true)
	CaseSensitive *bool `json:"case_sensitive,omitempty"`
	// Enable multiline matching
	Multiline *bool `json:"multiline,omitempty"`
	// Lines of context around matches
	Context *float32 `json:"context,omitempty"`
	// Return only match counts
	CountOnly *bool `json:"count_only,omitempty"`
	// Return only filenames with matches
	FilenamesOnly *bool `json:"filenames_only,omitempty"`
	// Return structured JSON output
	Json *bool `json:"json,omitempty"`
	// Maximum number of results
	MaxResults *float32 `json:"max_results,omitempty"`
	// Additional ripgrep arguments
	RgArgs []string `json:"rg_args,omitempty"`
}

type _SearchRequest SearchRequest

// NewSearchRequest instantiates a new SearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequest(query string) *SearchRequest {
	this := SearchRequest{}
	this.Query = query
	return &this
}

// NewSearchRequestWithDefaults instantiates a new SearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestWithDefaults() *SearchRequest {
	this := SearchRequest{}
	return &this
}

// GetQuery returns the Query field value
func (o *SearchRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SearchRequest) SetQuery(v string) {
	o.Query = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *SearchRequest) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *SearchRequest) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *SearchRequest) SetPath(v string) {
	o.Path = &v
}

// GetFileTypes returns the FileTypes field value if set, zero value otherwise.
func (o *SearchRequest) GetFileTypes() []string {
	if o == nil || IsNil(o.FileTypes) {
		var ret []string
		return ret
	}
	return o.FileTypes
}

// GetFileTypesOk returns a tuple with the FileTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetFileTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.FileTypes) {
		return nil, false
	}
	return o.FileTypes, true
}

// HasFileTypes returns a boolean if a field has been set.
func (o *SearchRequest) HasFileTypes() bool {
	if o != nil && !IsNil(o.FileTypes) {
		return true
	}

	return false
}

// SetFileTypes gets a reference to the given []string and assigns it to the FileTypes field.
func (o *SearchRequest) SetFileTypes(v []string) {
	o.FileTypes = v
}

// GetIncludeGlobs returns the IncludeGlobs field value if set, zero value otherwise.
func (o *SearchRequest) GetIncludeGlobs() []string {
	if o == nil || IsNil(o.IncludeGlobs) {
		var ret []string
		return ret
	}
	return o.IncludeGlobs
}

// GetIncludeGlobsOk returns a tuple with the IncludeGlobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetIncludeGlobsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeGlobs) {
		return nil, false
	}
	return o.IncludeGlobs, true
}

// HasIncludeGlobs returns a boolean if a field has been set.
func (o *SearchRequest) HasIncludeGlobs() bool {
	if o != nil && !IsNil(o.IncludeGlobs) {
		return true
	}

	return false
}

// SetIncludeGlobs gets a reference to the given []string and assigns it to the IncludeGlobs field.
func (o *SearchRequest) SetIncludeGlobs(v []string) {
	o.IncludeGlobs = v
}

// GetExcludeGlobs returns the ExcludeGlobs field value if set, zero value otherwise.
func (o *SearchRequest) GetExcludeGlobs() []string {
	if o == nil || IsNil(o.ExcludeGlobs) {
		var ret []string
		return ret
	}
	return o.ExcludeGlobs
}

// GetExcludeGlobsOk returns a tuple with the ExcludeGlobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetExcludeGlobsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeGlobs) {
		return nil, false
	}
	return o.ExcludeGlobs, true
}

// HasExcludeGlobs returns a boolean if a field has been set.
func (o *SearchRequest) HasExcludeGlobs() bool {
	if o != nil && !IsNil(o.ExcludeGlobs) {
		return true
	}

	return false
}

// SetExcludeGlobs gets a reference to the given []string and assigns it to the ExcludeGlobs field.
func (o *SearchRequest) SetExcludeGlobs(v []string) {
	o.ExcludeGlobs = v
}

// GetCaseSensitive returns the CaseSensitive field value if set, zero value otherwise.
func (o *SearchRequest) GetCaseSensitive() bool {
	if o == nil || IsNil(o.CaseSensitive) {
		var ret bool
		return ret
	}
	return *o.CaseSensitive
}

// GetCaseSensitiveOk returns a tuple with the CaseSensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetCaseSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseSensitive) {
		return nil, false
	}
	return o.CaseSensitive, true
}

// HasCaseSensitive returns a boolean if a field has been set.
func (o *SearchRequest) HasCaseSensitive() bool {
	if o != nil && !IsNil(o.CaseSensitive) {
		return true
	}

	return false
}

// SetCaseSensitive gets a reference to the given bool and assigns it to the CaseSensitive field.
func (o *SearchRequest) SetCaseSensitive(v bool) {
	o.CaseSensitive = &v
}

// GetMultiline returns the Multiline field value if set, zero value otherwise.
func (o *SearchRequest) GetMultiline() bool {
	if o == nil || IsNil(o.Multiline) {
		var ret bool
		return ret
	}
	return *o.Multiline
}

// GetMultilineOk returns a tuple with the Multiline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetMultilineOk() (*bool, bool) {
	if o == nil || IsNil(o.Multiline) {
		return nil, false
	}
	return o.Multiline, true
}

// HasMultiline returns a boolean if a field has been set.
func (o *SearchRequest) HasMultiline() bool {
	if o != nil && !IsNil(o.Multiline) {
		return true
	}

	return false
}

// SetMultiline gets a reference to the given bool and assigns it to the Multiline field.
func (o *SearchRequest) SetMultiline(v bool) {
	o.Multiline = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *SearchRequest) GetContext() float32 {
	if o == nil || IsNil(o.Context) {
		var ret float32
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetContextOk() (*float32, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *SearchRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given float32 and assigns it to the Context field.
func (o *SearchRequest) SetContext(v float32) {
	o.Context = &v
}

// GetCountOnly returns the CountOnly field value if set, zero value otherwise.
func (o *SearchRequest) GetCountOnly() bool {
	if o == nil || IsNil(o.CountOnly) {
		var ret bool
		return ret
	}
	return *o.CountOnly
}

// GetCountOnlyOk returns a tuple with the CountOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetCountOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CountOnly) {
		return nil, false
	}
	return o.CountOnly, true
}

// HasCountOnly returns a boolean if a field has been set.
func (o *SearchRequest) HasCountOnly() bool {
	if o != nil && !IsNil(o.CountOnly) {
		return true
	}

	return false
}

// SetCountOnly gets a reference to the given bool and assigns it to the CountOnly field.
func (o *SearchRequest) SetCountOnly(v bool) {
	o.CountOnly = &v
}

// GetFilenamesOnly returns the FilenamesOnly field value if set, zero value otherwise.
func (o *SearchRequest) GetFilenamesOnly() bool {
	if o == nil || IsNil(o.FilenamesOnly) {
		var ret bool
		return ret
	}
	return *o.FilenamesOnly
}

// GetFilenamesOnlyOk returns a tuple with the FilenamesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetFilenamesOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.FilenamesOnly) {
		return nil, false
	}
	return o.FilenamesOnly, true
}

// HasFilenamesOnly returns a boolean if a field has been set.
func (o *SearchRequest) HasFilenamesOnly() bool {
	if o != nil && !IsNil(o.FilenamesOnly) {
		return true
	}

	return false
}

// SetFilenamesOnly gets a reference to the given bool and assigns it to the FilenamesOnly field.
func (o *SearchRequest) SetFilenamesOnly(v bool) {
	o.FilenamesOnly = &v
}

// GetJson returns the Json field value if set, zero value otherwise.
func (o *SearchRequest) GetJson() bool {
	if o == nil || IsNil(o.Json) {
		var ret bool
		return ret
	}
	return *o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetJsonOk() (*bool, bool) {
	if o == nil || IsNil(o.Json) {
		return nil, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *SearchRequest) HasJson() bool {
	if o != nil && !IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given bool and assigns it to the Json field.
func (o *SearchRequest) SetJson(v bool) {
	o.Json = &v
}

// GetMaxResults returns the MaxResults field value if set, zero value otherwise.
func (o *SearchRequest) GetMaxResults() float32 {
	if o == nil || IsNil(o.MaxResults) {
		var ret float32
		return ret
	}
	return *o.MaxResults
}

// GetMaxResultsOk returns a tuple with the MaxResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetMaxResultsOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxResults) {
		return nil, false
	}
	return o.MaxResults, true
}

// HasMaxResults returns a boolean if a field has been set.
func (o *SearchRequest) HasMaxResults() bool {
	if o != nil && !IsNil(o.MaxResults) {
		return true
	}

	return false
}

// SetMaxResults gets a reference to the given float32 and assigns it to the MaxResults field.
func (o *SearchRequest) SetMaxResults(v float32) {
	o.MaxResults = &v
}

// GetRgArgs returns the RgArgs field value if set, zero value otherwise.
func (o *SearchRequest) GetRgArgs() []string {
	if o == nil || IsNil(o.RgArgs) {
		var ret []string
		return ret
	}
	return o.RgArgs
}

// GetRgArgsOk returns a tuple with the RgArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequest) GetRgArgsOk() ([]string, bool) {
	if o == nil || IsNil(o.RgArgs) {
		return nil, false
	}
	return o.RgArgs, true
}

// HasRgArgs returns a boolean if a field has been set.
func (o *SearchRequest) HasRgArgs() bool {
	if o != nil && !IsNil(o.RgArgs) {
		return true
	}

	return false
}

// SetRgArgs gets a reference to the given []string and assigns it to the RgArgs field.
func (o *SearchRequest) SetRgArgs(v []string) {
	o.RgArgs = v
}

func (o SearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.FileTypes) {
		toSerialize["file_types"] = o.FileTypes
	}
	if !IsNil(o.IncludeGlobs) {
		toSerialize["include_globs"] = o.IncludeGlobs
	}
	if !IsNil(o.ExcludeGlobs) {
		toSerialize["exclude_globs"] = o.ExcludeGlobs
	}
	if !IsNil(o.CaseSensitive) {
		toSerialize["case_sensitive"] = o.CaseSensitive
	}
	if !IsNil(o.Multiline) {
		toSerialize["multiline"] = o.Multiline
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.CountOnly) {
		toSerialize["count_only"] = o.CountOnly
	}
	if !IsNil(o.FilenamesOnly) {
		toSerialize["filenames_only"] = o.FilenamesOnly
	}
	if !IsNil(o.Json) {
		toSerialize["json"] = o.Json
	}
	if !IsNil(o.MaxResults) {
		toSerialize["max_results"] = o.MaxResults
	}
	if !IsNil(o.RgArgs) {
		toSerialize["rg_args"] = o.RgArgs
	}
	return toSerialize, nil
}

func (o *SearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchRequest := _SearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchRequest)

	if err != nil {
		return err
	}

	*o = SearchRequest(varSearchRequest)

	return err
}

type NullableSearchRequest struct {
	value *SearchRequest
	isSet bool
}

func (v NullableSearchRequest) Get() *SearchRequest {
	return v.value
}

func (v *NullableSearchRequest) Set(val *SearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequest(val *SearchRequest) *NullableSearchRequest {
	return &NullableSearchRequest{value: val, isSet: true}
}

func (v NullableSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
