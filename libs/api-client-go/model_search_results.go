/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResults{}

// SearchResults struct for SearchResults
type SearchResults struct {
	// Array of matches
	Matches []SearchMatch `json:"matches"`
	// Total number of matches
	TotalMatches float32 `json:"total_matches"`
	// Total number of files with matches
	TotalFiles float32 `json:"total_files"`
	// List of files with matches
	Files []string `json:"files,omitempty"`
	// Raw output from search tool
	RawOutput *string `json:"raw_output,omitempty"`
}

type _SearchResults SearchResults

// NewSearchResults instantiates a new SearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResults(matches []SearchMatch, totalMatches float32, totalFiles float32) *SearchResults {
	this := SearchResults{}
	this.Matches = matches
	this.TotalMatches = totalMatches
	this.TotalFiles = totalFiles
	return &this
}

// NewSearchResultsWithDefaults instantiates a new SearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultsWithDefaults() *SearchResults {
	this := SearchResults{}
	return &this
}

// GetMatches returns the Matches field value
func (o *SearchResults) GetMatches() []SearchMatch {
	if o == nil {
		var ret []SearchMatch
		return ret
	}

	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetMatchesOk() ([]SearchMatch, bool) {
	if o == nil {
		return nil, false
	}
	return o.Matches, true
}

// SetMatches sets field value
func (o *SearchResults) SetMatches(v []SearchMatch) {
	o.Matches = v
}

// GetTotalMatches returns the TotalMatches field value
func (o *SearchResults) GetTotalMatches() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalMatches
}

// GetTotalMatchesOk returns a tuple with the TotalMatches field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetTotalMatchesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalMatches, true
}

// SetTotalMatches sets field value
func (o *SearchResults) SetTotalMatches(v float32) {
	o.TotalMatches = v
}

// GetTotalFiles returns the TotalFiles field value
func (o *SearchResults) GetTotalFiles() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.TotalFiles
}

// GetTotalFilesOk returns a tuple with the TotalFiles field value
// and a boolean to check if the value has been set.
func (o *SearchResults) GetTotalFilesOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFiles, true
}

// SetTotalFiles sets field value
func (o *SearchResults) SetTotalFiles(v float32) {
	o.TotalFiles = v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *SearchResults) GetFiles() []string {
	if o == nil || IsNil(o.Files) {
		var ret []string
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *SearchResults) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []string and assigns it to the Files field.
func (o *SearchResults) SetFiles(v []string) {
	o.Files = v
}

// GetRawOutput returns the RawOutput field value if set, zero value otherwise.
func (o *SearchResults) GetRawOutput() string {
	if o == nil || IsNil(o.RawOutput) {
		var ret string
		return ret
	}
	return *o.RawOutput
}

// GetRawOutputOk returns a tuple with the RawOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResults) GetRawOutputOk() (*string, bool) {
	if o == nil || IsNil(o.RawOutput) {
		return nil, false
	}
	return o.RawOutput, true
}

// HasRawOutput returns a boolean if a field has been set.
func (o *SearchResults) HasRawOutput() bool {
	if o != nil && !IsNil(o.RawOutput) {
		return true
	}

	return false
}

// SetRawOutput gets a reference to the given string and assigns it to the RawOutput field.
func (o *SearchResults) SetRawOutput(v string) {
	o.RawOutput = &v
}

func (o SearchResults) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["matches"] = o.Matches
	toSerialize["total_matches"] = o.TotalMatches
	toSerialize["total_files"] = o.TotalFiles
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.RawOutput) {
		toSerialize["raw_output"] = o.RawOutput
	}
	return toSerialize, nil
}

func (o *SearchResults) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"matches",
		"total_matches",
		"total_files",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchResults := _SearchResults{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchResults)

	if err != nil {
		return err
	}

	*o = SearchResults(varSearchResults)

	return err
}

type NullableSearchResults struct {
	value *SearchResults
	isSet bool
}

func (v NullableSearchResults) Get() *SearchResults {
	return v.value
}

func (v *NullableSearchResults) Set(val *SearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResults(val *SearchResults) *NullableSearchResults {
	return &NullableSearchResults{value: val, isSet: true}
}

func (v NullableSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
