/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SessionCommandLogsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionCommandLogsResponse{}

// SessionCommandLogsResponse struct for SessionCommandLogsResponse
type SessionCommandLogsResponse struct {
	// The stdout of the command
	Stdout string `json:"stdout"`
	// The stderr of the command
	Stderr string `json:"stderr"`
}

type _SessionCommandLogsResponse SessionCommandLogsResponse

// NewSessionCommandLogsResponse instantiates a new SessionCommandLogsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionCommandLogsResponse(stdout string, stderr string) *SessionCommandLogsResponse {
	this := SessionCommandLogsResponse{}
	this.Stdout = stdout
	this.Stderr = stderr
	return &this
}

// NewSessionCommandLogsResponseWithDefaults instantiates a new SessionCommandLogsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionCommandLogsResponseWithDefaults() *SessionCommandLogsResponse {
	this := SessionCommandLogsResponse{}
	return &this
}

// GetStdout returns the Stdout field value
func (o *SessionCommandLogsResponse) GetStdout() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stdout
}

// GetStdoutOk returns a tuple with the Stdout field value
// and a boolean to check if the value has been set.
func (o *SessionCommandLogsResponse) GetStdoutOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stdout, true
}

// SetStdout sets field value
func (o *SessionCommandLogsResponse) SetStdout(v string) {
	o.Stdout = v
}

// GetStderr returns the Stderr field value
func (o *SessionCommandLogsResponse) GetStderr() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Stderr
}

// GetStderrOk returns a tuple with the Stderr field value
// and a boolean to check if the value has been set.
func (o *SessionCommandLogsResponse) GetStderrOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stderr, true
}

// SetStderr sets field value
func (o *SessionCommandLogsResponse) SetStderr(v string) {
	o.Stderr = v
}

func (o SessionCommandLogsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionCommandLogsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stdout"] = o.Stdout
	toSerialize["stderr"] = o.Stderr
	return toSerialize, nil
}

func (o *SessionCommandLogsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stdout",
		"stderr",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSessionCommandLogsResponse := _SessionCommandLogsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSessionCommandLogsResponse)

	if err != nil {
		return err
	}

	*o = SessionCommandLogsResponse(varSessionCommandLogsResponse)

	return err
}

type NullableSessionCommandLogsResponse struct {
	value *SessionCommandLogsResponse
	isSet bool
}

func (v NullableSessionCommandLogsResponse) Get() *SessionCommandLogsResponse {
	return v.value
}

func (v *NullableSessionCommandLogsResponse) Set(val *SessionCommandLogsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionCommandLogsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionCommandLogsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionCommandLogsResponse(val *SessionCommandLogsResponse) *NullableSessionCommandLogsResponse {
	return &NullableSessionCommandLogsResponse{value: val, isSet: true}
}

func (v NullableSessionCommandLogsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionCommandLogsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
