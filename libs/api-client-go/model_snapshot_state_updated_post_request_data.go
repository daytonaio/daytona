/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the SnapshotStateUpdatedPostRequestData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotStateUpdatedPostRequestData{}

// SnapshotStateUpdatedPostRequestData struct for SnapshotStateUpdatedPostRequestData
type SnapshotStateUpdatedPostRequestData struct {
	Snapshot *SnapshotStateUpdatedPostRequestDataSnapshot `json:"snapshot,omitempty"`
	OldState *string                                      `json:"oldState,omitempty"`
	NewState *string                                      `json:"newState,omitempty"`
}

// NewSnapshotStateUpdatedPostRequestData instantiates a new SnapshotStateUpdatedPostRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotStateUpdatedPostRequestData() *SnapshotStateUpdatedPostRequestData {
	this := SnapshotStateUpdatedPostRequestData{}
	return &this
}

// NewSnapshotStateUpdatedPostRequestDataWithDefaults instantiates a new SnapshotStateUpdatedPostRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotStateUpdatedPostRequestDataWithDefaults() *SnapshotStateUpdatedPostRequestData {
	this := SnapshotStateUpdatedPostRequestData{}
	return &this
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *SnapshotStateUpdatedPostRequestData) GetSnapshot() SnapshotStateUpdatedPostRequestDataSnapshot {
	if o == nil || IsNil(o.Snapshot) {
		var ret SnapshotStateUpdatedPostRequestDataSnapshot
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStateUpdatedPostRequestData) GetSnapshotOk() (*SnapshotStateUpdatedPostRequestDataSnapshot, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *SnapshotStateUpdatedPostRequestData) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given SnapshotStateUpdatedPostRequestDataSnapshot and assigns it to the Snapshot field.
func (o *SnapshotStateUpdatedPostRequestData) SetSnapshot(v SnapshotStateUpdatedPostRequestDataSnapshot) {
	o.Snapshot = &v
}

// GetOldState returns the OldState field value if set, zero value otherwise.
func (o *SnapshotStateUpdatedPostRequestData) GetOldState() string {
	if o == nil || IsNil(o.OldState) {
		var ret string
		return ret
	}
	return *o.OldState
}

// GetOldStateOk returns a tuple with the OldState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStateUpdatedPostRequestData) GetOldStateOk() (*string, bool) {
	if o == nil || IsNil(o.OldState) {
		return nil, false
	}
	return o.OldState, true
}

// HasOldState returns a boolean if a field has been set.
func (o *SnapshotStateUpdatedPostRequestData) HasOldState() bool {
	if o != nil && !IsNil(o.OldState) {
		return true
	}

	return false
}

// SetOldState gets a reference to the given string and assigns it to the OldState field.
func (o *SnapshotStateUpdatedPostRequestData) SetOldState(v string) {
	o.OldState = &v
}

// GetNewState returns the NewState field value if set, zero value otherwise.
func (o *SnapshotStateUpdatedPostRequestData) GetNewState() string {
	if o == nil || IsNil(o.NewState) {
		var ret string
		return ret
	}
	return *o.NewState
}

// GetNewStateOk returns a tuple with the NewState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotStateUpdatedPostRequestData) GetNewStateOk() (*string, bool) {
	if o == nil || IsNil(o.NewState) {
		return nil, false
	}
	return o.NewState, true
}

// HasNewState returns a boolean if a field has been set.
func (o *SnapshotStateUpdatedPostRequestData) HasNewState() bool {
	if o != nil && !IsNil(o.NewState) {
		return true
	}

	return false
}

// SetNewState gets a reference to the given string and assigns it to the NewState field.
func (o *SnapshotStateUpdatedPostRequestData) SetNewState(v string) {
	o.NewState = &v
}

func (o SnapshotStateUpdatedPostRequestData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotStateUpdatedPostRequestData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}
	if !IsNil(o.OldState) {
		toSerialize["oldState"] = o.OldState
	}
	if !IsNil(o.NewState) {
		toSerialize["newState"] = o.NewState
	}
	return toSerialize, nil
}

type NullableSnapshotStateUpdatedPostRequestData struct {
	value *SnapshotStateUpdatedPostRequestData
	isSet bool
}

func (v NullableSnapshotStateUpdatedPostRequestData) Get() *SnapshotStateUpdatedPostRequestData {
	return v.value
}

func (v *NullableSnapshotStateUpdatedPostRequestData) Set(val *SnapshotStateUpdatedPostRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotStateUpdatedPostRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotStateUpdatedPostRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotStateUpdatedPostRequestData(val *SnapshotStateUpdatedPostRequestData) *NullableSnapshotStateUpdatedPostRequestData {
	return &NullableSnapshotStateUpdatedPostRequestData{value: val, isSet: true}
}

func (v NullableSnapshotStateUpdatedPostRequestData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotStateUpdatedPostRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
