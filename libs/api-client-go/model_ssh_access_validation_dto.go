/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// checks if the SshAccessValidationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SshAccessValidationDto{}

// SshAccessValidationDto struct for SshAccessValidationDto
type SshAccessValidationDto struct {
	// Whether the SSH access token is valid
	Valid bool `json:"valid"`
	// ID of the sandbox this SSH access is for
	SandboxId            string `json:"sandboxId"`
	AdditionalProperties map[string]interface{}
}

type _SshAccessValidationDto SshAccessValidationDto

// NewSshAccessValidationDto instantiates a new SshAccessValidationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSshAccessValidationDto(valid bool, sandboxId string) *SshAccessValidationDto {
	this := SshAccessValidationDto{}
	this.Valid = valid
	this.SandboxId = sandboxId
	return &this
}

// NewSshAccessValidationDtoWithDefaults instantiates a new SshAccessValidationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshAccessValidationDtoWithDefaults() *SshAccessValidationDto {
	this := SshAccessValidationDto{}
	return &this
}

// GetValid returns the Valid field value
func (o *SshAccessValidationDto) GetValid() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Valid
}

// GetValidOk returns a tuple with the Valid field value
// and a boolean to check if the value has been set.
func (o *SshAccessValidationDto) GetValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Valid, true
}

// SetValid sets field value
func (o *SshAccessValidationDto) SetValid(v bool) {
	o.Valid = v
}

// GetSandboxId returns the SandboxId field value
func (o *SshAccessValidationDto) GetSandboxId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SandboxId
}

// GetSandboxIdOk returns a tuple with the SandboxId field value
// and a boolean to check if the value has been set.
func (o *SshAccessValidationDto) GetSandboxIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SandboxId, true
}

// SetSandboxId sets field value
func (o *SshAccessValidationDto) SetSandboxId(v string) {
	o.SandboxId = v
}

func (o SshAccessValidationDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SshAccessValidationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["valid"] = o.Valid
	toSerialize["sandboxId"] = o.SandboxId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SshAccessValidationDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"valid",
		"sandboxId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSshAccessValidationDto := _SshAccessValidationDto{}

	err = json.Unmarshal(data, &varSshAccessValidationDto)

	if err != nil {
		return err
	}

	*o = SshAccessValidationDto(varSshAccessValidationDto)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "valid")
		delete(additionalProperties, "sandboxId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSshAccessValidationDto struct {
	value *SshAccessValidationDto
	isSet bool
}

func (v NullableSshAccessValidationDto) Get() *SshAccessValidationDto {
	return v.value
}

func (v *NullableSshAccessValidationDto) Set(val *SshAccessValidationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSshAccessValidationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSshAccessValidationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSshAccessValidationDto(val *SshAccessValidationDto) *NullableSshAccessValidationDto {
	return &NullableSshAccessValidationDto{value: val, isSet: true}
}

func (v NullableSshAccessValidationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSshAccessValidationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
