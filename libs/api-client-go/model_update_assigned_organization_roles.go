/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateAssignedOrganizationRoles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAssignedOrganizationRoles{}

// UpdateAssignedOrganizationRoles struct for UpdateAssignedOrganizationRoles
type UpdateAssignedOrganizationRoles struct {
	// Array of role IDs
	RoleIds []string `json:"roleIds"`
}

type _UpdateAssignedOrganizationRoles UpdateAssignedOrganizationRoles

// NewUpdateAssignedOrganizationRoles instantiates a new UpdateAssignedOrganizationRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAssignedOrganizationRoles(roleIds []string) *UpdateAssignedOrganizationRoles {
	this := UpdateAssignedOrganizationRoles{}
	this.RoleIds = roleIds
	return &this
}

// NewUpdateAssignedOrganizationRolesWithDefaults instantiates a new UpdateAssignedOrganizationRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAssignedOrganizationRolesWithDefaults() *UpdateAssignedOrganizationRoles {
	this := UpdateAssignedOrganizationRoles{}
	return &this
}

// GetRoleIds returns the RoleIds field value
func (o *UpdateAssignedOrganizationRoles) GetRoleIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RoleIds
}

// GetRoleIdsOk returns a tuple with the RoleIds field value
// and a boolean to check if the value has been set.
func (o *UpdateAssignedOrganizationRoles) GetRoleIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleIds, true
}

// SetRoleIds sets field value
func (o *UpdateAssignedOrganizationRoles) SetRoleIds(v []string) {
	o.RoleIds = v
}

func (o UpdateAssignedOrganizationRoles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAssignedOrganizationRoles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["roleIds"] = o.RoleIds
	return toSerialize, nil
}

func (o *UpdateAssignedOrganizationRoles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"roleIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAssignedOrganizationRoles := _UpdateAssignedOrganizationRoles{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAssignedOrganizationRoles)

	if err != nil {
		return err
	}

	*o = UpdateAssignedOrganizationRoles(varUpdateAssignedOrganizationRoles)

	return err
}

type NullableUpdateAssignedOrganizationRoles struct {
	value *UpdateAssignedOrganizationRoles
	isSet bool
}

func (v NullableUpdateAssignedOrganizationRoles) Get() *UpdateAssignedOrganizationRoles {
	return v.value
}

func (v *NullableUpdateAssignedOrganizationRoles) Set(val *UpdateAssignedOrganizationRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAssignedOrganizationRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAssignedOrganizationRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAssignedOrganizationRoles(val *UpdateAssignedOrganizationRoles) *NullableUpdateAssignedOrganizationRoles {
	return &NullableUpdateAssignedOrganizationRoles{value: val, isSet: true}
}

func (v NullableUpdateAssignedOrganizationRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAssignedOrganizationRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
