/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
	"os"
)

// checks if the UploadFileDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadFileDto{}

// UploadFileDto struct for UploadFileDto
type UploadFileDto struct {
	File *os.File `json:"file"`
	Path string   `json:"path"`
}

type _UploadFileDto UploadFileDto

// NewUploadFileDto instantiates a new UploadFileDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFileDto(file *os.File, path string) *UploadFileDto {
	this := UploadFileDto{}
	this.File = file
	this.Path = path
	return &this
}

// NewUploadFileDtoWithDefaults instantiates a new UploadFileDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFileDtoWithDefaults() *UploadFileDto {
	this := UploadFileDto{}
	return &this
}

// GetFile returns the File field value
func (o *UploadFileDto) GetFile() *os.File {
	if o == nil {
		var ret *os.File
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *UploadFileDto) GetFileOk() (**os.File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *UploadFileDto) SetFile(v *os.File) {
	o.File = v
}

// GetPath returns the Path field value
func (o *UploadFileDto) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *UploadFileDto) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *UploadFileDto) SetPath(v string) {
	o.Path = v
}

func (o UploadFileDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadFileDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file"] = o.File
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *UploadFileDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadFileDto := _UploadFileDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadFileDto)

	if err != nil {
		return err
	}

	*o = UploadFileDto(varUploadFileDto)

	return err
}

type NullableUploadFileDto struct {
	value *UploadFileDto
	isSet bool
}

func (v NullableUploadFileDto) Get() *UploadFileDto {
	return v.value
}

func (v *NullableUploadFileDto) Set(val *UploadFileDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileDto(val *UploadFileDto) *NullableUploadFileDto {
	return &NullableUploadFileDto{value: val, isSet: true}
}

func (v NullableUploadFileDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
