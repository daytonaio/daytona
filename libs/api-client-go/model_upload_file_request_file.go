/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"encoding/json"
	"fmt"
	"os"
)

// UploadFileRequestFile - File to upload. Supports file streaming and various file object types.
type UploadFileRequestFile struct {
	OsFile            *os.File
	MapmapOfStringAny *map[string]interface{}
}

// OsFileAsUploadFileRequestFile is a convenience function that returns os.File wrapped in UploadFileRequestFile
func OsFileAsUploadFileRequestFile(v *os.File) UploadFileRequestFile {
	return UploadFileRequestFile{
		OsFile: v,
	}
}

// MapmapOfStringAnyAsUploadFileRequestFile is a convenience function that returns map[string]interface{} wrapped in UploadFileRequestFile
func MapmapOfStringAnyAsUploadFileRequestFile(v *map[string]interface{}) UploadFileRequestFile {
	return UploadFileRequestFile{
		MapmapOfStringAny: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UploadFileRequestFile) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into *OsFile
	err = newStrictDecoder(data).Decode(&dst.OsFile)
	if err == nil {
		jsonOsFile, _ := json.Marshal(dst.OsFile)
		if string(jsonOsFile) == "{}" { // empty struct
			dst.OsFile = nil
		} else {
			match++
		}
	} else {
		dst.OsFile = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OsFile = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(UploadFileRequestFile)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(UploadFileRequestFile)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UploadFileRequestFile) MarshalJSON() ([]byte, error) {
	if src.OsFile != nil {
		return json.Marshal(&src.OsFile)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UploadFileRequestFile) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.OsFile != nil {
		return obj.OsFile
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj UploadFileRequestFile) GetActualInstanceValue() interface{} {
	if obj.OsFile != nil {
		return *obj.OsFile
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableUploadFileRequestFile struct {
	value *UploadFileRequestFile
	isSet bool
}

func (v NullableUploadFileRequestFile) Get() *UploadFileRequestFile {
	return v.value
}

func (v *NullableUploadFileRequestFile) Set(val *UploadFileRequestFile) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFileRequestFile) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFileRequestFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFileRequestFile(val *UploadFileRequestFile) *NullableUploadFileRequestFile {
	return &NullableUploadFileRequestFile{value: val, isSet: true}
}

func (v NullableUploadFileRequestFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFileRequestFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
