/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the UserHomeDirResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserHomeDirResponse{}

// UserHomeDirResponse struct for UserHomeDirResponse
type UserHomeDirResponse struct {
	Dir *string `json:"dir,omitempty"`
}

// NewUserHomeDirResponse instantiates a new UserHomeDirResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserHomeDirResponse() *UserHomeDirResponse {
	this := UserHomeDirResponse{}
	return &this
}

// NewUserHomeDirResponseWithDefaults instantiates a new UserHomeDirResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserHomeDirResponseWithDefaults() *UserHomeDirResponse {
	this := UserHomeDirResponse{}
	return &this
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *UserHomeDirResponse) GetDir() string {
	if o == nil || IsNil(o.Dir) {
		var ret string
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserHomeDirResponse) GetDirOk() (*string, bool) {
	if o == nil || IsNil(o.Dir) {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *UserHomeDirResponse) HasDir() bool {
	if o != nil && !IsNil(o.Dir) {
		return true
	}

	return false
}

// SetDir gets a reference to the given string and assigns it to the Dir field.
func (o *UserHomeDirResponse) SetDir(v string) {
	o.Dir = &v
}

func (o UserHomeDirResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserHomeDirResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dir) {
		toSerialize["dir"] = o.Dir
	}
	return toSerialize, nil
}

type NullableUserHomeDirResponse struct {
	value *UserHomeDirResponse
	isSet bool
}

func (v NullableUserHomeDirResponse) Get() *UserHomeDirResponse {
	return v.value
}

func (v *NullableUserHomeDirResponse) Set(val *UserHomeDirResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUserHomeDirResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUserHomeDirResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserHomeDirResponse(val *UserHomeDirResponse) *NullableUserHomeDirResponse {
	return &NullableUserHomeDirResponse{value: val, isSet: true}
}

func (v NullableUserHomeDirResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserHomeDirResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
