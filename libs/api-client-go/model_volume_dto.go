/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the VolumeDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeDto{}

// VolumeDto struct for VolumeDto
type VolumeDto struct {
	// Volume ID
	Id string `json:"id"`
	// Volume name
	Name string `json:"name"`
	// Organization ID
	OrganizationId string `json:"organizationId"`
	// Volume state
	State VolumeState `json:"state"`
	// Creation timestamp
	CreatedAt string `json:"createdAt"`
	// Last update timestamp
	UpdatedAt string `json:"updatedAt"`
	// Last used timestamp
	LastUsedAt NullableString `json:"lastUsedAt"`
	// The error reason of the volume
	ErrorReason NullableString `json:"errorReason"`
}

type _VolumeDto VolumeDto

// NewVolumeDto instantiates a new VolumeDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeDto(id string, name string, organizationId string, state VolumeState, createdAt string, updatedAt string, lastUsedAt NullableString, errorReason NullableString) *VolumeDto {
	this := VolumeDto{}
	this.Id = id
	this.Name = name
	this.OrganizationId = organizationId
	this.State = state
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.LastUsedAt = lastUsedAt
	this.ErrorReason = errorReason
	return &this
}

// NewVolumeDtoWithDefaults instantiates a new VolumeDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeDtoWithDefaults() *VolumeDto {
	this := VolumeDto{}
	return &this
}

// GetId returns the Id field value
func (o *VolumeDto) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VolumeDto) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VolumeDto) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VolumeDto) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *VolumeDto) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *VolumeDto) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetState returns the State field value
func (o *VolumeDto) GetState() VolumeState {
	if o == nil {
		var ret VolumeState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetStateOk() (*VolumeState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *VolumeDto) SetState(v VolumeState) {
	o.State = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VolumeDto) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VolumeDto) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *VolumeDto) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *VolumeDto) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *VolumeDto) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetLastUsedAt returns the LastUsedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VolumeDto) GetLastUsedAt() string {
	if o == nil || o.LastUsedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.LastUsedAt.Get()
}

// GetLastUsedAtOk returns a tuple with the LastUsedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeDto) GetLastUsedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUsedAt.Get(), o.LastUsedAt.IsSet()
}

// SetLastUsedAt sets field value
func (o *VolumeDto) SetLastUsedAt(v string) {
	o.LastUsedAt.Set(&v)
}

// GetErrorReason returns the ErrorReason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VolumeDto) GetErrorReason() string {
	if o == nil || o.ErrorReason.Get() == nil {
		var ret string
		return ret
	}

	return *o.ErrorReason.Get()
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeDto) GetErrorReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorReason.Get(), o.ErrorReason.IsSet()
}

// SetErrorReason sets field value
func (o *VolumeDto) SetErrorReason(v string) {
	o.ErrorReason.Set(&v)
}

func (o VolumeDto) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["organizationId"] = o.OrganizationId
	toSerialize["state"] = o.State
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["lastUsedAt"] = o.LastUsedAt.Get()
	toSerialize["errorReason"] = o.ErrorReason.Get()
	return toSerialize, nil
}

func (o *VolumeDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"organizationId",
		"state",
		"createdAt",
		"updatedAt",
		"lastUsedAt",
		"errorReason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeDto := _VolumeDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeDto)

	if err != nil {
		return err
	}

	*o = VolumeDto(varVolumeDto)

	return err
}

type NullableVolumeDto struct {
	value *VolumeDto
	isSet bool
}

func (v NullableVolumeDto) Get() *VolumeDto {
	return v.value
}

func (v *NullableVolumeDto) Set(val *VolumeDto) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeDto) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeDto(val *VolumeDto) *NullableVolumeDto {
	return &NullableVolumeDto{value: val, isSet: true}
}

func (v NullableVolumeDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
