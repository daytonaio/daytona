/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WindowsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WindowsResponse{}

// WindowsResponse struct for WindowsResponse
type WindowsResponse struct {
	// Array of window information for all visible windows
	Windows []map[string]interface{} `json:"windows"`
	// The total number of windows found
	Count float32 `json:"count"`
}

type _WindowsResponse WindowsResponse

// NewWindowsResponse instantiates a new WindowsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowsResponse(windows []map[string]interface{}, count float32) *WindowsResponse {
	this := WindowsResponse{}
	this.Windows = windows
	this.Count = count
	return &this
}

// NewWindowsResponseWithDefaults instantiates a new WindowsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowsResponseWithDefaults() *WindowsResponse {
	this := WindowsResponse{}
	return &this
}

// GetWindows returns the Windows field value
func (o *WindowsResponse) GetWindows() []map[string]interface{} {
	if o == nil {
		var ret []map[string]interface{}
		return ret
	}

	return o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value
// and a boolean to check if the value has been set.
func (o *WindowsResponse) GetWindowsOk() ([]map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Windows, true
}

// SetWindows sets field value
func (o *WindowsResponse) SetWindows(v []map[string]interface{}) {
	o.Windows = v
}

// GetCount returns the Count field value
func (o *WindowsResponse) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *WindowsResponse) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *WindowsResponse) SetCount(v float32) {
	o.Count = v
}

func (o WindowsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WindowsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["windows"] = o.Windows
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *WindowsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"windows",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWindowsResponse := _WindowsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWindowsResponse)

	if err != nil {
		return err
	}

	*o = WindowsResponse(varWindowsResponse)

	return err
}

type NullableWindowsResponse struct {
	value *WindowsResponse
	isSet bool
}

func (v NullableWindowsResponse) Get() *WindowsResponse {
	return v.value
}

func (v *NullableWindowsResponse) Set(val *WindowsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsResponse(val *WindowsResponse) *NullableWindowsResponse {
	return &NullableWindowsResponse{value: val, isSet: true}
}

func (v NullableWindowsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
