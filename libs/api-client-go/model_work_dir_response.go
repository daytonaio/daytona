/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the WorkDirResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkDirResponse{}

// WorkDirResponse struct for WorkDirResponse
type WorkDirResponse struct {
	Dir *string `json:"dir,omitempty"`
}

// NewWorkDirResponse instantiates a new WorkDirResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkDirResponse() *WorkDirResponse {
	this := WorkDirResponse{}
	return &this
}

// NewWorkDirResponseWithDefaults instantiates a new WorkDirResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkDirResponseWithDefaults() *WorkDirResponse {
	this := WorkDirResponse{}
	return &this
}

// GetDir returns the Dir field value if set, zero value otherwise.
func (o *WorkDirResponse) GetDir() string {
	if o == nil || IsNil(o.Dir) {
		var ret string
		return ret
	}
	return *o.Dir
}

// GetDirOk returns a tuple with the Dir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkDirResponse) GetDirOk() (*string, bool) {
	if o == nil || IsNil(o.Dir) {
		return nil, false
	}
	return o.Dir, true
}

// HasDir returns a boolean if a field has been set.
func (o *WorkDirResponse) HasDir() bool {
	if o != nil && !IsNil(o.Dir) {
		return true
	}

	return false
}

// SetDir gets a reference to the given string and assigns it to the Dir field.
func (o *WorkDirResponse) SetDir(v string) {
	o.Dir = &v
}

func (o WorkDirResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkDirResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dir) {
		toSerialize["dir"] = o.Dir
	}
	return toSerialize, nil
}

type NullableWorkDirResponse struct {
	value *WorkDirResponse
	isSet bool
}

func (v NullableWorkDirResponse) Get() *WorkDirResponse {
	return v.value
}

func (v *NullableWorkDirResponse) Set(val *WorkDirResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkDirResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkDirResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkDirResponse(val *WorkDirResponse) *NullableWorkDirResponse {
	return &NullableWorkDirResponse{value: val, isSet: true}
}

func (v NullableWorkDirResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkDirResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
