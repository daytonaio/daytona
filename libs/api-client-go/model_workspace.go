/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Workspace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workspace{}

// Workspace struct for Workspace
type Workspace struct {
	// The ID of the workspace
	Id string `json:"id"`
	// The name of the workspace
	// Deprecated
	Name string `json:"name"`
	// The organization ID of the workspace
	OrganizationId string `json:"organizationId"`
	// The image used for the workspace
	Image *string `json:"image,omitempty"`
	// The user associated with the project
	User string `json:"user"`
	// Environment variables for the workspace
	Env map[string]string `json:"env"`
	// Labels for the workspace
	Labels map[string]string `json:"labels"`
	// Whether the workspace http preview is public
	Public bool `json:"public"`
	// The target environment for the workspace
	Target string `json:"target"`
	// Additional information about the workspace
	Info *WorkspaceInfo `json:"info,omitempty"`
	// The CPU quota for the workspace
	Cpu *float32 `json:"cpu,omitempty"`
	// The GPU quota for the workspace
	Gpu *float32 `json:"gpu,omitempty"`
	// The memory quota for the workspace
	Memory *float32 `json:"memory,omitempty"`
	// The disk quota for the workspace
	Disk *float32 `json:"disk,omitempty"`
	// The state of the workspace
	State *WorkspaceState `json:"state,omitempty"`
	// The error reason of the workspace
	ErrorReason *string `json:"errorReason,omitempty"`
	// The state of the snapshot
	SnapshotState *string `json:"snapshotState,omitempty"`
	// The creation timestamp of the last snapshot
	SnapshotCreatedAt *string `json:"snapshotCreatedAt,omitempty"`
	// Auto-stop interval in minutes (0 means disabled)
	AutoStopInterval *float32 `json:"autoStopInterval,omitempty"`
	// Auto-archive interval in minutes
	AutoArchiveInterval *float32 `json:"autoArchiveInterval,omitempty"`
	// Array of volumes attached to the workspace
	Volumes []WorkspaceVolume `json:"volumes,omitempty"`
}

type _Workspace Workspace

// NewWorkspace instantiates a new Workspace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspace(id string, name string, organizationId string, user string, env map[string]string, labels map[string]string, public bool, target string) *Workspace {
	this := Workspace{}
	this.Id = id
	this.Name = name
	this.OrganizationId = organizationId
	this.User = user
	this.Env = env
	this.Labels = labels
	this.Public = public
	this.Target = target
	return &this
}

// NewWorkspaceWithDefaults instantiates a new Workspace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceWithDefaults() *Workspace {
	this := Workspace{}
	var name string = ""
	this.Name = name
	return &this
}

// GetId returns the Id field value
func (o *Workspace) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Workspace) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
// Deprecated
func (o *Workspace) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *Workspace) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
// Deprecated
func (o *Workspace) SetName(v string) {
	o.Name = v
}

// GetOrganizationId returns the OrganizationId field value
func (o *Workspace) GetOrganizationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetOrganizationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrganizationId, true
}

// SetOrganizationId sets field value
func (o *Workspace) SetOrganizationId(v string) {
	o.OrganizationId = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *Workspace) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *Workspace) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *Workspace) SetImage(v string) {
	o.Image = &v
}

// GetUser returns the User field value
func (o *Workspace) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Workspace) SetUser(v string) {
	o.User = v
}

// GetEnv returns the Env field value
func (o *Workspace) GetEnv() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetEnvOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Env, true
}

// SetEnv sets field value
func (o *Workspace) SetEnv(v map[string]string) {
	o.Env = v
}

// GetLabels returns the Labels field value
func (o *Workspace) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *Workspace) SetLabels(v map[string]string) {
	o.Labels = v
}

// GetPublic returns the Public field value
func (o *Workspace) GetPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Public
}

// GetPublicOk returns a tuple with the Public field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Public, true
}

// SetPublic sets field value
func (o *Workspace) SetPublic(v bool) {
	o.Public = v
}

// GetTarget returns the Target field value
func (o *Workspace) GetTarget() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *Workspace) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *Workspace) SetTarget(v string) {
	o.Target = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *Workspace) GetInfo() WorkspaceInfo {
	if o == nil || IsNil(o.Info) {
		var ret WorkspaceInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetInfoOk() (*WorkspaceInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *Workspace) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given WorkspaceInfo and assigns it to the Info field.
func (o *Workspace) SetInfo(v WorkspaceInfo) {
	o.Info = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *Workspace) GetCpu() float32 {
	if o == nil || IsNil(o.Cpu) {
		var ret float32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetCpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *Workspace) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given float32 and assigns it to the Cpu field.
func (o *Workspace) SetCpu(v float32) {
	o.Cpu = &v
}

// GetGpu returns the Gpu field value if set, zero value otherwise.
func (o *Workspace) GetGpu() float32 {
	if o == nil || IsNil(o.Gpu) {
		var ret float32
		return ret
	}
	return *o.Gpu
}

// GetGpuOk returns a tuple with the Gpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetGpuOk() (*float32, bool) {
	if o == nil || IsNil(o.Gpu) {
		return nil, false
	}
	return o.Gpu, true
}

// HasGpu returns a boolean if a field has been set.
func (o *Workspace) HasGpu() bool {
	if o != nil && !IsNil(o.Gpu) {
		return true
	}

	return false
}

// SetGpu gets a reference to the given float32 and assigns it to the Gpu field.
func (o *Workspace) SetGpu(v float32) {
	o.Gpu = &v
}

// GetMemory returns the Memory field value if set, zero value otherwise.
func (o *Workspace) GetMemory() float32 {
	if o == nil || IsNil(o.Memory) {
		var ret float32
		return ret
	}
	return *o.Memory
}

// GetMemoryOk returns a tuple with the Memory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetMemoryOk() (*float32, bool) {
	if o == nil || IsNil(o.Memory) {
		return nil, false
	}
	return o.Memory, true
}

// HasMemory returns a boolean if a field has been set.
func (o *Workspace) HasMemory() bool {
	if o != nil && !IsNil(o.Memory) {
		return true
	}

	return false
}

// SetMemory gets a reference to the given float32 and assigns it to the Memory field.
func (o *Workspace) SetMemory(v float32) {
	o.Memory = &v
}

// GetDisk returns the Disk field value if set, zero value otherwise.
func (o *Workspace) GetDisk() float32 {
	if o == nil || IsNil(o.Disk) {
		var ret float32
		return ret
	}
	return *o.Disk
}

// GetDiskOk returns a tuple with the Disk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetDiskOk() (*float32, bool) {
	if o == nil || IsNil(o.Disk) {
		return nil, false
	}
	return o.Disk, true
}

// HasDisk returns a boolean if a field has been set.
func (o *Workspace) HasDisk() bool {
	if o != nil && !IsNil(o.Disk) {
		return true
	}

	return false
}

// SetDisk gets a reference to the given float32 and assigns it to the Disk field.
func (o *Workspace) SetDisk(v float32) {
	o.Disk = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Workspace) GetState() WorkspaceState {
	if o == nil || IsNil(o.State) {
		var ret WorkspaceState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetStateOk() (*WorkspaceState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Workspace) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given WorkspaceState and assigns it to the State field.
func (o *Workspace) SetState(v WorkspaceState) {
	o.State = &v
}

// GetErrorReason returns the ErrorReason field value if set, zero value otherwise.
func (o *Workspace) GetErrorReason() string {
	if o == nil || IsNil(o.ErrorReason) {
		var ret string
		return ret
	}
	return *o.ErrorReason
}

// GetErrorReasonOk returns a tuple with the ErrorReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetErrorReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorReason) {
		return nil, false
	}
	return o.ErrorReason, true
}

// HasErrorReason returns a boolean if a field has been set.
func (o *Workspace) HasErrorReason() bool {
	if o != nil && !IsNil(o.ErrorReason) {
		return true
	}

	return false
}

// SetErrorReason gets a reference to the given string and assigns it to the ErrorReason field.
func (o *Workspace) SetErrorReason(v string) {
	o.ErrorReason = &v
}

// GetSnapshotState returns the SnapshotState field value if set, zero value otherwise.
func (o *Workspace) GetSnapshotState() string {
	if o == nil || IsNil(o.SnapshotState) {
		var ret string
		return ret
	}
	return *o.SnapshotState
}

// GetSnapshotStateOk returns a tuple with the SnapshotState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetSnapshotStateOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotState) {
		return nil, false
	}
	return o.SnapshotState, true
}

// HasSnapshotState returns a boolean if a field has been set.
func (o *Workspace) HasSnapshotState() bool {
	if o != nil && !IsNil(o.SnapshotState) {
		return true
	}

	return false
}

// SetSnapshotState gets a reference to the given string and assigns it to the SnapshotState field.
func (o *Workspace) SetSnapshotState(v string) {
	o.SnapshotState = &v
}

// GetSnapshotCreatedAt returns the SnapshotCreatedAt field value if set, zero value otherwise.
func (o *Workspace) GetSnapshotCreatedAt() string {
	if o == nil || IsNil(o.SnapshotCreatedAt) {
		var ret string
		return ret
	}
	return *o.SnapshotCreatedAt
}

// GetSnapshotCreatedAtOk returns a tuple with the SnapshotCreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetSnapshotCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.SnapshotCreatedAt) {
		return nil, false
	}
	return o.SnapshotCreatedAt, true
}

// HasSnapshotCreatedAt returns a boolean if a field has been set.
func (o *Workspace) HasSnapshotCreatedAt() bool {
	if o != nil && !IsNil(o.SnapshotCreatedAt) {
		return true
	}

	return false
}

// SetSnapshotCreatedAt gets a reference to the given string and assigns it to the SnapshotCreatedAt field.
func (o *Workspace) SetSnapshotCreatedAt(v string) {
	o.SnapshotCreatedAt = &v
}

// GetAutoStopInterval returns the AutoStopInterval field value if set, zero value otherwise.
func (o *Workspace) GetAutoStopInterval() float32 {
	if o == nil || IsNil(o.AutoStopInterval) {
		var ret float32
		return ret
	}
	return *o.AutoStopInterval
}

// GetAutoStopIntervalOk returns a tuple with the AutoStopInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetAutoStopIntervalOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoStopInterval) {
		return nil, false
	}
	return o.AutoStopInterval, true
}

// HasAutoStopInterval returns a boolean if a field has been set.
func (o *Workspace) HasAutoStopInterval() bool {
	if o != nil && !IsNil(o.AutoStopInterval) {
		return true
	}

	return false
}

// SetAutoStopInterval gets a reference to the given float32 and assigns it to the AutoStopInterval field.
func (o *Workspace) SetAutoStopInterval(v float32) {
	o.AutoStopInterval = &v
}

// GetAutoArchiveInterval returns the AutoArchiveInterval field value if set, zero value otherwise.
func (o *Workspace) GetAutoArchiveInterval() float32 {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		var ret float32
		return ret
	}
	return *o.AutoArchiveInterval
}

// GetAutoArchiveIntervalOk returns a tuple with the AutoArchiveInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetAutoArchiveIntervalOk() (*float32, bool) {
	if o == nil || IsNil(o.AutoArchiveInterval) {
		return nil, false
	}
	return o.AutoArchiveInterval, true
}

// HasAutoArchiveInterval returns a boolean if a field has been set.
func (o *Workspace) HasAutoArchiveInterval() bool {
	if o != nil && !IsNil(o.AutoArchiveInterval) {
		return true
	}

	return false
}

// SetAutoArchiveInterval gets a reference to the given float32 and assigns it to the AutoArchiveInterval field.
func (o *Workspace) SetAutoArchiveInterval(v float32) {
	o.AutoArchiveInterval = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *Workspace) GetVolumes() []WorkspaceVolume {
	if o == nil || IsNil(o.Volumes) {
		var ret []WorkspaceVolume
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workspace) GetVolumesOk() ([]WorkspaceVolume, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *Workspace) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []WorkspaceVolume and assigns it to the Volumes field.
func (o *Workspace) SetVolumes(v []WorkspaceVolume) {
	o.Volumes = v
}

func (o Workspace) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workspace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["organizationId"] = o.OrganizationId
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	toSerialize["user"] = o.User
	toSerialize["env"] = o.Env
	toSerialize["labels"] = o.Labels
	toSerialize["public"] = o.Public
	toSerialize["target"] = o.Target
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Gpu) {
		toSerialize["gpu"] = o.Gpu
	}
	if !IsNil(o.Memory) {
		toSerialize["memory"] = o.Memory
	}
	if !IsNil(o.Disk) {
		toSerialize["disk"] = o.Disk
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ErrorReason) {
		toSerialize["errorReason"] = o.ErrorReason
	}
	if !IsNil(o.SnapshotState) {
		toSerialize["snapshotState"] = o.SnapshotState
	}
	if !IsNil(o.SnapshotCreatedAt) {
		toSerialize["snapshotCreatedAt"] = o.SnapshotCreatedAt
	}
	if !IsNil(o.AutoStopInterval) {
		toSerialize["autoStopInterval"] = o.AutoStopInterval
	}
	if !IsNil(o.AutoArchiveInterval) {
		toSerialize["autoArchiveInterval"] = o.AutoArchiveInterval
	}
	if !IsNil(o.Volumes) {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

func (o *Workspace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"organizationId",
		"user",
		"env",
		"labels",
		"public",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkspace := _Workspace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkspace)

	if err != nil {
		return err
	}

	*o = Workspace(varWorkspace)

	return err
}

type NullableWorkspace struct {
	value *Workspace
	isSet bool
}

func (v NullableWorkspace) Get() *Workspace {
	return v.value
}

func (v *NullableWorkspace) Set(val *Workspace) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspace) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspace(val *Workspace) *NullableWorkspace {
	return &NullableWorkspace{value: val, isSet: true}
}

func (v NullableWorkspace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
