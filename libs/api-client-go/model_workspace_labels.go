/*
Daytona

Daytona AI platform API Docs

API version: 1.0
Contact: support@daytona.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package daytonaapiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkspaceLabels type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkspaceLabels{}

// WorkspaceLabels struct for WorkspaceLabels
type WorkspaceLabels struct {
	// Key-value pairs of labels
	Labels map[string]string `json:"labels"`
}

type _WorkspaceLabels WorkspaceLabels

// NewWorkspaceLabels instantiates a new WorkspaceLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspaceLabels(labels map[string]string) *WorkspaceLabels {
	this := WorkspaceLabels{}
	this.Labels = labels
	return &this
}

// NewWorkspaceLabelsWithDefaults instantiates a new WorkspaceLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceLabelsWithDefaults() *WorkspaceLabels {
	this := WorkspaceLabels{}
	return &this
}

// GetLabels returns the Labels field value
func (o *WorkspaceLabels) GetLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *WorkspaceLabels) GetLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *WorkspaceLabels) SetLabels(v map[string]string) {
	o.Labels = v
}

func (o WorkspaceLabels) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkspaceLabels) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["labels"] = o.Labels
	return toSerialize, nil
}

func (o *WorkspaceLabels) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkspaceLabels := _WorkspaceLabels{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkspaceLabels)

	if err != nil {
		return err
	}

	*o = WorkspaceLabels(varWorkspaceLabels)

	return err
}

type NullableWorkspaceLabels struct {
	value *WorkspaceLabels
	isSet bool
}

func (v NullableWorkspaceLabels) Get() *WorkspaceLabels {
	return v.value
}

func (v *NullableWorkspaceLabels) Set(val *WorkspaceLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceLabels(val *WorkspaceLabels) *NullableWorkspaceLabels {
	return &NullableWorkspaceLabels{value: val, isSet: true}
}

func (v NullableWorkspaceLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
