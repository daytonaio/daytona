# coding: utf-8

"""
    Daytona

    Daytona AI platform API Docs

    The version of the OpenAPI document: 1.0
    Contact: support@daytona.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from daytona_api_client_async.models.sandbox_usage_overview import SandboxUsageOverview
from typing import Optional, Set
from typing_extensions import Self

class OrganizationUsageOverview(BaseModel):
    """
    OrganizationUsageOverview
    """ # noqa: E501
    sandbox_usage: List[SandboxUsageOverview] = Field(alias="sandboxUsage")
    total_snapshot_quota: Union[StrictFloat, StrictInt] = Field(alias="totalSnapshotQuota")
    current_snapshot_usage: Union[StrictFloat, StrictInt] = Field(alias="currentSnapshotUsage")
    total_volume_quota: Union[StrictFloat, StrictInt] = Field(alias="totalVolumeQuota")
    current_volume_usage: Union[StrictFloat, StrictInt] = Field(alias="currentVolumeUsage")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["sandboxUsage", "totalSnapshotQuota", "currentSnapshotUsage", "totalVolumeQuota", "currentVolumeUsage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationUsageOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sandbox_usage (list)
        _items = []
        if self.sandbox_usage:
            for _item_sandbox_usage in self.sandbox_usage:
                if _item_sandbox_usage:
                    _items.append(_item_sandbox_usage.to_dict())
            _dict['sandboxUsage'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationUsageOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sandboxUsage": [SandboxUsageOverview.from_dict(_item) for _item in obj["sandboxUsage"]] if obj.get("sandboxUsage") is not None else None,
            "totalSnapshotQuota": obj.get("totalSnapshotQuota"),
            "currentSnapshotUsage": obj.get("currentSnapshotUsage"),
            "totalVolumeQuota": obj.get("totalVolumeQuota"),
            "currentVolumeUsage": obj.get("currentVolumeUsage")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


