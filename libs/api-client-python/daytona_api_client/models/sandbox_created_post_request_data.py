# coding: utf-8

"""
    Daytona

    Daytona AI platform API Docs

    The version of the OpenAPI document: 1.0
    Contact: support@daytona.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SandboxCreatedPostRequestData(BaseModel):
    """
    SandboxCreatedPostRequestData
    """ # noqa: E501
    id: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    target: Optional[StrictStr] = None
    snapshot: Optional[StrictStr] = None
    user: Optional[StrictStr] = None
    env: Optional[Dict[str, StrictStr]] = None
    cpu: Optional[Union[StrictFloat, StrictInt]] = None
    gpu: Optional[Union[StrictFloat, StrictInt]] = None
    memory: Optional[Union[StrictFloat, StrictInt]] = None
    disk: Optional[Union[StrictFloat, StrictInt]] = None
    public: Optional[StrictBool] = None
    labels: Optional[Dict[str, StrictStr]] = None
    state: Optional[StrictStr] = None
    desired_state: Optional[StrictStr] = Field(default=None, alias="desiredState")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, alias="updatedAt")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["id", "organizationId", "target", "snapshot", "user", "env", "cpu", "gpu", "memory", "disk", "public", "labels", "state", "desiredState", "createdAt", "updatedAt"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['creating', 'restoring', 'destroyed', 'destroying', 'started', 'stopped', 'starting', 'stopping', 'error', 'build_failed', 'pending_build', 'building_snapshot', 'unknown', 'pulling_snapshot', 'archived', 'archiving']):
            raise ValueError("must be one of enum values ('creating', 'restoring', 'destroyed', 'destroying', 'started', 'stopped', 'starting', 'stopping', 'error', 'build_failed', 'pending_build', 'building_snapshot', 'unknown', 'pulling_snapshot', 'archived', 'archiving')")
        return value

    @field_validator('desired_state')
    def desired_state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['destroyed', 'started', 'stopped', 'resized', 'archived']):
            raise ValueError("must be one of enum values ('destroyed', 'started', 'stopped', 'resized', 'archived')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SandboxCreatedPostRequestData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SandboxCreatedPostRequestData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "organizationId": obj.get("organizationId"),
            "target": obj.get("target"),
            "snapshot": obj.get("snapshot"),
            "user": obj.get("user"),
            "env": obj.get("env"),
            "cpu": obj.get("cpu"),
            "gpu": obj.get("gpu"),
            "memory": obj.get("memory"),
            "disk": obj.get("disk"),
            "public": obj.get("public"),
            "labels": obj.get("labels"),
            "state": obj.get("state"),
            "desiredState": obj.get("desiredState"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


