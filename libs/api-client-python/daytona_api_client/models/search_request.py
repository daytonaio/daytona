# coding: utf-8

"""
    Daytona

    Daytona AI platform API Docs

    The version of the OpenAPI document: 1.0
    Contact: support@daytona.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self


class SearchRequest(BaseModel):
    """
    SearchRequest
    """  # noqa: E501

    query: StrictStr = Field(description="Search query/pattern")
    path: Optional[StrictStr] = Field(default=None, description='Path to search in (default: ".")')
    file_types: Optional[List[StrictStr]] = Field(
        default=None, description='File types to include (e.g., ["js", "ts"])'
    )
    include_globs: Optional[List[StrictStr]] = Field(default=None, description="Include glob patterns")
    exclude_globs: Optional[List[StrictStr]] = Field(default=None, description="Exclude glob patterns")
    case_sensitive: Optional[StrictBool] = Field(default=None, description="Case sensitive search (default: true)")
    multiline: Optional[StrictBool] = Field(default=None, description="Enable multiline matching")
    context: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="Lines of context around matches"
    )
    count_only: Optional[StrictBool] = Field(default=None, description="Return only match counts")
    filenames_only: Optional[StrictBool] = Field(default=None, description="Return only filenames with matches")
    var_json: Optional[StrictBool] = Field(default=None, description="Return structured JSON output", alias="json")
    max_results: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum number of results")
    rg_args: Optional[List[StrictStr]] = Field(default=None, description="Additional ripgrep arguments")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "query",
        "path",
        "file_types",
        "include_globs",
        "exclude_globs",
        "case_sensitive",
        "multiline",
        "context",
        "count_only",
        "filenames_only",
        "json",
        "max_results",
        "rg_args",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "query": obj.get("query"),
                "path": obj.get("path"),
                "file_types": obj.get("file_types"),
                "include_globs": obj.get("include_globs"),
                "exclude_globs": obj.get("exclude_globs"),
                "case_sensitive": obj.get("case_sensitive"),
                "multiline": obj.get("multiline"),
                "context": obj.get("context"),
                "count_only": obj.get("count_only"),
                "filenames_only": obj.get("filenames_only"),
                "json": obj.get("json"),
                "max_results": obj.get("max_results"),
                "rg_args": obj.get("rg_args"),
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
