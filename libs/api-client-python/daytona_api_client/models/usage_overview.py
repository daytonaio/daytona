# coding: utf-8

"""
    Daytona

    Daytona AI platform API Docs

    The version of the OpenAPI document: 1.0
    Contact: support@daytona.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Union
from typing import Optional, Set
from typing_extensions import Self

class UsageOverview(BaseModel):
    """
    UsageOverview
    """ # noqa: E501
    total_cpu_quota: Union[StrictFloat, StrictInt] = Field(alias="totalCpuQuota")
    total_gpu_quota: Union[StrictFloat, StrictInt] = Field(alias="totalGpuQuota")
    total_memory_quota: Union[StrictFloat, StrictInt] = Field(alias="totalMemoryQuota")
    total_disk_quota: Union[StrictFloat, StrictInt] = Field(alias="totalDiskQuota")
    total_workspace_quota: Union[StrictFloat, StrictInt] = Field(alias="totalWorkspaceQuota")
    concurrent_workspace_quota: Union[StrictFloat, StrictInt] = Field(alias="concurrentWorkspaceQuota")
    current_cpu_usage: Union[StrictFloat, StrictInt] = Field(alias="currentCpuUsage")
    current_memory_usage: Union[StrictFloat, StrictInt] = Field(alias="currentMemoryUsage")
    current_disk_usage: Union[StrictFloat, StrictInt] = Field(alias="currentDiskUsage")
    current_workspaces: Union[StrictFloat, StrictInt] = Field(alias="currentWorkspaces")
    concurrent_workspaces: Union[StrictFloat, StrictInt] = Field(alias="concurrentWorkspaces")
    current_image_number: Union[StrictFloat, StrictInt] = Field(alias="currentImageNumber")
    image_quota: Union[StrictFloat, StrictInt] = Field(alias="imageQuota")
    total_image_size_quota: Union[StrictFloat, StrictInt] = Field(alias="totalImageSizeQuota")
    total_image_size_used: Union[StrictFloat, StrictInt] = Field(alias="totalImageSizeUsed")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["totalCpuQuota", "totalGpuQuota", "totalMemoryQuota", "totalDiskQuota", "totalWorkspaceQuota", "concurrentWorkspaceQuota", "currentCpuUsage", "currentMemoryUsage", "currentDiskUsage", "currentWorkspaces", "concurrentWorkspaces", "currentImageNumber", "imageQuota", "totalImageSizeQuota", "totalImageSizeUsed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "totalCpuQuota": obj.get("totalCpuQuota"),
            "totalGpuQuota": obj.get("totalGpuQuota"),
            "totalMemoryQuota": obj.get("totalMemoryQuota"),
            "totalDiskQuota": obj.get("totalDiskQuota"),
            "totalWorkspaceQuota": obj.get("totalWorkspaceQuota"),
            "concurrentWorkspaceQuota": obj.get("concurrentWorkspaceQuota"),
            "currentCpuUsage": obj.get("currentCpuUsage"),
            "currentMemoryUsage": obj.get("currentMemoryUsage"),
            "currentDiskUsage": obj.get("currentDiskUsage"),
            "currentWorkspaces": obj.get("currentWorkspaces"),
            "concurrentWorkspaces": obj.get("concurrentWorkspaces"),
            "currentImageNumber": obj.get("currentImageNumber"),
            "imageQuota": obj.get("imageQuota"),
            "totalImageSizeQuota": obj.get("totalImageSizeQuota"),
            "totalImageSizeUsed": obj.get("totalImageSizeUsed")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


