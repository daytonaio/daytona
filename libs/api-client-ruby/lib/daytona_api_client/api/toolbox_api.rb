=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module DaytonaApiClient
  class ToolboxApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Click mouse
    # Click mouse at specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_click_request [MouseClickRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [MouseClickResponse]
    def click_mouse(sandbox_id, mouse_click_request, opts = {})
      data, _status_code, _headers = click_mouse_with_http_info(sandbox_id, mouse_click_request, opts)
      data
    end

    # Click mouse
    # Click mouse at specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_click_request [MouseClickRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(MouseClickResponse, Integer, Hash)>] MouseClickResponse data, response status code and response headers
    def click_mouse_with_http_info(sandbox_id, mouse_click_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.click_mouse ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.click_mouse"
      end
      # verify the required parameter 'mouse_click_request' is set
      if @api_client.config.client_side_validation && mouse_click_request.nil?
        fail ArgumentError, "Missing the required parameter 'mouse_click_request' when calling ToolboxApi.click_mouse"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/mouse/click'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mouse_click_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MouseClickResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.click_mouse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#click_mouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create folder
    # Create folder inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param mode [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def create_folder(sandbox_id, path, mode, opts = {})
      create_folder_with_http_info(sandbox_id, path, mode, opts)
      nil
    end

    # Create folder
    # Create folder inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param mode [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_folder_with_http_info(sandbox_id, path, mode, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.create_folder ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.create_folder"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.create_folder"
      end
      # verify the required parameter 'mode' is set
      if @api_client.config.client_side_validation && mode.nil?
        fail ArgumentError, "Missing the required parameter 'mode' when calling ToolboxApi.create_folder"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/folder'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'mode'] = mode

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.create_folder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#create_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create session
    # Create a new session in the sandbox
    # @param sandbox_id [String] 
    # @param create_session_request [CreateSessionRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def create_session(sandbox_id, create_session_request, opts = {})
      create_session_with_http_info(sandbox_id, create_session_request, opts)
      nil
    end

    # Create session
    # Create a new session in the sandbox
    # @param sandbox_id [String] 
    # @param create_session_request [CreateSessionRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_session_with_http_info(sandbox_id, create_session_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.create_session ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.create_session"
      end
      # verify the required parameter 'create_session_request' is set
      if @api_client.config.client_side_validation && create_session_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_session_request' when calling ToolboxApi.create_session"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_session_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.create_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#create_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete file
    # Delete file inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :recursive 
    # @return [nil]
    def delete_file(sandbox_id, path, opts = {})
      delete_file_with_http_info(sandbox_id, path, opts)
      nil
    end

    # Delete file
    # Delete file inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :recursive 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.delete_file ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.delete_file"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.delete_file"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.delete_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete session
    # Delete a specific session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def delete_session(sandbox_id, session_id, opts = {})
      delete_session_with_http_info(sandbox_id, session_id, opts)
      nil
    end

    # Delete session
    # Delete a specific session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_session_with_http_info(sandbox_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.delete_session ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.delete_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ToolboxApi.delete_session"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session/{sessionId}'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.delete_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#delete_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download file
    # Download file from sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [File]
    def download_file(sandbox_id, path, opts = {})
      data, _status_code, _headers = download_file_with_http_info(sandbox_id, path, opts)
      data
    end

    # Download file
    # Download file from sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def download_file_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.download_file ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.download_file"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.download_file"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/download'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.download_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Drag mouse
    # Drag mouse from start to end coordinates
    # @param sandbox_id [String] 
    # @param mouse_drag_request [MouseDragRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [MouseDragResponse]
    def drag_mouse(sandbox_id, mouse_drag_request, opts = {})
      data, _status_code, _headers = drag_mouse_with_http_info(sandbox_id, mouse_drag_request, opts)
      data
    end

    # Drag mouse
    # Drag mouse from start to end coordinates
    # @param sandbox_id [String] 
    # @param mouse_drag_request [MouseDragRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(MouseDragResponse, Integer, Hash)>] MouseDragResponse data, response status code and response headers
    def drag_mouse_with_http_info(sandbox_id, mouse_drag_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.drag_mouse ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.drag_mouse"
      end
      # verify the required parameter 'mouse_drag_request' is set
      if @api_client.config.client_side_validation && mouse_drag_request.nil?
        fail ArgumentError, "Missing the required parameter 'mouse_drag_request' when calling ToolboxApi.drag_mouse"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/mouse/drag'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mouse_drag_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MouseDragResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.drag_mouse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#drag_mouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute command
    # Execute command synchronously inside sandbox
    # @param sandbox_id [String] 
    # @param execute_request [ExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ExecuteResponse]
    def execute_command(sandbox_id, execute_request, opts = {})
      data, _status_code, _headers = execute_command_with_http_info(sandbox_id, execute_request, opts)
      data
    end

    # Execute command
    # Execute command synchronously inside sandbox
    # @param sandbox_id [String] 
    # @param execute_request [ExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ExecuteResponse, Integer, Hash)>] ExecuteResponse data, response status code and response headers
    def execute_command_with_http_info(sandbox_id, execute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.execute_command ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.execute_command"
      end
      # verify the required parameter 'execute_request' is set
      if @api_client.config.client_side_validation && execute_request.nil?
        fail ArgumentError, "Missing the required parameter 'execute_request' when calling ToolboxApi.execute_command"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/execute'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(execute_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ExecuteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.execute_command",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#execute_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute command in session
    # Execute a command in a specific session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param session_execute_request [SessionExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [SessionExecuteResponse]
    def execute_session_command(sandbox_id, session_id, session_execute_request, opts = {})
      data, _status_code, _headers = execute_session_command_with_http_info(sandbox_id, session_id, session_execute_request, opts)
      data
    end

    # Execute command in session
    # Execute a command in a specific session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param session_execute_request [SessionExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(SessionExecuteResponse, Integer, Hash)>] SessionExecuteResponse data, response status code and response headers
    def execute_session_command_with_http_info(sandbox_id, session_id, session_execute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.execute_session_command ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.execute_session_command"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ToolboxApi.execute_session_command"
      end
      # verify the required parameter 'session_execute_request' is set
      if @api_client.config.client_side_validation && session_execute_request.nil?
        fail ArgumentError, "Missing the required parameter 'session_execute_request' when calling ToolboxApi.execute_session_command"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/exec'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(session_execute_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SessionExecuteResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.execute_session_command",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#execute_session_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for text/pattern in files
    # Search for text/pattern inside sandbox files
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param pattern [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<Match>]
    def find_in_files(sandbox_id, path, pattern, opts = {})
      data, _status_code, _headers = find_in_files_with_http_info(sandbox_id, path, pattern, opts)
      data
    end

    # Search for text/pattern in files
    # Search for text/pattern inside sandbox files
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param pattern [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<Match>, Integer, Hash)>] Array<Match> data, response status code and response headers
    def find_in_files_with_http_info(sandbox_id, path, pattern, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.find_in_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.find_in_files"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.find_in_files"
      end
      # verify the required parameter 'pattern' is set
      if @api_client.config.client_side_validation && pattern.nil?
        fail ArgumentError, "Missing the required parameter 'pattern' when calling ToolboxApi.find_in_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/find'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'pattern'] = pattern

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Match>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.find_in_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#find_in_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get computer use status
    # Get status of all VNC desktop processes
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ComputerUseStatusResponse]
    def get_computer_use_status(sandbox_id, opts = {})
      data, _status_code, _headers = get_computer_use_status_with_http_info(sandbox_id, opts)
      data
    end

    # Get computer use status
    # Get status of all VNC desktop processes
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ComputerUseStatusResponse, Integer, Hash)>] ComputerUseStatusResponse data, response status code and response headers
    def get_computer_use_status_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_computer_use_status ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_computer_use_status"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/status'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComputerUseStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_computer_use_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_computer_use_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get display info
    # Get information about displays
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [DisplayInfoResponse]
    def get_display_info(sandbox_id, opts = {})
      data, _status_code, _headers = get_display_info_with_http_info(sandbox_id, opts)
      data
    end

    # Get display info
    # Get information about displays
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(DisplayInfoResponse, Integer, Hash)>] DisplayInfoResponse data, response status code and response headers
    def get_display_info_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_display_info ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_display_info"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/display/info'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DisplayInfoResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_display_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_display_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get file info
    # Get file info inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [FileInfo]
    def get_file_info(sandbox_id, path, opts = {})
      data, _status_code, _headers = get_file_info_with_http_info(sandbox_id, path, opts)
      data
    end

    # Get file info
    # Get file info inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(FileInfo, Integer, Hash)>] FileInfo data, response status code and response headers
    def get_file_info_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_file_info ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_file_info"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.get_file_info"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/info'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FileInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_file_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_file_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mouse position
    # Get current mouse cursor position
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [MousePosition]
    def get_mouse_position(sandbox_id, opts = {})
      data, _status_code, _headers = get_mouse_position_with_http_info(sandbox_id, opts)
      data
    end

    # Get mouse position
    # Get current mouse cursor position
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(MousePosition, Integer, Hash)>] MousePosition data, response status code and response headers
    def get_mouse_position_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_mouse_position ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_mouse_position"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/mouse/position'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MousePosition'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_mouse_position",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_mouse_position\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get process errors
    # Get error logs for a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ProcessErrorsResponse]
    def get_process_errors(process_name, sandbox_id, opts = {})
      data, _status_code, _headers = get_process_errors_with_http_info(process_name, sandbox_id, opts)
      data
    end

    # Get process errors
    # Get error logs for a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ProcessErrorsResponse, Integer, Hash)>] ProcessErrorsResponse data, response status code and response headers
    def get_process_errors_with_http_info(process_name, sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_process_errors ...'
      end
      # verify the required parameter 'process_name' is set
      if @api_client.config.client_side_validation && process_name.nil?
        fail ArgumentError, "Missing the required parameter 'process_name' when calling ToolboxApi.get_process_errors"
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_process_errors"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/errors'.sub('{' + 'processName' + '}', CGI.escape(process_name.to_s)).sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessErrorsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_process_errors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_process_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get process logs
    # Get logs for a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ProcessLogsResponse]
    def get_process_logs(process_name, sandbox_id, opts = {})
      data, _status_code, _headers = get_process_logs_with_http_info(process_name, sandbox_id, opts)
      data
    end

    # Get process logs
    # Get logs for a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ProcessLogsResponse, Integer, Hash)>] ProcessLogsResponse data, response status code and response headers
    def get_process_logs_with_http_info(process_name, sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_process_logs ...'
      end
      # verify the required parameter 'process_name' is set
      if @api_client.config.client_side_validation && process_name.nil?
        fail ArgumentError, "Missing the required parameter 'process_name' when calling ToolboxApi.get_process_logs"
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_process_logs"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/logs'.sub('{' + 'processName' + '}', CGI.escape(process_name.to_s)).sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessLogsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_process_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_process_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get process status
    # Get status of a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ProcessStatusResponse]
    def get_process_status(process_name, sandbox_id, opts = {})
      data, _status_code, _headers = get_process_status_with_http_info(process_name, sandbox_id, opts)
      data
    end

    # Get process status
    # Get status of a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ProcessStatusResponse, Integer, Hash)>] ProcessStatusResponse data, response status code and response headers
    def get_process_status_with_http_info(process_name, sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_process_status ...'
      end
      # verify the required parameter 'process_name' is set
      if @api_client.config.client_side_validation && process_name.nil?
        fail ArgumentError, "Missing the required parameter 'process_name' when calling ToolboxApi.get_process_status"
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_process_status"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/status'.sub('{' + 'processName' + '}', CGI.escape(process_name.to_s)).sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_process_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_process_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sandbox project dir
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ProjectDirResponse]
    def get_project_dir(sandbox_id, opts = {})
      data, _status_code, _headers = get_project_dir_with_http_info(sandbox_id, opts)
      data
    end

    # Get sandbox project dir
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ProjectDirResponse, Integer, Hash)>] ProjectDirResponse data, response status code and response headers
    def get_project_dir_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_project_dir ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_project_dir"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/project-dir'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProjectDirResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_project_dir",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_project_dir\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get session
    # Get session by ID
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Session]
    def get_session(sandbox_id, session_id, opts = {})
      data, _status_code, _headers = get_session_with_http_info(sandbox_id, session_id, opts)
      data
    end

    # Get session
    # Get session by ID
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Session, Integer, Hash)>] Session data, response status code and response headers
    def get_session_with_http_info(sandbox_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_session ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_session"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ToolboxApi.get_session"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session/{sessionId}'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Session'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_session",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_session\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get session command
    # Get session command by ID
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param command_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Command]
    def get_session_command(sandbox_id, session_id, command_id, opts = {})
      data, _status_code, _headers = get_session_command_with_http_info(sandbox_id, session_id, command_id, opts)
      data
    end

    # Get session command
    # Get session command by ID
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param command_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Command, Integer, Hash)>] Command data, response status code and response headers
    def get_session_command_with_http_info(sandbox_id, session_id, command_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_session_command ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_session_command"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ToolboxApi.get_session_command"
      end
      # verify the required parameter 'command_id' is set
      if @api_client.config.client_side_validation && command_id.nil?
        fail ArgumentError, "Missing the required parameter 'command_id' when calling ToolboxApi.get_session_command"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'commandId' + '}', CGI.escape(command_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Command'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_session_command",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_session_command\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get command logs
    # Get logs for a specific command in a session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param command_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :follow Whether to stream the logs
    # @return [String]
    def get_session_command_logs(sandbox_id, session_id, command_id, opts = {})
      data, _status_code, _headers = get_session_command_logs_with_http_info(sandbox_id, session_id, command_id, opts)
      data
    end

    # Get command logs
    # Get logs for a specific command in a session
    # @param sandbox_id [String] 
    # @param session_id [String] 
    # @param command_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :follow Whether to stream the logs
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_session_command_logs_with_http_info(sandbox_id, session_id, command_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_session_command_logs ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_session_command_logs"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling ToolboxApi.get_session_command_logs"
      end
      # verify the required parameter 'command_id' is set
      if @api_client.config.client_side_validation && command_id.nil?
        fail ArgumentError, "Missing the required parameter 'command_id' when calling ToolboxApi.get_session_command_logs"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}/logs'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s)).sub('{' + 'commandId' + '}', CGI.escape(command_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'follow'] = opts[:'follow'] if !opts[:'follow'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_session_command_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_session_command_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get windows
    # Get list of open windows
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [WindowsResponse]
    def get_windows(sandbox_id, opts = {})
      data, _status_code, _headers = get_windows_with_http_info(sandbox_id, opts)
      data
    end

    # Get windows
    # Get list of open windows
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(WindowsResponse, Integer, Hash)>] WindowsResponse data, response status code and response headers
    def get_windows_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.get_windows ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.get_windows"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/display/windows'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WindowsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.get_windows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#get_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add files
    # Add files to git commit
    # @param sandbox_id [String] 
    # @param git_add_request [GitAddRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_add_files(sandbox_id, git_add_request, opts = {})
      git_add_files_with_http_info(sandbox_id, git_add_request, opts)
      nil
    end

    # Add files
    # Add files to git commit
    # @param sandbox_id [String] 
    # @param git_add_request [GitAddRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_add_files_with_http_info(sandbox_id, git_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_add_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_add_files"
      end
      # verify the required parameter 'git_add_request' is set
      if @api_client.config.client_side_validation && git_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_add_request' when calling ToolboxApi.git_add_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/add'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_add_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_add_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_add_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Checkout branch
    # Checkout branch or commit in git repository
    # @param sandbox_id [String] 
    # @param git_checkout_request [GitCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_checkout_branch(sandbox_id, git_checkout_request, opts = {})
      git_checkout_branch_with_http_info(sandbox_id, git_checkout_request, opts)
      nil
    end

    # Checkout branch
    # Checkout branch or commit in git repository
    # @param sandbox_id [String] 
    # @param git_checkout_request [GitCheckoutRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_checkout_branch_with_http_info(sandbox_id, git_checkout_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_checkout_branch ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_checkout_branch"
      end
      # verify the required parameter 'git_checkout_request' is set
      if @api_client.config.client_side_validation && git_checkout_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_checkout_request' when calling ToolboxApi.git_checkout_branch"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/checkout'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_checkout_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_checkout_branch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_checkout_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clone repository
    # Clone git repository
    # @param sandbox_id [String] 
    # @param git_clone_request [GitCloneRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_clone_repository(sandbox_id, git_clone_request, opts = {})
      git_clone_repository_with_http_info(sandbox_id, git_clone_request, opts)
      nil
    end

    # Clone repository
    # Clone git repository
    # @param sandbox_id [String] 
    # @param git_clone_request [GitCloneRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_clone_repository_with_http_info(sandbox_id, git_clone_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_clone_repository ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_clone_repository"
      end
      # verify the required parameter 'git_clone_request' is set
      if @api_client.config.client_side_validation && git_clone_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_clone_request' when calling ToolboxApi.git_clone_repository"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/clone'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_clone_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_clone_repository",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_clone_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Commit changes
    # Commit changes to git repository
    # @param sandbox_id [String] 
    # @param git_commit_request [GitCommitRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [GitCommitResponse]
    def git_commit_changes(sandbox_id, git_commit_request, opts = {})
      data, _status_code, _headers = git_commit_changes_with_http_info(sandbox_id, git_commit_request, opts)
      data
    end

    # Commit changes
    # Commit changes to git repository
    # @param sandbox_id [String] 
    # @param git_commit_request [GitCommitRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(GitCommitResponse, Integer, Hash)>] GitCommitResponse data, response status code and response headers
    def git_commit_changes_with_http_info(sandbox_id, git_commit_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_commit_changes ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_commit_changes"
      end
      # verify the required parameter 'git_commit_request' is set
      if @api_client.config.client_side_validation && git_commit_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_commit_request' when calling ToolboxApi.git_commit_changes"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/commit'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_commit_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GitCommitResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_commit_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_commit_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create branch
    # Create branch on git repository
    # @param sandbox_id [String] 
    # @param git_branch_request [GitBranchRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_create_branch(sandbox_id, git_branch_request, opts = {})
      git_create_branch_with_http_info(sandbox_id, git_branch_request, opts)
      nil
    end

    # Create branch
    # Create branch on git repository
    # @param sandbox_id [String] 
    # @param git_branch_request [GitBranchRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_create_branch_with_http_info(sandbox_id, git_branch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_create_branch ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_create_branch"
      end
      # verify the required parameter 'git_branch_request' is set
      if @api_client.config.client_side_validation && git_branch_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_branch_request' when calling ToolboxApi.git_create_branch"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/branches'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_branch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_create_branch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_create_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete branch
    # Delete branch on git repository
    # @param sandbox_id [String] 
    # @param git_delete_branch_request [GitDeleteBranchRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_delete_branch(sandbox_id, git_delete_branch_request, opts = {})
      git_delete_branch_with_http_info(sandbox_id, git_delete_branch_request, opts)
      nil
    end

    # Delete branch
    # Delete branch on git repository
    # @param sandbox_id [String] 
    # @param git_delete_branch_request [GitDeleteBranchRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_delete_branch_with_http_info(sandbox_id, git_delete_branch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_delete_branch ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_delete_branch"
      end
      # verify the required parameter 'git_delete_branch_request' is set
      if @api_client.config.client_side_validation && git_delete_branch_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_delete_branch_request' when calling ToolboxApi.git_delete_branch"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/branches'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_delete_branch_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_delete_branch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_delete_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get commit history
    # Get commit history from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<GitCommitInfo>]
    def git_get_history(sandbox_id, path, opts = {})
      data, _status_code, _headers = git_get_history_with_http_info(sandbox_id, path, opts)
      data
    end

    # Get commit history
    # Get commit history from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<GitCommitInfo>, Integer, Hash)>] Array<GitCommitInfo> data, response status code and response headers
    def git_get_history_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_get_history ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_get_history"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.git_get_history"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/history'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GitCommitInfo>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_get_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_get_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get git status
    # Get status from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [GitStatus]
    def git_get_status(sandbox_id, path, opts = {})
      data, _status_code, _headers = git_get_status_with_http_info(sandbox_id, path, opts)
      data
    end

    # Get git status
    # Get status from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(GitStatus, Integer, Hash)>] GitStatus data, response status code and response headers
    def git_get_status_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_get_status ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_get_status"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.git_get_status"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/status'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GitStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_get_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get branch list
    # Get branch list from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ListBranchResponse]
    def git_list_branches(sandbox_id, path, opts = {})
      data, _status_code, _headers = git_list_branches_with_http_info(sandbox_id, path, opts)
      data
    end

    # Get branch list
    # Get branch list from git repository
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ListBranchResponse, Integer, Hash)>] ListBranchResponse data, response status code and response headers
    def git_list_branches_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_list_branches ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_list_branches"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.git_list_branches"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/branches'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListBranchResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_list_branches",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_list_branches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pull changes
    # Pull changes from remote
    # @param sandbox_id [String] 
    # @param git_repo_request [GitRepoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_pull_changes(sandbox_id, git_repo_request, opts = {})
      git_pull_changes_with_http_info(sandbox_id, git_repo_request, opts)
      nil
    end

    # Pull changes
    # Pull changes from remote
    # @param sandbox_id [String] 
    # @param git_repo_request [GitRepoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_pull_changes_with_http_info(sandbox_id, git_repo_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_pull_changes ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_pull_changes"
      end
      # verify the required parameter 'git_repo_request' is set
      if @api_client.config.client_side_validation && git_repo_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_repo_request' when calling ToolboxApi.git_pull_changes"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/pull'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_repo_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_pull_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_pull_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Push changes
    # Push changes to remote
    # @param sandbox_id [String] 
    # @param git_repo_request [GitRepoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def git_push_changes(sandbox_id, git_repo_request, opts = {})
      git_push_changes_with_http_info(sandbox_id, git_repo_request, opts)
      nil
    end

    # Push changes
    # Push changes to remote
    # @param sandbox_id [String] 
    # @param git_repo_request [GitRepoRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def git_push_changes_with_http_info(sandbox_id, git_repo_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.git_push_changes ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.git_push_changes"
      end
      # verify the required parameter 'git_repo_request' is set
      if @api_client.config.client_side_validation && git_repo_request.nil?
        fail ArgumentError, "Missing the required parameter 'git_repo_request' when calling ToolboxApi.git_push_changes"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/git/push'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(git_repo_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.git_push_changes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#git_push_changes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List files
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [String] :path 
    # @return [Array<FileInfo>]
    def list_files(sandbox_id, opts = {})
      data, _status_code, _headers = list_files_with_http_info(sandbox_id, opts)
      data
    end

    # List files
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [String] :path 
    # @return [Array<(Array<FileInfo>, Integer, Hash)>] Array<FileInfo> data, response status code and response headers
    def list_files_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.list_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.list_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = opts[:'path'] if !opts[:'path'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FileInfo>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.list_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#list_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List sessions
    # List all active sessions in the sandbox
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<Session>]
    def list_sessions(sandbox_id, opts = {})
      data, _status_code, _headers = list_sessions_with_http_info(sandbox_id, opts)
      data
    end

    # List sessions
    # List all active sessions in the sandbox
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<Session>, Integer, Hash)>] Array<Session> data, response status code and response headers
    def list_sessions_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.list_sessions ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.list_sessions"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/process/session'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Session>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.list_sessions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#list_sessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Lsp Completions
    # The Completion request is sent from the client to the server to compute completion items at a given cursor position.
    # @param sandbox_id [String] 
    # @param lsp_completion_params [LspCompletionParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [CompletionList]
    def lsp_completions(sandbox_id, lsp_completion_params, opts = {})
      data, _status_code, _headers = lsp_completions_with_http_info(sandbox_id, lsp_completion_params, opts)
      data
    end

    # Get Lsp Completions
    # The Completion request is sent from the client to the server to compute completion items at a given cursor position.
    # @param sandbox_id [String] 
    # @param lsp_completion_params [LspCompletionParams] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(CompletionList, Integer, Hash)>] CompletionList data, response status code and response headers
    def lsp_completions_with_http_info(sandbox_id, lsp_completion_params, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_completions ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_completions"
      end
      # verify the required parameter 'lsp_completion_params' is set
      if @api_client.config.client_side_validation && lsp_completion_params.nil?
        fail ArgumentError, "Missing the required parameter 'lsp_completion_params' when calling ToolboxApi.lsp_completions"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/completions'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lsp_completion_params)

      # return_type
      return_type = opts[:debug_return_type] || 'CompletionList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_completions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_completions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Call Lsp DidClose
    # The document close notification is sent from the client to the server when the document got closed in the client.
    # @param sandbox_id [String] 
    # @param lsp_document_request [LspDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def lsp_did_close(sandbox_id, lsp_document_request, opts = {})
      lsp_did_close_with_http_info(sandbox_id, lsp_document_request, opts)
      nil
    end

    # Call Lsp DidClose
    # The document close notification is sent from the client to the server when the document got closed in the client.
    # @param sandbox_id [String] 
    # @param lsp_document_request [LspDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lsp_did_close_with_http_info(sandbox_id, lsp_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_did_close ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_did_close"
      end
      # verify the required parameter 'lsp_document_request' is set
      if @api_client.config.client_side_validation && lsp_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'lsp_document_request' when calling ToolboxApi.lsp_did_close"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/did-close'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lsp_document_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_did_close",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_did_close\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Call Lsp DidOpen
    # The document open notification is sent from the client to the server to signal newly opened text documents.
    # @param sandbox_id [String] 
    # @param lsp_document_request [LspDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def lsp_did_open(sandbox_id, lsp_document_request, opts = {})
      lsp_did_open_with_http_info(sandbox_id, lsp_document_request, opts)
      nil
    end

    # Call Lsp DidOpen
    # The document open notification is sent from the client to the server to signal newly opened text documents.
    # @param sandbox_id [String] 
    # @param lsp_document_request [LspDocumentRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lsp_did_open_with_http_info(sandbox_id, lsp_document_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_did_open ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_did_open"
      end
      # verify the required parameter 'lsp_document_request' is set
      if @api_client.config.client_side_validation && lsp_document_request.nil?
        fail ArgumentError, "Missing the required parameter 'lsp_document_request' when calling ToolboxApi.lsp_did_open"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/did-open'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lsp_document_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_did_open",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_did_open\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Call Lsp DocumentSymbols
    # The document symbol request is sent from the client to the server.
    # @param sandbox_id [String] 
    # @param language_id [String] 
    # @param path_to_project [String] 
    # @param uri [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<LspSymbol>]
    def lsp_document_symbols(sandbox_id, language_id, path_to_project, uri, opts = {})
      data, _status_code, _headers = lsp_document_symbols_with_http_info(sandbox_id, language_id, path_to_project, uri, opts)
      data
    end

    # Call Lsp DocumentSymbols
    # The document symbol request is sent from the client to the server.
    # @param sandbox_id [String] 
    # @param language_id [String] 
    # @param path_to_project [String] 
    # @param uri [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<LspSymbol>, Integer, Hash)>] Array<LspSymbol> data, response status code and response headers
    def lsp_document_symbols_with_http_info(sandbox_id, language_id, path_to_project, uri, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_document_symbols ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_document_symbols"
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling ToolboxApi.lsp_document_symbols"
      end
      # verify the required parameter 'path_to_project' is set
      if @api_client.config.client_side_validation && path_to_project.nil?
        fail ArgumentError, "Missing the required parameter 'path_to_project' when calling ToolboxApi.lsp_document_symbols"
      end
      # verify the required parameter 'uri' is set
      if @api_client.config.client_side_validation && uri.nil?
        fail ArgumentError, "Missing the required parameter 'uri' when calling ToolboxApi.lsp_document_symbols"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/document-symbols'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'languageId'] = language_id
      query_params[:'pathToProject'] = path_to_project
      query_params[:'uri'] = uri

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LspSymbol>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_document_symbols",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_document_symbols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start Lsp server
    # Start Lsp server process inside sandbox project
    # @param sandbox_id [String] 
    # @param lsp_server_request [LspServerRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def lsp_start(sandbox_id, lsp_server_request, opts = {})
      lsp_start_with_http_info(sandbox_id, lsp_server_request, opts)
      nil
    end

    # Start Lsp server
    # Start Lsp server process inside sandbox project
    # @param sandbox_id [String] 
    # @param lsp_server_request [LspServerRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lsp_start_with_http_info(sandbox_id, lsp_server_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_start ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_start"
      end
      # verify the required parameter 'lsp_server_request' is set
      if @api_client.config.client_side_validation && lsp_server_request.nil?
        fail ArgumentError, "Missing the required parameter 'lsp_server_request' when calling ToolboxApi.lsp_start"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/start'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lsp_server_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_start",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop Lsp server
    # Stop Lsp server process inside sandbox project
    # @param sandbox_id [String] 
    # @param lsp_server_request [LspServerRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def lsp_stop(sandbox_id, lsp_server_request, opts = {})
      lsp_stop_with_http_info(sandbox_id, lsp_server_request, opts)
      nil
    end

    # Stop Lsp server
    # Stop Lsp server process inside sandbox project
    # @param sandbox_id [String] 
    # @param lsp_server_request [LspServerRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def lsp_stop_with_http_info(sandbox_id, lsp_server_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_stop ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_stop"
      end
      # verify the required parameter 'lsp_server_request' is set
      if @api_client.config.client_side_validation && lsp_server_request.nil?
        fail ArgumentError, "Missing the required parameter 'lsp_server_request' when calling ToolboxApi.lsp_stop"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/stop'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(lsp_server_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_stop",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Call Lsp WorkspaceSymbols
    # The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
    # @param sandbox_id [String] 
    # @param language_id [String] 
    # @param path_to_project [String] 
    # @param query [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<LspSymbol>]
    def lsp_workspace_symbols(sandbox_id, language_id, path_to_project, query, opts = {})
      data, _status_code, _headers = lsp_workspace_symbols_with_http_info(sandbox_id, language_id, path_to_project, query, opts)
      data
    end

    # Call Lsp WorkspaceSymbols
    # The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
    # @param sandbox_id [String] 
    # @param language_id [String] 
    # @param path_to_project [String] 
    # @param query [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<LspSymbol>, Integer, Hash)>] Array<LspSymbol> data, response status code and response headers
    def lsp_workspace_symbols_with_http_info(sandbox_id, language_id, path_to_project, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.lsp_workspace_symbols ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.lsp_workspace_symbols"
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling ToolboxApi.lsp_workspace_symbols"
      end
      # verify the required parameter 'path_to_project' is set
      if @api_client.config.client_side_validation && path_to_project.nil?
        fail ArgumentError, "Missing the required parameter 'path_to_project' when calling ToolboxApi.lsp_workspace_symbols"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling ToolboxApi.lsp_workspace_symbols"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/lsp/workspace-symbols'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'languageId'] = language_id
      query_params[:'pathToProject'] = path_to_project
      query_params[:'query'] = query

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LspSymbol>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.lsp_workspace_symbols",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#lsp_workspace_symbols\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move file
    # Move file inside sandbox
    # @param sandbox_id [String] 
    # @param source [String] 
    # @param destination [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def move_file(sandbox_id, source, destination, opts = {})
      move_file_with_http_info(sandbox_id, source, destination, opts)
      nil
    end

    # Move file
    # Move file inside sandbox
    # @param sandbox_id [String] 
    # @param source [String] 
    # @param destination [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def move_file_with_http_info(sandbox_id, source, destination, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.move_file ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.move_file"
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling ToolboxApi.move_file"
      end
      # verify the required parameter 'destination' is set
      if @api_client.config.client_side_validation && destination.nil?
        fail ArgumentError, "Missing the required parameter 'destination' when calling ToolboxApi.move_file"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/move'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source'] = source
      query_params[:'destination'] = destination

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.move_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#move_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move mouse
    # Move mouse cursor to specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_move_request [MouseMoveRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [MouseMoveResponse]
    def move_mouse(sandbox_id, mouse_move_request, opts = {})
      data, _status_code, _headers = move_mouse_with_http_info(sandbox_id, mouse_move_request, opts)
      data
    end

    # Move mouse
    # Move mouse cursor to specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_move_request [MouseMoveRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(MouseMoveResponse, Integer, Hash)>] MouseMoveResponse data, response status code and response headers
    def move_mouse_with_http_info(sandbox_id, mouse_move_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.move_mouse ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.move_mouse"
      end
      # verify the required parameter 'mouse_move_request' is set
      if @api_client.config.client_side_validation && mouse_move_request.nil?
        fail ArgumentError, "Missing the required parameter 'mouse_move_request' when calling ToolboxApi.move_mouse"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/mouse/move'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mouse_move_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MouseMoveResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.move_mouse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#move_mouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Press hotkey
    # Press a hotkey combination
    # @param sandbox_id [String] 
    # @param keyboard_hotkey_request [KeyboardHotkeyRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def press_hotkey(sandbox_id, keyboard_hotkey_request, opts = {})
      press_hotkey_with_http_info(sandbox_id, keyboard_hotkey_request, opts)
      nil
    end

    # Press hotkey
    # Press a hotkey combination
    # @param sandbox_id [String] 
    # @param keyboard_hotkey_request [KeyboardHotkeyRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def press_hotkey_with_http_info(sandbox_id, keyboard_hotkey_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.press_hotkey ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.press_hotkey"
      end
      # verify the required parameter 'keyboard_hotkey_request' is set
      if @api_client.config.client_side_validation && keyboard_hotkey_request.nil?
        fail ArgumentError, "Missing the required parameter 'keyboard_hotkey_request' when calling ToolboxApi.press_hotkey"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/keyboard/hotkey'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(keyboard_hotkey_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.press_hotkey",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#press_hotkey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Press key
    # Press a key with optional modifiers
    # @param sandbox_id [String] 
    # @param keyboard_press_request [KeyboardPressRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def press_key(sandbox_id, keyboard_press_request, opts = {})
      press_key_with_http_info(sandbox_id, keyboard_press_request, opts)
      nil
    end

    # Press key
    # Press a key with optional modifiers
    # @param sandbox_id [String] 
    # @param keyboard_press_request [KeyboardPressRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def press_key_with_http_info(sandbox_id, keyboard_press_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.press_key ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.press_key"
      end
      # verify the required parameter 'keyboard_press_request' is set
      if @api_client.config.client_side_validation && keyboard_press_request.nil?
        fail ArgumentError, "Missing the required parameter 'keyboard_press_request' when calling ToolboxApi.press_key"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/keyboard/key'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(keyboard_press_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.press_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#press_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace in files
    # Replace text/pattern in multiple files inside sandbox
    # @param sandbox_id [String] 
    # @param replace_request [ReplaceRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<ReplaceResult>]
    def replace_in_files(sandbox_id, replace_request, opts = {})
      data, _status_code, _headers = replace_in_files_with_http_info(sandbox_id, replace_request, opts)
      data
    end

    # Replace in files
    # Replace text/pattern in multiple files inside sandbox
    # @param sandbox_id [String] 
    # @param replace_request [ReplaceRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(Array<ReplaceResult>, Integer, Hash)>] Array<ReplaceResult> data, response status code and response headers
    def replace_in_files_with_http_info(sandbox_id, replace_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.replace_in_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.replace_in_files"
      end
      # verify the required parameter 'replace_request' is set
      if @api_client.config.client_side_validation && replace_request.nil?
        fail ArgumentError, "Missing the required parameter 'replace_request' when calling ToolboxApi.replace_in_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/replace'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(replace_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ReplaceResult>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.replace_in_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#replace_in_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restart process
    # Restart a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ProcessRestartResponse]
    def restart_process(process_name, sandbox_id, opts = {})
      data, _status_code, _headers = restart_process_with_http_info(process_name, sandbox_id, opts)
      data
    end

    # Restart process
    # Restart a specific VNC process
    # @param process_name [String] 
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ProcessRestartResponse, Integer, Hash)>] ProcessRestartResponse data, response status code and response headers
    def restart_process_with_http_info(process_name, sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.restart_process ...'
      end
      # verify the required parameter 'process_name' is set
      if @api_client.config.client_side_validation && process_name.nil?
        fail ArgumentError, "Missing the required parameter 'process_name' when calling ToolboxApi.restart_process"
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.restart_process"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/restart'.sub('{' + 'processName' + '}', CGI.escape(process_name.to_s)).sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessRestartResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.restart_process",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#restart_process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Scroll mouse
    # Scroll mouse at specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_scroll_request [MouseScrollRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [MouseScrollResponse]
    def scroll_mouse(sandbox_id, mouse_scroll_request, opts = {})
      data, _status_code, _headers = scroll_mouse_with_http_info(sandbox_id, mouse_scroll_request, opts)
      data
    end

    # Scroll mouse
    # Scroll mouse at specified coordinates
    # @param sandbox_id [String] 
    # @param mouse_scroll_request [MouseScrollRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(MouseScrollResponse, Integer, Hash)>] MouseScrollResponse data, response status code and response headers
    def scroll_mouse_with_http_info(sandbox_id, mouse_scroll_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.scroll_mouse ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.scroll_mouse"
      end
      # verify the required parameter 'mouse_scroll_request' is set
      if @api_client.config.client_side_validation && mouse_scroll_request.nil?
        fail ArgumentError, "Missing the required parameter 'mouse_scroll_request' when calling ToolboxApi.scroll_mouse"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/mouse/scroll'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mouse_scroll_request)

      # return_type
      return_type = opts[:debug_return_type] || 'MouseScrollResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.scroll_mouse",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#scroll_mouse\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search files
    # Search for files inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param pattern [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [SearchFilesResponse]
    def search_files(sandbox_id, path, pattern, opts = {})
      data, _status_code, _headers = search_files_with_http_info(sandbox_id, path, pattern, opts)
      data
    end

    # Search files
    # Search for files inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param pattern [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(SearchFilesResponse, Integer, Hash)>] SearchFilesResponse data, response status code and response headers
    def search_files_with_http_info(sandbox_id, path, pattern, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.search_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.search_files"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.search_files"
      end
      # verify the required parameter 'pattern' is set
      if @api_client.config.client_side_validation && pattern.nil?
        fail ArgumentError, "Missing the required parameter 'pattern' when calling ToolboxApi.search_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/search'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'pattern'] = pattern

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchFilesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.search_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#search_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set file permissions
    # Set file owner/group/permissions inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [String] :owner 
    # @option opts [String] :group 
    # @option opts [String] :mode 
    # @return [nil]
    def set_file_permissions(sandbox_id, path, opts = {})
      set_file_permissions_with_http_info(sandbox_id, path, opts)
      nil
    end

    # Set file permissions
    # Set file owner/group/permissions inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [String] :owner 
    # @option opts [String] :group 
    # @option opts [String] :mode 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def set_file_permissions_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.set_file_permissions ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.set_file_permissions"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.set_file_permissions"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/permissions'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?
      query_params[:'group'] = opts[:'group'] if !opts[:'group'].nil?
      query_params[:'mode'] = opts[:'mode'] if !opts[:'mode'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.set_file_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#set_file_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Start computer use processes
    # Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ComputerUseStartResponse]
    def start_computer_use(sandbox_id, opts = {})
      data, _status_code, _headers = start_computer_use_with_http_info(sandbox_id, opts)
      data
    end

    # Start computer use processes
    # Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ComputerUseStartResponse, Integer, Hash)>] ComputerUseStartResponse data, response status code and response headers
    def start_computer_use_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.start_computer_use ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.start_computer_use"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/start'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComputerUseStartResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.start_computer_use",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#start_computer_use\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stop computer use processes
    # Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [ComputerUseStopResponse]
    def stop_computer_use(sandbox_id, opts = {})
      data, _status_code, _headers = stop_computer_use_with_http_info(sandbox_id, opts)
      data
    end

    # Stop computer use processes
    # Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(ComputerUseStopResponse, Integer, Hash)>] ComputerUseStopResponse data, response status code and response headers
    def stop_computer_use_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.stop_computer_use ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.stop_computer_use"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/stop'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComputerUseStopResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.stop_computer_use",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#stop_computer_use\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take compressed region screenshot
    # Take a compressed screenshot of a specific region
    # @param sandbox_id [String] 
    # @param height [Float] 
    # @param width [Float] 
    # @param y [Float] 
    # @param x [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Float] :scale 
    # @option opts [Float] :quality 
    # @option opts [String] :format 
    # @option opts [Boolean] :show_cursor 
    # @return [CompressedScreenshotResponse]
    def take_compressed_region_screenshot(sandbox_id, height, width, y, x, opts = {})
      data, _status_code, _headers = take_compressed_region_screenshot_with_http_info(sandbox_id, height, width, y, x, opts)
      data
    end

    # Take compressed region screenshot
    # Take a compressed screenshot of a specific region
    # @param sandbox_id [String] 
    # @param height [Float] 
    # @param width [Float] 
    # @param y [Float] 
    # @param x [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Float] :scale 
    # @option opts [Float] :quality 
    # @option opts [String] :format 
    # @option opts [Boolean] :show_cursor 
    # @return [Array<(CompressedScreenshotResponse, Integer, Hash)>] CompressedScreenshotResponse data, response status code and response headers
    def take_compressed_region_screenshot_with_http_info(sandbox_id, height, width, y, x, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.take_compressed_region_screenshot ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.take_compressed_region_screenshot"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling ToolboxApi.take_compressed_region_screenshot"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling ToolboxApi.take_compressed_region_screenshot"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ToolboxApi.take_compressed_region_screenshot"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ToolboxApi.take_compressed_region_screenshot"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region/compressed'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'height'] = height
      query_params[:'width'] = width
      query_params[:'y'] = y
      query_params[:'x'] = x
      query_params[:'scale'] = opts[:'scale'] if !opts[:'scale'].nil?
      query_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'show_cursor'] = opts[:'show_cursor'] if !opts[:'show_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompressedScreenshotResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.take_compressed_region_screenshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#take_compressed_region_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take compressed screenshot
    # Take a compressed screenshot with format, quality, and scale options
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Float] :scale 
    # @option opts [Float] :quality 
    # @option opts [String] :format 
    # @option opts [Boolean] :show_cursor 
    # @return [CompressedScreenshotResponse]
    def take_compressed_screenshot(sandbox_id, opts = {})
      data, _status_code, _headers = take_compressed_screenshot_with_http_info(sandbox_id, opts)
      data
    end

    # Take compressed screenshot
    # Take a compressed screenshot with format, quality, and scale options
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Float] :scale 
    # @option opts [Float] :quality 
    # @option opts [String] :format 
    # @option opts [Boolean] :show_cursor 
    # @return [Array<(CompressedScreenshotResponse, Integer, Hash)>] CompressedScreenshotResponse data, response status code and response headers
    def take_compressed_screenshot_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.take_compressed_screenshot ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.take_compressed_screenshot"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/screenshot/compressed'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'scale'] = opts[:'scale'] if !opts[:'scale'].nil?
      query_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'show_cursor'] = opts[:'show_cursor'] if !opts[:'show_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CompressedScreenshotResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.take_compressed_screenshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#take_compressed_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take region screenshot
    # Take a screenshot of a specific region
    # @param sandbox_id [String] 
    # @param height [Float] 
    # @param width [Float] 
    # @param y [Float] 
    # @param x [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :show_cursor 
    # @return [RegionScreenshotResponse]
    def take_region_screenshot(sandbox_id, height, width, y, x, opts = {})
      data, _status_code, _headers = take_region_screenshot_with_http_info(sandbox_id, height, width, y, x, opts)
      data
    end

    # Take region screenshot
    # Take a screenshot of a specific region
    # @param sandbox_id [String] 
    # @param height [Float] 
    # @param width [Float] 
    # @param y [Float] 
    # @param x [Float] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :show_cursor 
    # @return [Array<(RegionScreenshotResponse, Integer, Hash)>] RegionScreenshotResponse data, response status code and response headers
    def take_region_screenshot_with_http_info(sandbox_id, height, width, y, x, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.take_region_screenshot ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.take_region_screenshot"
      end
      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling ToolboxApi.take_region_screenshot"
      end
      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling ToolboxApi.take_region_screenshot"
      end
      # verify the required parameter 'y' is set
      if @api_client.config.client_side_validation && y.nil?
        fail ArgumentError, "Missing the required parameter 'y' when calling ToolboxApi.take_region_screenshot"
      end
      # verify the required parameter 'x' is set
      if @api_client.config.client_side_validation && x.nil?
        fail ArgumentError, "Missing the required parameter 'x' when calling ToolboxApi.take_region_screenshot"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'height'] = height
      query_params[:'width'] = width
      query_params[:'y'] = y
      query_params[:'x'] = x
      query_params[:'show_cursor'] = opts[:'show_cursor'] if !opts[:'show_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RegionScreenshotResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.take_region_screenshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#take_region_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Take screenshot
    # Take a screenshot of the entire screen
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :show_cursor 
    # @return [ScreenshotResponse]
    def take_screenshot(sandbox_id, opts = {})
      data, _status_code, _headers = take_screenshot_with_http_info(sandbox_id, opts)
      data
    end

    # Take screenshot
    # Take a screenshot of the entire screen
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [Boolean] :show_cursor 
    # @return [Array<(ScreenshotResponse, Integer, Hash)>] ScreenshotResponse data, response status code and response headers
    def take_screenshot_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.take_screenshot ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.take_screenshot"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/screenshot'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'show_cursor'] = opts[:'show_cursor'] if !opts[:'show_cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScreenshotResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.take_screenshot",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#take_screenshot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Type text
    # Type text using keyboard
    # @param sandbox_id [String] 
    # @param keyboard_type_request [KeyboardTypeRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def type_text(sandbox_id, keyboard_type_request, opts = {})
      type_text_with_http_info(sandbox_id, keyboard_type_request, opts)
      nil
    end

    # Type text
    # Type text using keyboard
    # @param sandbox_id [String] 
    # @param keyboard_type_request [KeyboardTypeRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def type_text_with_http_info(sandbox_id, keyboard_type_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.type_text ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.type_text"
      end
      # verify the required parameter 'keyboard_type_request' is set
      if @api_client.config.client_side_validation && keyboard_type_request.nil?
        fail ArgumentError, "Missing the required parameter 'keyboard_type_request' when calling ToolboxApi.type_text"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/computeruse/keyboard/type'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(keyboard_type_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.type_text",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#type_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload file
    # Upload file inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [File] :file 
    # @return [nil]
    def upload_file(sandbox_id, path, opts = {})
      upload_file_with_http_info(sandbox_id, path, opts)
      nil
    end

    # Upload file
    # Upload file inside sandbox
    # @param sandbox_id [String] 
    # @param path [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @option opts [File] :file 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_file_with_http_info(sandbox_id, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.upload_file ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.upload_file"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ToolboxApi.upload_file"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/upload'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'path'] = path

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.upload_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload multiple files
    # Upload multiple files inside sandbox
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [nil]
    def upload_files(sandbox_id, opts = {})
      upload_files_with_http_info(sandbox_id, opts)
      nil
    end

    # Upload multiple files
    # Upload multiple files inside sandbox
    # @param sandbox_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_daytona_organization_id Use with JWT to specify the organization ID
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def upload_files_with_http_info(sandbox_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ToolboxApi.upload_files ...'
      end
      # verify the required parameter 'sandbox_id' is set
      if @api_client.config.client_side_validation && sandbox_id.nil?
        fail ArgumentError, "Missing the required parameter 'sandbox_id' when calling ToolboxApi.upload_files"
      end
      # resource path
      local_var_path = '/toolbox/{sandboxId}/toolbox/files/bulk-upload'.sub('{' + 'sandboxId' + '}', CGI.escape(sandbox_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Daytona-Organization-ID'] = opts[:'x_daytona_organization_id'] if !opts[:'x_daytona_organization_id'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer', 'oauth2']

      new_options = opts.merge(
        :operation => :"ToolboxApi.upload_files",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ToolboxApi#upload_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
