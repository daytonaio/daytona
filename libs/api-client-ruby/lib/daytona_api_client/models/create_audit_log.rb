=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class CreateAuditLog
    attr_accessor :actor_id

    attr_accessor :actor_email

    attr_accessor :organization_id

    attr_accessor :action

    attr_accessor :target_type

    attr_accessor :target_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'actor_id' => :'actorId',
        :'actor_email' => :'actorEmail',
        :'organization_id' => :'organizationId',
        :'action' => :'action',
        :'target_type' => :'targetType',
        :'target_id' => :'targetId'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'actor_id' => :'String',
        :'actor_email' => :'String',
        :'organization_id' => :'String',
        :'action' => :'String',
        :'target_type' => :'String',
        :'target_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::CreateAuditLog` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::CreateAuditLog`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'actor_id')
        self.actor_id = attributes[:'actor_id']
      else
        self.actor_id = nil
      end

      if attributes.key?(:'actor_email')
        self.actor_email = attributes[:'actor_email']
      else
        self.actor_email = nil
      end

      if attributes.key?(:'organization_id')
        self.organization_id = attributes[:'organization_id']
      end

      if attributes.key?(:'action')
        self.action = attributes[:'action']
      else
        self.action = nil
      end

      if attributes.key?(:'target_type')
        self.target_type = attributes[:'target_type']
      end

      if attributes.key?(:'target_id')
        self.target_id = attributes[:'target_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @actor_id.nil?
        invalid_properties.push('invalid value for "actor_id", actor_id cannot be nil.')
      end

      if @actor_email.nil?
        invalid_properties.push('invalid value for "actor_email", actor_email cannot be nil.')
      end

      if @action.nil?
        invalid_properties.push('invalid value for "action", action cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @actor_id.nil?
      return false if @actor_email.nil?
      return false if @action.nil?
      action_validator = EnumAttributeValidator.new('String', ["create", "read", "update", "delete", "login", "set_default", "update_access", "update_quota", "suspend", "unsuspend", "accept", "decline", "link_account", "unlink_account", "leave_organization", "regenerate_key_pair", "update_scheduling", "start", "stop", "replace_labels", "create_backup", "update_public_status", "set_auto_stop_interval", "set_auto_archive_interval", "set_auto_delete_interval", "archive", "get_port_preview_url", "set_general_status", "activate", "deactivate", "update_network_settings", "get_webhook_app_portal_access", "send_webhook_message", "initialize_webhooks", "update_sandbox_default_limited_network_egress", "toolbox_delete_file", "toolbox_download_file", "toolbox_create_folder", "toolbox_move_file", "toolbox_set_file_permissions", "toolbox_replace_in_files", "toolbox_upload_file", "toolbox_bulk_upload_files", "toolbox_git_add_files", "toolbox_git_create_branch", "toolbox_git_delete_branch", "toolbox_git_clone_repository", "toolbox_git_commit_changes", "toolbox_git_pull_changes", "toolbox_git_push_changes", "toolbox_git_checkout_branch", "toolbox_execute_command", "toolbox_create_session", "toolbox_session_execute_command", "toolbox_delete_session", "toolbox_computer_use_start", "toolbox_computer_use_stop", "toolbox_computer_use_restart_process"])
      return false unless action_validator.valid?(@action)
      target_type_validator = EnumAttributeValidator.new('String', ["api_key", "organization", "organization_invitation", "organization_role", "organization_user", "docker_registry", "runner", "sandbox", "snapshot", "user", "volume"])
      return false unless target_type_validator.valid?(@target_type)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] actor_id Value to be assigned
    def actor_id=(actor_id)
      if actor_id.nil?
        fail ArgumentError, 'actor_id cannot be nil'
      end

      @actor_id = actor_id
    end

    # Custom attribute writer method with validation
    # @param [Object] actor_email Value to be assigned
    def actor_email=(actor_email)
      if actor_email.nil?
        fail ArgumentError, 'actor_email cannot be nil'
      end

      @actor_email = actor_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] action Object to be assigned
    def action=(action)
      validator = EnumAttributeValidator.new('String', ["create", "read", "update", "delete", "login", "set_default", "update_access", "update_quota", "suspend", "unsuspend", "accept", "decline", "link_account", "unlink_account", "leave_organization", "regenerate_key_pair", "update_scheduling", "start", "stop", "replace_labels", "create_backup", "update_public_status", "set_auto_stop_interval", "set_auto_archive_interval", "set_auto_delete_interval", "archive", "get_port_preview_url", "set_general_status", "activate", "deactivate", "update_network_settings", "get_webhook_app_portal_access", "send_webhook_message", "initialize_webhooks", "update_sandbox_default_limited_network_egress", "toolbox_delete_file", "toolbox_download_file", "toolbox_create_folder", "toolbox_move_file", "toolbox_set_file_permissions", "toolbox_replace_in_files", "toolbox_upload_file", "toolbox_bulk_upload_files", "toolbox_git_add_files", "toolbox_git_create_branch", "toolbox_git_delete_branch", "toolbox_git_clone_repository", "toolbox_git_commit_changes", "toolbox_git_pull_changes", "toolbox_git_push_changes", "toolbox_git_checkout_branch", "toolbox_execute_command", "toolbox_create_session", "toolbox_session_execute_command", "toolbox_delete_session", "toolbox_computer_use_start", "toolbox_computer_use_stop", "toolbox_computer_use_restart_process"])
      unless validator.valid?(action)
        fail ArgumentError, "invalid value for \"action\", must be one of #{validator.allowable_values}."
      end
      @action = action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_type Object to be assigned
    def target_type=(target_type)
      validator = EnumAttributeValidator.new('String', ["api_key", "organization", "organization_invitation", "organization_role", "organization_user", "docker_registry", "runner", "sandbox", "snapshot", "user", "volume"])
      unless validator.valid?(target_type)
        fail ArgumentError, "invalid value for \"target_type\", must be one of #{validator.allowable_values}."
      end
      @target_type = target_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          actor_id == o.actor_id &&
          actor_email == o.actor_email &&
          organization_id == o.organization_id &&
          action == o.action &&
          target_type == o.target_type &&
          target_id == o.target_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [actor_id, actor_email, organization_id, action, target_type, target_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
