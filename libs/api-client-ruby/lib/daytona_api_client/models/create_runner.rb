=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class CreateRunner
    attr_accessor :domain

    attr_accessor :api_url

    attr_accessor :proxy_url

    attr_accessor :api_key

    attr_accessor :cpu

    attr_accessor :memory_gi_b

    attr_accessor :disk_gi_b

    attr_accessor :gpu

    attr_accessor :gpu_type

    attr_accessor :_class

    attr_accessor :capacity

    attr_accessor :region

    attr_accessor :version

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain' => :'domain',
        :'api_url' => :'apiUrl',
        :'proxy_url' => :'proxyUrl',
        :'api_key' => :'apiKey',
        :'cpu' => :'cpu',
        :'memory_gi_b' => :'memoryGiB',
        :'disk_gi_b' => :'diskGiB',
        :'gpu' => :'gpu',
        :'gpu_type' => :'gpuType',
        :'_class' => :'class',
        :'capacity' => :'capacity',
        :'region' => :'region',
        :'version' => :'version'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'domain' => :'String',
        :'api_url' => :'String',
        :'proxy_url' => :'String',
        :'api_key' => :'String',
        :'cpu' => :'Float',
        :'memory_gi_b' => :'Float',
        :'disk_gi_b' => :'Float',
        :'gpu' => :'Float',
        :'gpu_type' => :'String',
        :'_class' => :'String',
        :'capacity' => :'Float',
        :'region' => :'String',
        :'version' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::CreateRunner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::CreateRunner`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      else
        self.domain = nil
      end

      if attributes.key?(:'api_url')
        self.api_url = attributes[:'api_url']
      else
        self.api_url = nil
      end

      if attributes.key?(:'proxy_url')
        self.proxy_url = attributes[:'proxy_url']
      else
        self.proxy_url = nil
      end

      if attributes.key?(:'api_key')
        self.api_key = attributes[:'api_key']
      else
        self.api_key = nil
      end

      if attributes.key?(:'cpu')
        self.cpu = attributes[:'cpu']
      else
        self.cpu = nil
      end

      if attributes.key?(:'memory_gi_b')
        self.memory_gi_b = attributes[:'memory_gi_b']
      else
        self.memory_gi_b = nil
      end

      if attributes.key?(:'disk_gi_b')
        self.disk_gi_b = attributes[:'disk_gi_b']
      else
        self.disk_gi_b = nil
      end

      if attributes.key?(:'gpu')
        self.gpu = attributes[:'gpu']
      else
        self.gpu = nil
      end

      if attributes.key?(:'gpu_type')
        self.gpu_type = attributes[:'gpu_type']
      else
        self.gpu_type = nil
      end

      if attributes.key?(:'_class')
        self._class = attributes[:'_class']
      else
        self._class = nil
      end

      if attributes.key?(:'capacity')
        self.capacity = attributes[:'capacity']
      else
        self.capacity = nil
      end

      if attributes.key?(:'region')
        self.region = attributes[:'region']
      else
        self.region = nil
      end

      if attributes.key?(:'version')
        self.version = attributes[:'version']
      else
        self.version = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @api_url.nil?
        invalid_properties.push('invalid value for "api_url", api_url cannot be nil.')
      end

      if @proxy_url.nil?
        invalid_properties.push('invalid value for "proxy_url", proxy_url cannot be nil.')
      end

      if @api_key.nil?
        invalid_properties.push('invalid value for "api_key", api_key cannot be nil.')
      end

      if @cpu.nil?
        invalid_properties.push('invalid value for "cpu", cpu cannot be nil.')
      end

      if @memory_gi_b.nil?
        invalid_properties.push('invalid value for "memory_gi_b", memory_gi_b cannot be nil.')
      end

      if @disk_gi_b.nil?
        invalid_properties.push('invalid value for "disk_gi_b", disk_gi_b cannot be nil.')
      end

      if @gpu.nil?
        invalid_properties.push('invalid value for "gpu", gpu cannot be nil.')
      end

      if @gpu_type.nil?
        invalid_properties.push('invalid value for "gpu_type", gpu_type cannot be nil.')
      end

      if @_class.nil?
        invalid_properties.push('invalid value for "_class", _class cannot be nil.')
      end

      if @capacity.nil?
        invalid_properties.push('invalid value for "capacity", capacity cannot be nil.')
      end

      if @region.nil?
        invalid_properties.push('invalid value for "region", region cannot be nil.')
      end

      if @version.nil?
        invalid_properties.push('invalid value for "version", version cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @domain.nil?
      return false if @api_url.nil?
      return false if @proxy_url.nil?
      return false if @api_key.nil?
      return false if @cpu.nil?
      return false if @memory_gi_b.nil?
      return false if @disk_gi_b.nil?
      return false if @gpu.nil?
      return false if @gpu_type.nil?
      return false if @_class.nil?
      _class_validator = EnumAttributeValidator.new('String', ["small", "medium", "large"])
      return false unless _class_validator.valid?(@_class)
      return false if @capacity.nil?
      return false if @region.nil?
      return false if @version.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] domain Value to be assigned
    def domain=(domain)
      if domain.nil?
        fail ArgumentError, 'domain cannot be nil'
      end

      @domain = domain
    end

    # Custom attribute writer method with validation
    # @param [Object] api_url Value to be assigned
    def api_url=(api_url)
      if api_url.nil?
        fail ArgumentError, 'api_url cannot be nil'
      end

      @api_url = api_url
    end

    # Custom attribute writer method with validation
    # @param [Object] proxy_url Value to be assigned
    def proxy_url=(proxy_url)
      if proxy_url.nil?
        fail ArgumentError, 'proxy_url cannot be nil'
      end

      @proxy_url = proxy_url
    end

    # Custom attribute writer method with validation
    # @param [Object] api_key Value to be assigned
    def api_key=(api_key)
      if api_key.nil?
        fail ArgumentError, 'api_key cannot be nil'
      end

      @api_key = api_key
    end

    # Custom attribute writer method with validation
    # @param [Object] cpu Value to be assigned
    def cpu=(cpu)
      if cpu.nil?
        fail ArgumentError, 'cpu cannot be nil'
      end

      @cpu = cpu
    end

    # Custom attribute writer method with validation
    # @param [Object] memory_gi_b Value to be assigned
    def memory_gi_b=(memory_gi_b)
      if memory_gi_b.nil?
        fail ArgumentError, 'memory_gi_b cannot be nil'
      end

      @memory_gi_b = memory_gi_b
    end

    # Custom attribute writer method with validation
    # @param [Object] disk_gi_b Value to be assigned
    def disk_gi_b=(disk_gi_b)
      if disk_gi_b.nil?
        fail ArgumentError, 'disk_gi_b cannot be nil'
      end

      @disk_gi_b = disk_gi_b
    end

    # Custom attribute writer method with validation
    # @param [Object] gpu Value to be assigned
    def gpu=(gpu)
      if gpu.nil?
        fail ArgumentError, 'gpu cannot be nil'
      end

      @gpu = gpu
    end

    # Custom attribute writer method with validation
    # @param [Object] gpu_type Value to be assigned
    def gpu_type=(gpu_type)
      if gpu_type.nil?
        fail ArgumentError, 'gpu_type cannot be nil'
      end

      @gpu_type = gpu_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _class Object to be assigned
    def _class=(_class)
      validator = EnumAttributeValidator.new('String', ["small", "medium", "large"])
      unless validator.valid?(_class)
        fail ArgumentError, "invalid value for \"_class\", must be one of #{validator.allowable_values}."
      end
      @_class = _class
    end

    # Custom attribute writer method with validation
    # @param [Object] capacity Value to be assigned
    def capacity=(capacity)
      if capacity.nil?
        fail ArgumentError, 'capacity cannot be nil'
      end

      @capacity = capacity
    end

    # Custom attribute writer method with validation
    # @param [Object] region Value to be assigned
    def region=(region)
      if region.nil?
        fail ArgumentError, 'region cannot be nil'
      end

      @region = region
    end

    # Custom attribute writer method with validation
    # @param [Object] version Value to be assigned
    def version=(version)
      if version.nil?
        fail ArgumentError, 'version cannot be nil'
      end

      @version = version
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain == o.domain &&
          api_url == o.api_url &&
          proxy_url == o.proxy_url &&
          api_key == o.api_key &&
          cpu == o.cpu &&
          memory_gi_b == o.memory_gi_b &&
          disk_gi_b == o.disk_gi_b &&
          gpu == o.gpu &&
          gpu_type == o.gpu_type &&
          _class == o._class &&
          capacity == o.capacity &&
          region == o.region &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [domain, api_url, proxy_url, api_key, cpu, memory_gi_b, disk_gi_b, gpu, gpu_type, _class, capacity, region, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
