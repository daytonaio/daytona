=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class Organization
    # Organization ID
    attr_accessor :id

    # Organization name
    attr_accessor :name

    # User ID of the organization creator
    attr_accessor :created_by

    # Personal organization flag
    attr_accessor :personal

    # Creation timestamp
    attr_accessor :created_at

    # Last update timestamp
    attr_accessor :updated_at

    # Suspended flag
    attr_accessor :suspended

    # Suspended at
    attr_accessor :suspended_at

    # Suspended reason
    attr_accessor :suspension_reason

    # Suspended until
    attr_accessor :suspended_until

    # Suspension cleanup grace period hours
    attr_accessor :suspension_cleanup_grace_period_hours

    # Total CPU quota
    attr_accessor :total_cpu_quota

    # Total memory quota
    attr_accessor :total_memory_quota

    # Total disk quota
    attr_accessor :total_disk_quota

    # Max CPU per sandbox
    attr_accessor :max_cpu_per_sandbox

    # Max memory per sandbox
    attr_accessor :max_memory_per_sandbox

    # Max disk per sandbox
    attr_accessor :max_disk_per_sandbox

    # Sandbox default network block all
    attr_accessor :sandbox_limited_network_egress

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'created_by' => :'createdBy',
        :'personal' => :'personal',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'suspended' => :'suspended',
        :'suspended_at' => :'suspendedAt',
        :'suspension_reason' => :'suspensionReason',
        :'suspended_until' => :'suspendedUntil',
        :'suspension_cleanup_grace_period_hours' => :'suspensionCleanupGracePeriodHours',
        :'total_cpu_quota' => :'totalCpuQuota',
        :'total_memory_quota' => :'totalMemoryQuota',
        :'total_disk_quota' => :'totalDiskQuota',
        :'max_cpu_per_sandbox' => :'maxCpuPerSandbox',
        :'max_memory_per_sandbox' => :'maxMemoryPerSandbox',
        :'max_disk_per_sandbox' => :'maxDiskPerSandbox',
        :'sandbox_limited_network_egress' => :'sandboxLimitedNetworkEgress'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'name' => :'String',
        :'created_by' => :'String',
        :'personal' => :'Boolean',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'suspended' => :'Boolean',
        :'suspended_at' => :'Time',
        :'suspension_reason' => :'String',
        :'suspended_until' => :'Time',
        :'suspension_cleanup_grace_period_hours' => :'Float',
        :'total_cpu_quota' => :'Float',
        :'total_memory_quota' => :'Float',
        :'total_disk_quota' => :'Float',
        :'max_cpu_per_sandbox' => :'Float',
        :'max_memory_per_sandbox' => :'Float',
        :'max_disk_per_sandbox' => :'Float',
        :'sandbox_limited_network_egress' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::Organization` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::Organization`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      else
        self.created_by = nil
      end

      if attributes.key?(:'personal')
        self.personal = attributes[:'personal']
      else
        self.personal = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'suspended')
        self.suspended = attributes[:'suspended']
      else
        self.suspended = nil
      end

      if attributes.key?(:'suspended_at')
        self.suspended_at = attributes[:'suspended_at']
      else
        self.suspended_at = nil
      end

      if attributes.key?(:'suspension_reason')
        self.suspension_reason = attributes[:'suspension_reason']
      else
        self.suspension_reason = nil
      end

      if attributes.key?(:'suspended_until')
        self.suspended_until = attributes[:'suspended_until']
      else
        self.suspended_until = nil
      end

      if attributes.key?(:'suspension_cleanup_grace_period_hours')
        self.suspension_cleanup_grace_period_hours = attributes[:'suspension_cleanup_grace_period_hours']
      else
        self.suspension_cleanup_grace_period_hours = nil
      end

      if attributes.key?(:'total_cpu_quota')
        self.total_cpu_quota = attributes[:'total_cpu_quota']
      else
        self.total_cpu_quota = nil
      end

      if attributes.key?(:'total_memory_quota')
        self.total_memory_quota = attributes[:'total_memory_quota']
      else
        self.total_memory_quota = nil
      end

      if attributes.key?(:'total_disk_quota')
        self.total_disk_quota = attributes[:'total_disk_quota']
      else
        self.total_disk_quota = nil
      end

      if attributes.key?(:'max_cpu_per_sandbox')
        self.max_cpu_per_sandbox = attributes[:'max_cpu_per_sandbox']
      else
        self.max_cpu_per_sandbox = nil
      end

      if attributes.key?(:'max_memory_per_sandbox')
        self.max_memory_per_sandbox = attributes[:'max_memory_per_sandbox']
      else
        self.max_memory_per_sandbox = nil
      end

      if attributes.key?(:'max_disk_per_sandbox')
        self.max_disk_per_sandbox = attributes[:'max_disk_per_sandbox']
      else
        self.max_disk_per_sandbox = nil
      end

      if attributes.key?(:'sandbox_limited_network_egress')
        self.sandbox_limited_network_egress = attributes[:'sandbox_limited_network_egress']
      else
        self.sandbox_limited_network_egress = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @created_by.nil?
        invalid_properties.push('invalid value for "created_by", created_by cannot be nil.')
      end

      if @personal.nil?
        invalid_properties.push('invalid value for "personal", personal cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      if @suspended.nil?
        invalid_properties.push('invalid value for "suspended", suspended cannot be nil.')
      end

      if @suspended_at.nil?
        invalid_properties.push('invalid value for "suspended_at", suspended_at cannot be nil.')
      end

      if @suspension_reason.nil?
        invalid_properties.push('invalid value for "suspension_reason", suspension_reason cannot be nil.')
      end

      if @suspended_until.nil?
        invalid_properties.push('invalid value for "suspended_until", suspended_until cannot be nil.')
      end

      if @suspension_cleanup_grace_period_hours.nil?
        invalid_properties.push('invalid value for "suspension_cleanup_grace_period_hours", suspension_cleanup_grace_period_hours cannot be nil.')
      end

      if @total_cpu_quota.nil?
        invalid_properties.push('invalid value for "total_cpu_quota", total_cpu_quota cannot be nil.')
      end

      if @total_memory_quota.nil?
        invalid_properties.push('invalid value for "total_memory_quota", total_memory_quota cannot be nil.')
      end

      if @total_disk_quota.nil?
        invalid_properties.push('invalid value for "total_disk_quota", total_disk_quota cannot be nil.')
      end

      if @max_cpu_per_sandbox.nil?
        invalid_properties.push('invalid value for "max_cpu_per_sandbox", max_cpu_per_sandbox cannot be nil.')
      end

      if @max_memory_per_sandbox.nil?
        invalid_properties.push('invalid value for "max_memory_per_sandbox", max_memory_per_sandbox cannot be nil.')
      end

      if @max_disk_per_sandbox.nil?
        invalid_properties.push('invalid value for "max_disk_per_sandbox", max_disk_per_sandbox cannot be nil.')
      end

      if @sandbox_limited_network_egress.nil?
        invalid_properties.push('invalid value for "sandbox_limited_network_egress", sandbox_limited_network_egress cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @name.nil?
      return false if @created_by.nil?
      return false if @personal.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @suspended.nil?
      return false if @suspended_at.nil?
      return false if @suspension_reason.nil?
      return false if @suspended_until.nil?
      return false if @suspension_cleanup_grace_period_hours.nil?
      return false if @total_cpu_quota.nil?
      return false if @total_memory_quota.nil?
      return false if @total_disk_quota.nil?
      return false if @max_cpu_per_sandbox.nil?
      return false if @max_memory_per_sandbox.nil?
      return false if @max_disk_per_sandbox.nil?
      return false if @sandbox_limited_network_egress.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by)
      if created_by.nil?
        fail ArgumentError, 'created_by cannot be nil'
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] personal Value to be assigned
    def personal=(personal)
      if personal.nil?
        fail ArgumentError, 'personal cannot be nil'
      end

      @personal = personal
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Custom attribute writer method with validation
    # @param [Object] suspended Value to be assigned
    def suspended=(suspended)
      if suspended.nil?
        fail ArgumentError, 'suspended cannot be nil'
      end

      @suspended = suspended
    end

    # Custom attribute writer method with validation
    # @param [Object] suspended_at Value to be assigned
    def suspended_at=(suspended_at)
      if suspended_at.nil?
        fail ArgumentError, 'suspended_at cannot be nil'
      end

      @suspended_at = suspended_at
    end

    # Custom attribute writer method with validation
    # @param [Object] suspension_reason Value to be assigned
    def suspension_reason=(suspension_reason)
      if suspension_reason.nil?
        fail ArgumentError, 'suspension_reason cannot be nil'
      end

      @suspension_reason = suspension_reason
    end

    # Custom attribute writer method with validation
    # @param [Object] suspended_until Value to be assigned
    def suspended_until=(suspended_until)
      if suspended_until.nil?
        fail ArgumentError, 'suspended_until cannot be nil'
      end

      @suspended_until = suspended_until
    end

    # Custom attribute writer method with validation
    # @param [Object] suspension_cleanup_grace_period_hours Value to be assigned
    def suspension_cleanup_grace_period_hours=(suspension_cleanup_grace_period_hours)
      if suspension_cleanup_grace_period_hours.nil?
        fail ArgumentError, 'suspension_cleanup_grace_period_hours cannot be nil'
      end

      @suspension_cleanup_grace_period_hours = suspension_cleanup_grace_period_hours
    end

    # Custom attribute writer method with validation
    # @param [Object] total_cpu_quota Value to be assigned
    def total_cpu_quota=(total_cpu_quota)
      if total_cpu_quota.nil?
        fail ArgumentError, 'total_cpu_quota cannot be nil'
      end

      @total_cpu_quota = total_cpu_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] total_memory_quota Value to be assigned
    def total_memory_quota=(total_memory_quota)
      if total_memory_quota.nil?
        fail ArgumentError, 'total_memory_quota cannot be nil'
      end

      @total_memory_quota = total_memory_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] total_disk_quota Value to be assigned
    def total_disk_quota=(total_disk_quota)
      if total_disk_quota.nil?
        fail ArgumentError, 'total_disk_quota cannot be nil'
      end

      @total_disk_quota = total_disk_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] max_cpu_per_sandbox Value to be assigned
    def max_cpu_per_sandbox=(max_cpu_per_sandbox)
      if max_cpu_per_sandbox.nil?
        fail ArgumentError, 'max_cpu_per_sandbox cannot be nil'
      end

      @max_cpu_per_sandbox = max_cpu_per_sandbox
    end

    # Custom attribute writer method with validation
    # @param [Object] max_memory_per_sandbox Value to be assigned
    def max_memory_per_sandbox=(max_memory_per_sandbox)
      if max_memory_per_sandbox.nil?
        fail ArgumentError, 'max_memory_per_sandbox cannot be nil'
      end

      @max_memory_per_sandbox = max_memory_per_sandbox
    end

    # Custom attribute writer method with validation
    # @param [Object] max_disk_per_sandbox Value to be assigned
    def max_disk_per_sandbox=(max_disk_per_sandbox)
      if max_disk_per_sandbox.nil?
        fail ArgumentError, 'max_disk_per_sandbox cannot be nil'
      end

      @max_disk_per_sandbox = max_disk_per_sandbox
    end

    # Custom attribute writer method with validation
    # @param [Object] sandbox_limited_network_egress Value to be assigned
    def sandbox_limited_network_egress=(sandbox_limited_network_egress)
      if sandbox_limited_network_egress.nil?
        fail ArgumentError, 'sandbox_limited_network_egress cannot be nil'
      end

      @sandbox_limited_network_egress = sandbox_limited_network_egress
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          created_by == o.created_by &&
          personal == o.personal &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          suspended == o.suspended &&
          suspended_at == o.suspended_at &&
          suspension_reason == o.suspension_reason &&
          suspended_until == o.suspended_until &&
          suspension_cleanup_grace_period_hours == o.suspension_cleanup_grace_period_hours &&
          total_cpu_quota == o.total_cpu_quota &&
          total_memory_quota == o.total_memory_quota &&
          total_disk_quota == o.total_disk_quota &&
          max_cpu_per_sandbox == o.max_cpu_per_sandbox &&
          max_memory_per_sandbox == o.max_memory_per_sandbox &&
          max_disk_per_sandbox == o.max_disk_per_sandbox &&
          sandbox_limited_network_egress == o.sandbox_limited_network_egress
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, created_by, personal, created_at, updated_at, suspended, suspended_at, suspension_reason, suspended_until, suspension_cleanup_grace_period_hours, total_cpu_quota, total_memory_quota, total_disk_quota, max_cpu_per_sandbox, max_memory_per_sandbox, max_disk_per_sandbox, sandbox_limited_network_egress].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
