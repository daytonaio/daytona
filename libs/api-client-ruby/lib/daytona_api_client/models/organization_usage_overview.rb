=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class OrganizationUsageOverview
    attr_accessor :total_cpu_quota

    attr_accessor :total_memory_quota

    attr_accessor :total_disk_quota

    attr_accessor :current_cpu_usage

    attr_accessor :current_memory_usage

    attr_accessor :current_disk_usage

    attr_accessor :total_snapshot_quota

    attr_accessor :current_snapshot_usage

    attr_accessor :total_volume_quota

    attr_accessor :current_volume_usage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total_cpu_quota' => :'totalCpuQuota',
        :'total_memory_quota' => :'totalMemoryQuota',
        :'total_disk_quota' => :'totalDiskQuota',
        :'current_cpu_usage' => :'currentCpuUsage',
        :'current_memory_usage' => :'currentMemoryUsage',
        :'current_disk_usage' => :'currentDiskUsage',
        :'total_snapshot_quota' => :'totalSnapshotQuota',
        :'current_snapshot_usage' => :'currentSnapshotUsage',
        :'total_volume_quota' => :'totalVolumeQuota',
        :'current_volume_usage' => :'currentVolumeUsage'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'total_cpu_quota' => :'Float',
        :'total_memory_quota' => :'Float',
        :'total_disk_quota' => :'Float',
        :'current_cpu_usage' => :'Float',
        :'current_memory_usage' => :'Float',
        :'current_disk_usage' => :'Float',
        :'total_snapshot_quota' => :'Float',
        :'current_snapshot_usage' => :'Float',
        :'total_volume_quota' => :'Float',
        :'current_volume_usage' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::OrganizationUsageOverview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::OrganizationUsageOverview`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'total_cpu_quota')
        self.total_cpu_quota = attributes[:'total_cpu_quota']
      else
        self.total_cpu_quota = nil
      end

      if attributes.key?(:'total_memory_quota')
        self.total_memory_quota = attributes[:'total_memory_quota']
      else
        self.total_memory_quota = nil
      end

      if attributes.key?(:'total_disk_quota')
        self.total_disk_quota = attributes[:'total_disk_quota']
      else
        self.total_disk_quota = nil
      end

      if attributes.key?(:'current_cpu_usage')
        self.current_cpu_usage = attributes[:'current_cpu_usage']
      else
        self.current_cpu_usage = nil
      end

      if attributes.key?(:'current_memory_usage')
        self.current_memory_usage = attributes[:'current_memory_usage']
      else
        self.current_memory_usage = nil
      end

      if attributes.key?(:'current_disk_usage')
        self.current_disk_usage = attributes[:'current_disk_usage']
      else
        self.current_disk_usage = nil
      end

      if attributes.key?(:'total_snapshot_quota')
        self.total_snapshot_quota = attributes[:'total_snapshot_quota']
      else
        self.total_snapshot_quota = nil
      end

      if attributes.key?(:'current_snapshot_usage')
        self.current_snapshot_usage = attributes[:'current_snapshot_usage']
      else
        self.current_snapshot_usage = nil
      end

      if attributes.key?(:'total_volume_quota')
        self.total_volume_quota = attributes[:'total_volume_quota']
      else
        self.total_volume_quota = nil
      end

      if attributes.key?(:'current_volume_usage')
        self.current_volume_usage = attributes[:'current_volume_usage']
      else
        self.current_volume_usage = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @total_cpu_quota.nil?
        invalid_properties.push('invalid value for "total_cpu_quota", total_cpu_quota cannot be nil.')
      end

      if @total_memory_quota.nil?
        invalid_properties.push('invalid value for "total_memory_quota", total_memory_quota cannot be nil.')
      end

      if @total_disk_quota.nil?
        invalid_properties.push('invalid value for "total_disk_quota", total_disk_quota cannot be nil.')
      end

      if @current_cpu_usage.nil?
        invalid_properties.push('invalid value for "current_cpu_usage", current_cpu_usage cannot be nil.')
      end

      if @current_memory_usage.nil?
        invalid_properties.push('invalid value for "current_memory_usage", current_memory_usage cannot be nil.')
      end

      if @current_disk_usage.nil?
        invalid_properties.push('invalid value for "current_disk_usage", current_disk_usage cannot be nil.')
      end

      if @total_snapshot_quota.nil?
        invalid_properties.push('invalid value for "total_snapshot_quota", total_snapshot_quota cannot be nil.')
      end

      if @current_snapshot_usage.nil?
        invalid_properties.push('invalid value for "current_snapshot_usage", current_snapshot_usage cannot be nil.')
      end

      if @total_volume_quota.nil?
        invalid_properties.push('invalid value for "total_volume_quota", total_volume_quota cannot be nil.')
      end

      if @current_volume_usage.nil?
        invalid_properties.push('invalid value for "current_volume_usage", current_volume_usage cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @total_cpu_quota.nil?
      return false if @total_memory_quota.nil?
      return false if @total_disk_quota.nil?
      return false if @current_cpu_usage.nil?
      return false if @current_memory_usage.nil?
      return false if @current_disk_usage.nil?
      return false if @total_snapshot_quota.nil?
      return false if @current_snapshot_usage.nil?
      return false if @total_volume_quota.nil?
      return false if @current_volume_usage.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] total_cpu_quota Value to be assigned
    def total_cpu_quota=(total_cpu_quota)
      if total_cpu_quota.nil?
        fail ArgumentError, 'total_cpu_quota cannot be nil'
      end

      @total_cpu_quota = total_cpu_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] total_memory_quota Value to be assigned
    def total_memory_quota=(total_memory_quota)
      if total_memory_quota.nil?
        fail ArgumentError, 'total_memory_quota cannot be nil'
      end

      @total_memory_quota = total_memory_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] total_disk_quota Value to be assigned
    def total_disk_quota=(total_disk_quota)
      if total_disk_quota.nil?
        fail ArgumentError, 'total_disk_quota cannot be nil'
      end

      @total_disk_quota = total_disk_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] current_cpu_usage Value to be assigned
    def current_cpu_usage=(current_cpu_usage)
      if current_cpu_usage.nil?
        fail ArgumentError, 'current_cpu_usage cannot be nil'
      end

      @current_cpu_usage = current_cpu_usage
    end

    # Custom attribute writer method with validation
    # @param [Object] current_memory_usage Value to be assigned
    def current_memory_usage=(current_memory_usage)
      if current_memory_usage.nil?
        fail ArgumentError, 'current_memory_usage cannot be nil'
      end

      @current_memory_usage = current_memory_usage
    end

    # Custom attribute writer method with validation
    # @param [Object] current_disk_usage Value to be assigned
    def current_disk_usage=(current_disk_usage)
      if current_disk_usage.nil?
        fail ArgumentError, 'current_disk_usage cannot be nil'
      end

      @current_disk_usage = current_disk_usage
    end

    # Custom attribute writer method with validation
    # @param [Object] total_snapshot_quota Value to be assigned
    def total_snapshot_quota=(total_snapshot_quota)
      if total_snapshot_quota.nil?
        fail ArgumentError, 'total_snapshot_quota cannot be nil'
      end

      @total_snapshot_quota = total_snapshot_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] current_snapshot_usage Value to be assigned
    def current_snapshot_usage=(current_snapshot_usage)
      if current_snapshot_usage.nil?
        fail ArgumentError, 'current_snapshot_usage cannot be nil'
      end

      @current_snapshot_usage = current_snapshot_usage
    end

    # Custom attribute writer method with validation
    # @param [Object] total_volume_quota Value to be assigned
    def total_volume_quota=(total_volume_quota)
      if total_volume_quota.nil?
        fail ArgumentError, 'total_volume_quota cannot be nil'
      end

      @total_volume_quota = total_volume_quota
    end

    # Custom attribute writer method with validation
    # @param [Object] current_volume_usage Value to be assigned
    def current_volume_usage=(current_volume_usage)
      if current_volume_usage.nil?
        fail ArgumentError, 'current_volume_usage cannot be nil'
      end

      @current_volume_usage = current_volume_usage
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total_cpu_quota == o.total_cpu_quota &&
          total_memory_quota == o.total_memory_quota &&
          total_disk_quota == o.total_disk_quota &&
          current_cpu_usage == o.current_cpu_usage &&
          current_memory_usage == o.current_memory_usage &&
          current_disk_usage == o.current_disk_usage &&
          total_snapshot_quota == o.total_snapshot_quota &&
          current_snapshot_usage == o.current_snapshot_usage &&
          total_volume_quota == o.total_volume_quota &&
          current_volume_usage == o.current_volume_usage
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [total_cpu_quota, total_memory_quota, total_disk_quota, current_cpu_usage, current_memory_usage, current_disk_usage, total_snapshot_quota, current_snapshot_usage, total_volume_quota, current_volume_usage].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
