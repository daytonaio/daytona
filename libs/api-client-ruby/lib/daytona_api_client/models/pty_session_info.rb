=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class PtySessionInfo
    # The unique identifier for the PTY session
    attr_accessor :id

    # Starting directory for the PTY session, defaults to the sandbox's working directory
    attr_accessor :cwd

    # Environment variables for the PTY session
    attr_accessor :envs

    # Number of terminal columns
    attr_accessor :cols

    # Number of terminal rows
    attr_accessor :rows

    # When the PTY session was created
    attr_accessor :created_at

    # Whether the PTY session is currently active
    attr_accessor :active

    # Whether the PTY session uses lazy start (only start when first client connects)
    attr_accessor :lazy_start

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'cwd' => :'cwd',
        :'envs' => :'envs',
        :'cols' => :'cols',
        :'rows' => :'rows',
        :'created_at' => :'createdAt',
        :'active' => :'active',
        :'lazy_start' => :'lazyStart'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'cwd' => :'String',
        :'envs' => :'Object',
        :'cols' => :'Float',
        :'rows' => :'Float',
        :'created_at' => :'String',
        :'active' => :'Boolean',
        :'lazy_start' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::PtySessionInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::PtySessionInfo`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'cwd')
        self.cwd = attributes[:'cwd']
      else
        self.cwd = nil
      end

      if attributes.key?(:'envs')
        self.envs = attributes[:'envs']
      else
        self.envs = nil
      end

      if attributes.key?(:'cols')
        self.cols = attributes[:'cols']
      else
        self.cols = nil
      end

      if attributes.key?(:'rows')
        self.rows = attributes[:'rows']
      else
        self.rows = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      else
        self.active = nil
      end

      if attributes.key?(:'lazy_start')
        self.lazy_start = attributes[:'lazy_start']
      else
        self.lazy_start = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @cwd.nil?
        invalid_properties.push('invalid value for "cwd", cwd cannot be nil.')
      end

      if @envs.nil?
        invalid_properties.push('invalid value for "envs", envs cannot be nil.')
      end

      if @cols.nil?
        invalid_properties.push('invalid value for "cols", cols cannot be nil.')
      end

      if @rows.nil?
        invalid_properties.push('invalid value for "rows", rows cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @active.nil?
        invalid_properties.push('invalid value for "active", active cannot be nil.')
      end

      if @lazy_start.nil?
        invalid_properties.push('invalid value for "lazy_start", lazy_start cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @cwd.nil?
      return false if @envs.nil?
      return false if @cols.nil?
      return false if @rows.nil?
      return false if @created_at.nil?
      return false if @active.nil?
      return false if @lazy_start.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] cwd Value to be assigned
    def cwd=(cwd)
      if cwd.nil?
        fail ArgumentError, 'cwd cannot be nil'
      end

      @cwd = cwd
    end

    # Custom attribute writer method with validation
    # @param [Object] envs Value to be assigned
    def envs=(envs)
      if envs.nil?
        fail ArgumentError, 'envs cannot be nil'
      end

      @envs = envs
    end

    # Custom attribute writer method with validation
    # @param [Object] cols Value to be assigned
    def cols=(cols)
      if cols.nil?
        fail ArgumentError, 'cols cannot be nil'
      end

      @cols = cols
    end

    # Custom attribute writer method with validation
    # @param [Object] rows Value to be assigned
    def rows=(rows)
      if rows.nil?
        fail ArgumentError, 'rows cannot be nil'
      end

      @rows = rows
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] active Value to be assigned
    def active=(active)
      if active.nil?
        fail ArgumentError, 'active cannot be nil'
      end

      @active = active
    end

    # Custom attribute writer method with validation
    # @param [Object] lazy_start Value to be assigned
    def lazy_start=(lazy_start)
      if lazy_start.nil?
        fail ArgumentError, 'lazy_start cannot be nil'
      end

      @lazy_start = lazy_start
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          cwd == o.cwd &&
          envs == o.envs &&
          cols == o.cols &&
          rows == o.rows &&
          created_at == o.created_at &&
          active == o.active &&
          lazy_start == o.lazy_start
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, cwd, envs, cols, rows, created_at, active, lazy_start].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
