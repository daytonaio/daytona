=begin
#Daytona

#Daytona AI platform API Docs

The version of the OpenAPI document: 1.0
Contact: support@daytona.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module DaytonaApiClient
  class SnapshotDto
    attr_accessor :id

    attr_accessor :organization_id

    attr_accessor :general

    attr_accessor :name

    attr_accessor :image_name

    attr_accessor :state

    attr_accessor :size

    attr_accessor :entrypoint

    attr_accessor :cpu

    attr_accessor :gpu

    attr_accessor :mem

    attr_accessor :disk

    attr_accessor :error_reason

    attr_accessor :created_at

    attr_accessor :updated_at

    attr_accessor :last_used_at

    # Build information for the snapshot
    attr_accessor :build_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'organization_id' => :'organizationId',
        :'general' => :'general',
        :'name' => :'name',
        :'image_name' => :'imageName',
        :'state' => :'state',
        :'size' => :'size',
        :'entrypoint' => :'entrypoint',
        :'cpu' => :'cpu',
        :'gpu' => :'gpu',
        :'mem' => :'mem',
        :'disk' => :'disk',
        :'error_reason' => :'errorReason',
        :'created_at' => :'createdAt',
        :'updated_at' => :'updatedAt',
        :'last_used_at' => :'lastUsedAt',
        :'build_info' => :'buildInfo'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'organization_id' => :'String',
        :'general' => :'Boolean',
        :'name' => :'String',
        :'image_name' => :'String',
        :'state' => :'SnapshotState',
        :'size' => :'Float',
        :'entrypoint' => :'Array<String>',
        :'cpu' => :'Float',
        :'gpu' => :'Float',
        :'mem' => :'Float',
        :'disk' => :'Float',
        :'error_reason' => :'String',
        :'created_at' => :'Time',
        :'updated_at' => :'Time',
        :'last_used_at' => :'Time',
        :'build_info' => :'BuildInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'size',
        :'entrypoint',
        :'error_reason',
        :'last_used_at',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `DaytonaApiClient::SnapshotDto` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `DaytonaApiClient::SnapshotDto`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'organization_id')
        self.organization_id = attributes[:'organization_id']
      end

      if attributes.key?(:'general')
        self.general = attributes[:'general']
      else
        self.general = nil
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = nil
      end

      if attributes.key?(:'image_name')
        self.image_name = attributes[:'image_name']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      else
        self.state = nil
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      else
        self.size = nil
      end

      if attributes.key?(:'entrypoint')
        if (value = attributes[:'entrypoint']).is_a?(Array)
          self.entrypoint = value
        end
      else
        self.entrypoint = nil
      end

      if attributes.key?(:'cpu')
        self.cpu = attributes[:'cpu']
      else
        self.cpu = nil
      end

      if attributes.key?(:'gpu')
        self.gpu = attributes[:'gpu']
      else
        self.gpu = nil
      end

      if attributes.key?(:'mem')
        self.mem = attributes[:'mem']
      else
        self.mem = nil
      end

      if attributes.key?(:'disk')
        self.disk = attributes[:'disk']
      else
        self.disk = nil
      end

      if attributes.key?(:'error_reason')
        self.error_reason = attributes[:'error_reason']
      else
        self.error_reason = nil
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      else
        self.created_at = nil
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      else
        self.updated_at = nil
      end

      if attributes.key?(:'last_used_at')
        self.last_used_at = attributes[:'last_used_at']
      else
        self.last_used_at = nil
      end

      if attributes.key?(:'build_info')
        self.build_info = attributes[:'build_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @general.nil?
        invalid_properties.push('invalid value for "general", general cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @state.nil?
        invalid_properties.push('invalid value for "state", state cannot be nil.')
      end

      if @cpu.nil?
        invalid_properties.push('invalid value for "cpu", cpu cannot be nil.')
      end

      if @gpu.nil?
        invalid_properties.push('invalid value for "gpu", gpu cannot be nil.')
      end

      if @mem.nil?
        invalid_properties.push('invalid value for "mem", mem cannot be nil.')
      end

      if @disk.nil?
        invalid_properties.push('invalid value for "disk", disk cannot be nil.')
      end

      if @created_at.nil?
        invalid_properties.push('invalid value for "created_at", created_at cannot be nil.')
      end

      if @updated_at.nil?
        invalid_properties.push('invalid value for "updated_at", updated_at cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @general.nil?
      return false if @name.nil?
      return false if @state.nil?
      return false if @cpu.nil?
      return false if @gpu.nil?
      return false if @mem.nil?
      return false if @disk.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] general Value to be assigned
    def general=(general)
      if general.nil?
        fail ArgumentError, 'general cannot be nil'
      end

      @general = general
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] state Value to be assigned
    def state=(state)
      if state.nil?
        fail ArgumentError, 'state cannot be nil'
      end

      @state = state
    end

    # Custom attribute writer method with validation
    # @param [Object] cpu Value to be assigned
    def cpu=(cpu)
      if cpu.nil?
        fail ArgumentError, 'cpu cannot be nil'
      end

      @cpu = cpu
    end

    # Custom attribute writer method with validation
    # @param [Object] gpu Value to be assigned
    def gpu=(gpu)
      if gpu.nil?
        fail ArgumentError, 'gpu cannot be nil'
      end

      @gpu = gpu
    end

    # Custom attribute writer method with validation
    # @param [Object] mem Value to be assigned
    def mem=(mem)
      if mem.nil?
        fail ArgumentError, 'mem cannot be nil'
      end

      @mem = mem
    end

    # Custom attribute writer method with validation
    # @param [Object] disk Value to be assigned
    def disk=(disk)
      if disk.nil?
        fail ArgumentError, 'disk cannot be nil'
      end

      @disk = disk
    end

    # Custom attribute writer method with validation
    # @param [Object] created_at Value to be assigned
    def created_at=(created_at)
      if created_at.nil?
        fail ArgumentError, 'created_at cannot be nil'
      end

      @created_at = created_at
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_at Value to be assigned
    def updated_at=(updated_at)
      if updated_at.nil?
        fail ArgumentError, 'updated_at cannot be nil'
      end

      @updated_at = updated_at
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          organization_id == o.organization_id &&
          general == o.general &&
          name == o.name &&
          image_name == o.image_name &&
          state == o.state &&
          size == o.size &&
          entrypoint == o.entrypoint &&
          cpu == o.cpu &&
          gpu == o.gpu &&
          mem == o.mem &&
          disk == o.disk &&
          error_reason == o.error_reason &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          last_used_at == o.last_used_at &&
          build_info == o.build_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, organization_id, general, name, image_name, state, size, entrypoint, cpu, gpu, mem, disk, error_reason, created_at, updated_at, last_used_at, build_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = DaytonaApiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
