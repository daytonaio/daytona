/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { AdminCreateDockerRegistry } from '../models'
// @ts-ignore
import type { AdminUpdateDockerRegistry } from '../models'
// @ts-ignore
import type { DockerRegistry } from '../models'
/**
 * AdminRegistriesApi - axios parameter creator
 * @export
 */
export const AdminRegistriesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create registry
     * @param {AdminCreateDockerRegistry} adminCreateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRegistry: async (
      adminCreateDockerRegistry: AdminCreateDockerRegistry,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminCreateDockerRegistry' is not null or undefined
      assertParamExists('adminCreateRegistry', 'adminCreateDockerRegistry', adminCreateDockerRegistry)
      const localVarPath = `/admin/registries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminCreateDockerRegistry,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteRegistry: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminDeleteRegistry', 'id', id)
      const localVarPath = `/admin/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRegistry: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminGetRegistry', 'id', id)
      const localVarPath = `/admin/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List registries
     * @param {string} [organizationId] Filter registries by organization ID
     * @param {string} [region] Filter registries by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRegistries: async (
      organizationId?: string,
      region?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/registries`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (organizationId !== undefined) {
        localVarQueryParameter['organizationId'] = organizationId
      }

      if (region !== undefined) {
        localVarQueryParameter['region'] = region
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update registry
     * @param {string} id Registry ID
     * @param {AdminUpdateDockerRegistry} adminUpdateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateRegistry: async (
      id: string,
      adminUpdateDockerRegistry: AdminUpdateDockerRegistry,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('adminUpdateRegistry', 'id', id)
      // verify required parameter 'adminUpdateDockerRegistry' is not null or undefined
      assertParamExists('adminUpdateRegistry', 'adminUpdateDockerRegistry', adminUpdateDockerRegistry)
      const localVarPath = `/admin/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        adminUpdateDockerRegistry,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminRegistriesApi - functional programming interface
 * @export
 */
export const AdminRegistriesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminRegistriesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {AdminCreateDockerRegistry} adminCreateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminCreateRegistry(
      adminCreateDockerRegistry: AdminCreateDockerRegistry,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateRegistry(adminCreateDockerRegistry, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRegistriesApi.adminCreateRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminDeleteRegistry(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminDeleteRegistry(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRegistriesApi.adminDeleteRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminGetRegistry(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminGetRegistry(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRegistriesApi.adminGetRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List registries
     * @param {string} [organizationId] Filter registries by organization ID
     * @param {string} [region] Filter registries by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminListRegistries(
      organizationId?: string,
      region?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DockerRegistry>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminListRegistries(organizationId, region, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRegistriesApi.adminListRegistries']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update registry
     * @param {string} id Registry ID
     * @param {AdminUpdateDockerRegistry} adminUpdateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminUpdateRegistry(
      id: string,
      adminUpdateDockerRegistry: AdminUpdateDockerRegistry,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminUpdateRegistry(
        id,
        adminUpdateDockerRegistry,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRegistriesApi.adminUpdateRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AdminRegistriesApi - factory interface
 * @export
 */
export const AdminRegistriesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminRegistriesApiFp(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {AdminCreateDockerRegistry} adminCreateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRegistry(
      adminCreateDockerRegistry: AdminCreateDockerRegistry,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp
        .adminCreateRegistry(adminCreateDockerRegistry, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminDeleteRegistry(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.adminDeleteRegistry(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get registry
     * @param {string} id Registry ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminGetRegistry(id: string, options?: RawAxiosRequestConfig): AxiosPromise<DockerRegistry> {
      return localVarFp.adminGetRegistry(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List registries
     * @param {string} [organizationId] Filter registries by organization ID
     * @param {string} [region] Filter registries by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRegistries(
      organizationId?: string,
      region?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<DockerRegistry>> {
      return localVarFp.adminListRegistries(organizationId, region, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update registry
     * @param {string} id Registry ID
     * @param {AdminUpdateDockerRegistry} adminUpdateDockerRegistry
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminUpdateRegistry(
      id: string,
      adminUpdateDockerRegistry: AdminUpdateDockerRegistry,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp
        .adminUpdateRegistry(id, adminUpdateDockerRegistry, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdminRegistriesApi - object-oriented interface
 * @export
 * @class AdminRegistriesApi
 * @extends {BaseAPI}
 */
export class AdminRegistriesApi extends BaseAPI {
  /**
   *
   * @summary Create registry
   * @param {AdminCreateDockerRegistry} adminCreateDockerRegistry
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRegistriesApi
   */
  public adminCreateRegistry(adminCreateDockerRegistry: AdminCreateDockerRegistry, options?: RawAxiosRequestConfig) {
    return AdminRegistriesApiFp(this.configuration)
      .adminCreateRegistry(adminCreateDockerRegistry, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete registry
   * @param {string} id Registry ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRegistriesApi
   */
  public adminDeleteRegistry(id: string, options?: RawAxiosRequestConfig) {
    return AdminRegistriesApiFp(this.configuration)
      .adminDeleteRegistry(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get registry
   * @param {string} id Registry ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRegistriesApi
   */
  public adminGetRegistry(id: string, options?: RawAxiosRequestConfig) {
    return AdminRegistriesApiFp(this.configuration)
      .adminGetRegistry(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List registries
   * @param {string} [organizationId] Filter registries by organization ID
   * @param {string} [region] Filter registries by region name (organization ID is required)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRegistriesApi
   */
  public adminListRegistries(organizationId?: string, region?: string, options?: RawAxiosRequestConfig) {
    return AdminRegistriesApiFp(this.configuration)
      .adminListRegistries(organizationId, region, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update registry
   * @param {string} id Registry ID
   * @param {AdminUpdateDockerRegistry} adminUpdateDockerRegistry
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRegistriesApi
   */
  public adminUpdateRegistry(
    id: string,
    adminUpdateDockerRegistry: AdminUpdateDockerRegistry,
    options?: RawAxiosRequestConfig,
  ) {
    return AdminRegistriesApiFp(this.configuration)
      .adminUpdateRegistry(id, adminUpdateDockerRegistry, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
