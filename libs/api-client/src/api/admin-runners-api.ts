/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { AdminCreateRunner } from '../models'
// @ts-ignore
import type { Runner } from '../models'
// @ts-ignore
import type { RunnerSnapshotDto } from '../models'
/**
 * AdminRunnersApi - axios parameter creator
 * @export
 */
export const AdminRunnersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create runner
     * @param {AdminCreateRunner} adminCreateRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRunner: async (
      adminCreateRunner: AdminCreateRunner,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'adminCreateRunner' is not null or undefined
      assertParamExists('adminCreateRunner', 'adminCreateRunner', adminCreateRunner)
      const localVarPath = `/admin/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(adminCreateRunner, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all runners
     * @param {string} [organizationId] Filter runners by organization ID
     * @param {string} [region] Filter runners by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRunners: async (
      organizationId?: string,
      region?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (organizationId !== undefined) {
        localVarQueryParameter['organizationId'] = organizationId
      }

      if (region !== undefined) {
        localVarQueryParameter['region'] = region
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerBySandboxId: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getRunnerBySandboxId', 'sandboxId', sandboxId)
      const localVarPath = `/admin/runners/by-sandbox/{sandboxId}`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnersBySnapshotRef: async (ref: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'ref' is not null or undefined
      assertParamExists('getRunnersBySnapshotRef', 'ref', ref)
      const localVarPath = `/admin/runners/by-snapshot-ref`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (ref !== undefined) {
        localVarQueryParameter['ref'] = ref
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AdminRunnersApi - functional programming interface
 * @export
 */
export const AdminRunnersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminRunnersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {AdminCreateRunner} adminCreateRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminCreateRunner(
      adminCreateRunner: AdminCreateRunner,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminCreateRunner(adminCreateRunner, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRunnersApi.adminCreateRunner']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all runners
     * @param {string} [organizationId] Filter runners by organization ID
     * @param {string} [region] Filter runners by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async adminListRunners(
      organizationId?: string,
      region?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Runner>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.adminListRunners(organizationId, region, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRunnersApi.adminListRunners']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRunnerBySandboxId(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnerBySandboxId(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRunnersApi.getRunnerBySandboxId']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRunnersBySnapshotRef(
      ref: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RunnerSnapshotDto>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnersBySnapshotRef(ref, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AdminRunnersApi.getRunnersBySnapshotRef']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AdminRunnersApi - factory interface
 * @export
 */
export const AdminRunnersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdminRunnersApiFp(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {AdminCreateRunner} adminCreateRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminCreateRunner(adminCreateRunner: AdminCreateRunner, options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.adminCreateRunner(adminCreateRunner, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all runners
     * @param {string} [organizationId] Filter runners by organization ID
     * @param {string} [region] Filter runners by region name (organization ID is required)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adminListRunners(
      organizationId?: string,
      region?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Runner>> {
      return localVarFp.adminListRunners(organizationId, region, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.getRunnerBySandboxId(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get runners by snapshot ref
     * @param {string} ref Snapshot ref
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnersBySnapshotRef(ref: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<RunnerSnapshotDto>> {
      return localVarFp.getRunnersBySnapshotRef(ref, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AdminRunnersApi - object-oriented interface
 * @export
 * @class AdminRunnersApi
 * @extends {BaseAPI}
 */
export class AdminRunnersApi extends BaseAPI {
  /**
   *
   * @summary Create runner
   * @param {AdminCreateRunner} adminCreateRunner
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRunnersApi
   */
  public adminCreateRunner(adminCreateRunner: AdminCreateRunner, options?: RawAxiosRequestConfig) {
    return AdminRunnersApiFp(this.configuration)
      .adminCreateRunner(adminCreateRunner, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List all runners
   * @param {string} [organizationId] Filter runners by organization ID
   * @param {string} [region] Filter runners by region name (organization ID is required)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRunnersApi
   */
  public adminListRunners(organizationId?: string, region?: string, options?: RawAxiosRequestConfig) {
    return AdminRunnersApiFp(this.configuration)
      .adminListRunners(organizationId, region, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get runner by sandbox ID
   * @param {string} sandboxId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRunnersApi
   */
  public getRunnerBySandboxId(sandboxId: string, options?: RawAxiosRequestConfig) {
    return AdminRunnersApiFp(this.configuration)
      .getRunnerBySandboxId(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get runners by snapshot ref
   * @param {string} ref Snapshot ref
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminRunnersApi
   */
  public getRunnersBySnapshotRef(ref: string, options?: RawAxiosRequestConfig) {
    return AdminRunnersApiFp(this.configuration)
      .getRunnersBySnapshotRef(ref, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
