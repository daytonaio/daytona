/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { AuditLog } from '../models'
// @ts-ignore
import type { CreateAuditLog } from '../models'
// @ts-ignore
import type { PaginatedAuditLogs } from '../models'
/**
 * AuditApi - axios parameter creator
 * @export
 */
export const AuditApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditLog: async (
      createAuditLog: CreateAuditLog,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createAuditLog' is not null or undefined
      assertParamExists('createAuditLog', 'createAuditLog', createAuditLog)
      const localVarPath = `/audit`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createAuditLog, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAuditLogs: async (
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/audit`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAuditLogs: async (
      organizationId: string,
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('getOrganizationAuditLogs', 'organizationId', organizationId)
      const localVarPath = `/audit/organizations/{organizationId}`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AuditApi - functional programming interface
 * @export
 */
export const AuditApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuditApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAuditLog(
      createAuditLog: CreateAuditLog,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditLog>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAuditLog(createAuditLog, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuditApi.createAuditLog']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllAuditLogs(
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAuditLogs>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAuditLogs(limit, page, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuditApi.getAllAuditLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationAuditLogs(
      organizationId: string,
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedAuditLogs>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationAuditLogs(
        organizationId,
        limit,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['AuditApi.getOrganizationAuditLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * AuditApi - factory interface
 * @export
 */
export const AuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AuditApiFp(configuration)
  return {
    /**
     *
     * @summary Create audit log entry
     * @param {CreateAuditLog} createAuditLog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAuditLog(createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig): AxiosPromise<AuditLog> {
      return localVarFp.createAuditLog(createAuditLog, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get all audit logs
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllAuditLogs(limit?: number, page?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedAuditLogs> {
      return localVarFp.getAllAuditLogs(limit, page, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get audit logs for organization
     * @param {string} organizationId Organization ID
     * @param {number} [limit] Number of items per page (default: 10)
     * @param {number} [page] Page number (default: 1)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationAuditLogs(
      organizationId: string,
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedAuditLogs> {
      return localVarFp
        .getOrganizationAuditLogs(organizationId, limit, page, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export class AuditApi extends BaseAPI {
  /**
   *
   * @summary Create audit log entry
   * @param {CreateAuditLog} createAuditLog
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditApi
   */
  public createAuditLog(createAuditLog: CreateAuditLog, options?: RawAxiosRequestConfig) {
    return AuditApiFp(this.configuration)
      .createAuditLog(createAuditLog, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get all audit logs
   * @param {number} [limit] Number of items per page (default: 10)
   * @param {number} [page] Page number (default: 1)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditApi
   */
  public getAllAuditLogs(limit?: number, page?: number, options?: RawAxiosRequestConfig) {
    return AuditApiFp(this.configuration)
      .getAllAuditLogs(limit, page, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get audit logs for organization
   * @param {string} organizationId Organization ID
   * @param {number} [limit] Number of items per page (default: 10)
   * @param {number} [page] Page number (default: 1)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuditApi
   */
  public getOrganizationAuditLogs(
    organizationId: string,
    limit?: number,
    page?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return AuditApiFp(this.configuration)
      .getOrganizationAuditLogs(organizationId, limit, page, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
