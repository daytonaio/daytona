/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { SandboxCreatedPostRequest } from '../models'
// @ts-ignore
import type { SandboxStateUpdatedPostRequest } from '../models'
// @ts-ignore
import type { SnapshotCreatedPostRequest } from '../models'
// @ts-ignore
import type { SnapshotRemovedPostRequest } from '../models'
// @ts-ignore
import type { SnapshotStateUpdatedPostRequest } from '../models'
// @ts-ignore
import type { VolumeCreatedPostRequest } from '../models'
// @ts-ignore
import type { VolumeStateUpdatedPostRequest } from '../models'
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxCreatedPost: async (
      sandboxCreatedPostRequest?: SandboxCreatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/sandbox.created`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sandboxCreatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxStateUpdatedPost: async (
      sandboxStateUpdatedPostRequest?: SandboxStateUpdatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/sandbox.state.updated`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        sandboxStateUpdatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotCreatedPost: async (
      snapshotCreatedPostRequest?: SnapshotCreatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/snapshot.created`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        snapshotCreatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotRemovedPost: async (
      snapshotRemovedPostRequest?: SnapshotRemovedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/snapshot.removed`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        snapshotRemovedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotStateUpdatedPost: async (
      snapshotStateUpdatedPostRequest?: SnapshotStateUpdatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/snapshot.state.updated`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        snapshotStateUpdatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    volumeCreatedPost: async (
      volumeCreatedPostRequest?: VolumeCreatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/volume.created`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        volumeCreatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    volumeStateUpdatedPost: async (
      volumeStateUpdatedPostRequest?: VolumeStateUpdatedPostRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/volume.state.updated`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        volumeStateUpdatedPostRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sandboxCreatedPost(
      sandboxCreatedPostRequest?: SandboxCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxCreatedPost(sandboxCreatedPostRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.sandboxCreatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sandboxStateUpdatedPost(
      sandboxStateUpdatedPostRequest?: SandboxStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxStateUpdatedPost(
        sandboxStateUpdatedPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.sandboxStateUpdatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async snapshotCreatedPost(
      snapshotCreatedPostRequest?: SnapshotCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotCreatedPost(snapshotCreatedPostRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.snapshotCreatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async snapshotRemovedPost(
      snapshotRemovedPostRequest?: SnapshotRemovedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotRemovedPost(snapshotRemovedPostRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.snapshotRemovedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async snapshotStateUpdatedPost(
      snapshotStateUpdatedPostRequest?: SnapshotStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotStateUpdatedPost(
        snapshotStateUpdatedPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.snapshotStateUpdatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async volumeCreatedPost(
      volumeCreatedPostRequest?: VolumeCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.volumeCreatedPost(volumeCreatedPostRequest, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.volumeCreatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async volumeStateUpdatedPost(
      volumeStateUpdatedPostRequest?: VolumeStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.volumeStateUpdatedPost(
        volumeStateUpdatedPostRequest,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DefaultApi.volumeStateUpdatedPost']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxCreatedPost(
      sandboxCreatedPostRequest?: SandboxCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .sandboxCreatedPost(sandboxCreatedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxStateUpdatedPost(
      sandboxStateUpdatedPostRequest?: SandboxStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotCreatedPost(
      snapshotCreatedPostRequest?: SnapshotCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .snapshotCreatedPost(snapshotCreatedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotRemovedPost(
      snapshotRemovedPostRequest?: SnapshotRemovedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .snapshotRemovedPost(snapshotRemovedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotStateUpdatedPost(
      snapshotStateUpdatedPostRequest?: SnapshotStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    volumeCreatedPost(
      volumeCreatedPostRequest?: VolumeCreatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp.volumeCreatedPost(volumeCreatedPostRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    volumeStateUpdatedPost(
      volumeStateUpdatedPostRequest?: VolumeStateUpdatedPostRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {SandboxCreatedPostRequest} [sandboxCreatedPostRequest] Sandbox created event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sandboxCreatedPost(sandboxCreatedPostRequest?: SandboxCreatedPostRequest, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .sandboxCreatedPost(sandboxCreatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {SandboxStateUpdatedPostRequest} [sandboxStateUpdatedPostRequest] Sandbox state updated event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public sandboxStateUpdatedPost(
    sandboxStateUpdatedPostRequest?: SandboxStateUpdatedPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .sandboxStateUpdatedPost(sandboxStateUpdatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {SnapshotCreatedPostRequest} [snapshotCreatedPostRequest] Snapshot created event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public snapshotCreatedPost(snapshotCreatedPostRequest?: SnapshotCreatedPostRequest, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .snapshotCreatedPost(snapshotCreatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {SnapshotRemovedPostRequest} [snapshotRemovedPostRequest] Snapshot removed event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public snapshotRemovedPost(snapshotRemovedPostRequest?: SnapshotRemovedPostRequest, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .snapshotRemovedPost(snapshotRemovedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {SnapshotStateUpdatedPostRequest} [snapshotStateUpdatedPostRequest] Snapshot state updated event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public snapshotStateUpdatedPost(
    snapshotStateUpdatedPostRequest?: SnapshotStateUpdatedPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .snapshotStateUpdatedPost(snapshotStateUpdatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {VolumeCreatedPostRequest} [volumeCreatedPostRequest] Volume created event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public volumeCreatedPost(volumeCreatedPostRequest?: VolumeCreatedPostRequest, options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .volumeCreatedPost(volumeCreatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {VolumeStateUpdatedPostRequest} [volumeStateUpdatedPostRequest] Volume state updated event
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public volumeStateUpdatedPost(
    volumeStateUpdatedPostRequest?: VolumeStateUpdatedPostRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return DefaultApiFp(this.configuration)
      .volumeStateUpdatedPost(volumeStateUpdatedPostRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
