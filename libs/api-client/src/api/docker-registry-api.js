'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.DockerRegistryApi =
  exports.DockerRegistryApiFactory =
  exports.DockerRegistryApiFp =
  exports.DockerRegistryApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * DockerRegistryApi - axios parameter creator
 * @export
 */
const DockerRegistryApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry: async (createDockerRegistry, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'createDockerRegistry' is not null or undefined
      ;(0, common_1.assertParamExists)('createRegistry', 'createDockerRegistry', createDockerRegistry)
      const localVarPath = `/docker-registry`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createDockerRegistry,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry: async (id, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry: async (id, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('getRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess: async (xDaytonaOrganizationID, options = {}) => {
      const localVarPath = `/docker-registry/registry-push-access`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries: async (xDaytonaOrganizationID, options = {}) => {
      const localVarPath = `/docker-registry`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry: async (id, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('setDefaultRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}/set-default`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry: async (id, updateDockerRegistry, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('updateRegistry', 'id', id)
      // verify required parameter 'updateDockerRegistry' is not null or undefined
      ;(0, common_1.assertParamExists)('updateRegistry', 'updateDockerRegistry', updateDockerRegistry)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateDockerRegistry,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.DockerRegistryApiAxiosParamCreator = DockerRegistryApiAxiosParamCreator
/**
 * DockerRegistryApi - functional programming interface
 * @export
 */
const DockerRegistryApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.DockerRegistryApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRegistry(createDockerRegistry, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistry(
        createDockerRegistry,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.createRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRegistry(id, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.deleteRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRegistry(id, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.getRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransientPushAccess(xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTransientPushAccess(xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.getTransientPushAccess']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRegistries(xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistries(xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.listRegistries']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setDefaultRegistry(id, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.setDefaultRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistry(
        id,
        updateDockerRegistry,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['DockerRegistryApi.updateRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.DockerRegistryApiFp = DockerRegistryApiFp
/**
 * DockerRegistryApi - factory interface
 * @export
 */
const DockerRegistryApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.DockerRegistryApiFp)(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry(createDockerRegistry, xDaytonaOrganizationID, options) {
      return localVarFp
        .createRegistry(createDockerRegistry, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry(id, xDaytonaOrganizationID, options) {
      return localVarFp.deleteRegistry(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry(id, xDaytonaOrganizationID, options) {
      return localVarFp.getRegistry(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess(xDaytonaOrganizationID, options) {
      return localVarFp
        .getTransientPushAccess(xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries(xDaytonaOrganizationID, options) {
      return localVarFp.listRegistries(xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry(id, xDaytonaOrganizationID, options) {
      return localVarFp
        .setDefaultRegistry(id, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options) {
      return localVarFp
        .updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.DockerRegistryApiFactory = DockerRegistryApiFactory
/**
 * DockerRegistryApi - object-oriented interface
 * @export
 * @class DockerRegistryApi
 * @extends {BaseAPI}
 */
class DockerRegistryApi extends base_1.BaseAPI {
  /**
   *
   * @summary Create registry
   * @param {CreateDockerRegistry} createDockerRegistry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  createRegistry(createDockerRegistry, xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .createRegistry(createDockerRegistry, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  deleteRegistry(id, xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .deleteRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  getRegistry(id, xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .getRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get temporary registry access for pushing snapshots
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  getTransientPushAccess(xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .getTransientPushAccess(xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List registries
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  listRegistries(xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .listRegistries(xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Set default registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  setDefaultRegistry(id, xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .setDefaultRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update registry
   * @param {string} id ID of the docker registry
   * @param {UpdateDockerRegistry} updateDockerRegistry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options) {
    return (0, exports.DockerRegistryApiFp)(this.configuration)
      .updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.DockerRegistryApi = DockerRegistryApi
//# sourceMappingURL=docker-registry-api.js.map
