/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { CreateDockerRegistry } from '../models'
// @ts-ignore
import type { DockerRegistry } from '../models'
// @ts-ignore
import type { RegistryPushAccessDto } from '../models'
// @ts-ignore
import type { UpdateDockerRegistry } from '../models'
/**
 * DockerRegistryApi - axios parameter creator
 * @export
 */
export const DockerRegistryApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry: async (
      createDockerRegistry: CreateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createDockerRegistry' is not null or undefined
      assertParamExists('createRegistry', 'createDockerRegistry', createDockerRegistry)
      const localVarPath = `/docker-registry`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createDockerRegistry, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry: async (
      id: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry: async (
      id: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess: async (
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/docker-registry/registry-push-access`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries: async (
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/docker-registry`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry: async (
      id: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('setDefaultRegistry', 'id', id)
      const localVarPath = `/docker-registry/{id}/set-default`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry: async (
      id: string,
      updateDockerRegistry: UpdateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateRegistry', 'id', id)
      // verify required parameter 'updateDockerRegistry' is not null or undefined
      assertParamExists('updateRegistry', 'updateDockerRegistry', updateDockerRegistry)
      const localVarPath = `/docker-registry/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateDockerRegistry, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DockerRegistryApi - functional programming interface
 * @export
 */
export const DockerRegistryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DockerRegistryApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRegistry(
      createDockerRegistry: CreateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistry(
        createDockerRegistry,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.createRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRegistry(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.deleteRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRegistry(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.getRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTransientPushAccess(
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryPushAccessDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTransientPushAccess(xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.getTransientPushAccess']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRegistries(
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DockerRegistry>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRegistries(xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.listRegistries']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setDefaultRegistry(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setDefaultRegistry(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.setDefaultRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRegistry(
      id: string,
      updateDockerRegistry: UpdateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DockerRegistry>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRegistry(
        id,
        updateDockerRegistry,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DockerRegistryApi.updateRegistry']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DockerRegistryApi - factory interface
 * @export
 */
export const DockerRegistryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DockerRegistryApiFp(configuration)
  return {
    /**
     *
     * @summary Create registry
     * @param {CreateDockerRegistry} createDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRegistry(
      createDockerRegistry: CreateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp
        .createRegistry(createDockerRegistry, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteRegistry(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRegistry(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp.getRegistry(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get temporary registry access for pushing snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransientPushAccess(
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<RegistryPushAccessDto> {
      return localVarFp
        .getTransientPushAccess(xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List registries
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRegistries(
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<DockerRegistry>> {
      return localVarFp.listRegistries(xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set default registry
     * @param {string} id ID of the docker registry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultRegistry(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp
        .setDefaultRegistry(id, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update registry
     * @param {string} id ID of the docker registry
     * @param {UpdateDockerRegistry} updateDockerRegistry
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRegistry(
      id: string,
      updateDockerRegistry: UpdateDockerRegistry,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DockerRegistry> {
      return localVarFp
        .updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DockerRegistryApi - object-oriented interface
 * @export
 * @class DockerRegistryApi
 * @extends {BaseAPI}
 */
export class DockerRegistryApi extends BaseAPI {
  /**
   *
   * @summary Create registry
   * @param {CreateDockerRegistry} createDockerRegistry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public createRegistry(
    createDockerRegistry: CreateDockerRegistry,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DockerRegistryApiFp(this.configuration)
      .createRegistry(createDockerRegistry, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public deleteRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return DockerRegistryApiFp(this.configuration)
      .deleteRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public getRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return DockerRegistryApiFp(this.configuration)
      .getRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get temporary registry access for pushing snapshots
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public getTransientPushAccess(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return DockerRegistryApiFp(this.configuration)
      .getTransientPushAccess(xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List registries
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public listRegistries(xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return DockerRegistryApiFp(this.configuration)
      .listRegistries(xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Set default registry
   * @param {string} id ID of the docker registry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public setDefaultRegistry(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return DockerRegistryApiFp(this.configuration)
      .setDefaultRegistry(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update registry
   * @param {string} id ID of the docker registry
   * @param {UpdateDockerRegistry} updateDockerRegistry
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DockerRegistryApi
   */
  public updateRegistry(
    id: string,
    updateDockerRegistry: UpdateDockerRegistry,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return DockerRegistryApiFp(this.configuration)
      .updateRegistry(id, updateDockerRegistry, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
