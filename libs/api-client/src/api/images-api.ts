/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { BuildImage } from '../models'
// @ts-ignore
import type { CreateImage } from '../models'
// @ts-ignore
import type { ImageDto } from '../models'
// @ts-ignore
import type { PaginatedImagesDto } from '../models'
// @ts-ignore
import type { SetImageGeneralStatus } from '../models'
// @ts-ignore
import type { ToggleState } from '../models'
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Build a Docker image
     * @param {BuildImage} buildImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildImage: async (
      buildImage: BuildImage,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'buildImage' is not null or undefined
      assertParamExists('buildImage', 'buildImage', buildImage)
      const localVarPath = `/images/build`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(buildImage, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create a new image
     * @param {CreateImage} createImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImage: async (
      createImage: CreateImage,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createImage' is not null or undefined
      assertParamExists('createImage', 'createImage', createImage)
      const localVarPath = `/images`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createImage, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all images
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllImages: async (
      xDaytonaOrganizationID?: string,
      limit?: number,
      page?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/images`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }

      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get image by ID
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImage: async (
      id: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getImage', 'id', id)
      const localVarPath = `/images/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get image build logs
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageBuildLogs: async (
      id: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getImageBuildLogs', 'id', id)
      const localVarPath = `/images/{id}/build-logs`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete image
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeImage: async (
      id: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('removeImage', 'id', id)
      const localVarPath = `/images/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set image general status
     * @param {string} id Image ID
     * @param {SetImageGeneralStatus} setImageGeneralStatus
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setImageGeneralStatus: async (
      id: string,
      setImageGeneralStatus: SetImageGeneralStatus,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('setImageGeneralStatus', 'id', id)
      // verify required parameter 'setImageGeneralStatus' is not null or undefined
      assertParamExists('setImageGeneralStatus', 'setImageGeneralStatus', setImageGeneralStatus)
      const localVarPath = `/images/{id}/general`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(setImageGeneralStatus, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Toggle image state
     * @param {string} id Image ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleImageState: async (
      id: string,
      toggleState: ToggleState,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('toggleImageState', 'id', id)
      // verify required parameter 'toggleState' is not null or undefined
      assertParamExists('toggleImageState', 'toggleState', toggleState)
      const localVarPath = `/images/{id}/toggle`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(toggleState, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Build a Docker image
     * @param {BuildImage} buildImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buildImage(
      buildImage: BuildImage,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buildImage(buildImage, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.buildImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create a new image
     * @param {CreateImage} createImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createImage(
      createImage: CreateImage,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createImage(
        createImage,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.createImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all images
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllImages(
      xDaytonaOrganizationID?: string,
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedImagesDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllImages(
        xDaytonaOrganizationID,
        limit,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.getAllImages']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get image by ID
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getImage(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getImage(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.getImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get image build logs
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getImageBuildLogs(
      id: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getImageBuildLogs(
        id,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.getImageBuildLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete image
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeImage(
      id: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeImage(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.removeImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set image general status
     * @param {string} id Image ID
     * @param {SetImageGeneralStatus} setImageGeneralStatus
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setImageGeneralStatus(
      id: string,
      setImageGeneralStatus: SetImageGeneralStatus,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setImageGeneralStatus(
        id,
        setImageGeneralStatus,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.setImageGeneralStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Toggle image state
     * @param {string} id Image ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async toggleImageState(
      id: string,
      toggleState: ToggleState,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageDto>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.toggleImageState(
        id,
        toggleState,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.toggleImageState']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ImagesApiFp(configuration)
  return {
    /**
     *
     * @summary Build a Docker image
     * @param {BuildImage} buildImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildImage(
      buildImage: BuildImage,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageDto> {
      return localVarFp
        .buildImage(buildImage, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create a new image
     * @param {CreateImage} createImage
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createImage(
      createImage: CreateImage,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageDto> {
      return localVarFp
        .createImage(createImage, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all images
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllImages(
      xDaytonaOrganizationID?: string,
      limit?: number,
      page?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedImagesDto> {
      return localVarFp
        .getAllImages(xDaytonaOrganizationID, limit, page, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get image by ID
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImage(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<ImageDto> {
      return localVarFp.getImage(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get image build logs
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getImageBuildLogs(
      id: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .getImageBuildLogs(id, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete image
     * @param {string} id Image ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeImage(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.removeImage(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set image general status
     * @param {string} id Image ID
     * @param {SetImageGeneralStatus} setImageGeneralStatus
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setImageGeneralStatus(
      id: string,
      setImageGeneralStatus: SetImageGeneralStatus,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageDto> {
      return localVarFp
        .setImageGeneralStatus(id, setImageGeneralStatus, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Toggle image state
     * @param {string} id Image ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleImageState(
      id: string,
      toggleState: ToggleState,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ImageDto> {
      return localVarFp
        .toggleImageState(id, toggleState, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
  /**
   *
   * @summary Build a Docker image
   * @param {BuildImage} buildImage
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public buildImage(buildImage: BuildImage, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .buildImage(buildImage, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create a new image
   * @param {CreateImage} createImage
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public createImage(createImage: CreateImage, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .createImage(createImage, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List all images
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {number} [limit] Number of items per page
   * @param {number} [page] Page number
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getAllImages(xDaytonaOrganizationID?: string, limit?: number, page?: number, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .getAllImages(xDaytonaOrganizationID, limit, page, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get image by ID
   * @param {string} id Image ID
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getImage(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .getImage(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get image build logs
   * @param {string} id Image ID
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow] Whether to follow the logs stream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getImageBuildLogs(
    id: string,
    xDaytonaOrganizationID?: string,
    follow?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ImagesApiFp(this.configuration)
      .getImageBuildLogs(id, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete image
   * @param {string} id Image ID
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public removeImage(id: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .removeImage(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Set image general status
   * @param {string} id Image ID
   * @param {SetImageGeneralStatus} setImageGeneralStatus
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public setImageGeneralStatus(
    id: string,
    setImageGeneralStatus: SetImageGeneralStatus,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ImagesApiFp(this.configuration)
      .setImageGeneralStatus(id, setImageGeneralStatus, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Toggle image state
   * @param {string} id Image ID
   * @param {ToggleState} toggleState
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public toggleImageState(
    id: string,
    toggleState: ToggleState,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ImagesApiFp(this.configuration)
      .toggleImageState(id, toggleState, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
