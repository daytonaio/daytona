'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.ObjectStorageApi =
  exports.ObjectStorageApiFactory =
  exports.ObjectStorageApiFp =
  exports.ObjectStorageApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * ObjectStorageApi - axios parameter creator
 * @export
 */
const ObjectStorageApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushAccess: async (xDaytonaOrganizationID, options = {}) => {
      const localVarPath = `/object-storage/push-access`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.ObjectStorageApiAxiosParamCreator = ObjectStorageApiAxiosParamCreator
/**
 * ObjectStorageApi - functional programming interface
 * @export
 */
const ObjectStorageApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.ObjectStorageApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPushAccess(xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPushAccess(xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['ObjectStorageApi.getPushAccess']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.ObjectStorageApiFp = ObjectStorageApiFp
/**
 * ObjectStorageApi - factory interface
 * @export
 */
const ObjectStorageApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.ObjectStorageApiFp)(configuration)
  return {
    /**
     *
     * @summary Get temporary storage access for pushing objects
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushAccess(xDaytonaOrganizationID, options) {
      return localVarFp.getPushAccess(xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
  }
}
exports.ObjectStorageApiFactory = ObjectStorageApiFactory
/**
 * ObjectStorageApi - object-oriented interface
 * @export
 * @class ObjectStorageApi
 * @extends {BaseAPI}
 */
class ObjectStorageApi extends base_1.BaseAPI {
  /**
   *
   * @summary Get temporary storage access for pushing objects
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ObjectStorageApi
   */
  getPushAccess(xDaytonaOrganizationID, options) {
    return (0, exports.ObjectStorageApiFp)(this.configuration)
      .getPushAccess(xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.ObjectStorageApi = ObjectStorageApi
//# sourceMappingURL=object-storage-api.js.map
