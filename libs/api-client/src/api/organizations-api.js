'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.OrganizationsApi =
  exports.OrganizationsApiFactory =
  exports.OrganizationsApiFp =
  exports.OrganizationsApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
const OrganizationsApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation: async (invitationId, options = {}) => {
      // verify required parameter 'invitationId' is not null or undefined
      ;(0, common_1.assertParamExists)('acceptOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/invitations/{invitationId}/accept`.replace(
        `{${'invitationId'}}`,
        encodeURIComponent(String(invitationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation: async (organizationId, invitationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('cancelOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'invitationId' is not null or undefined
      ;(0, common_1.assertParamExists)('cancelOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/{organizationId}/invitations/{invitationId}/cancel`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'invitationId'}}`, encodeURIComponent(String(invitationId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: async (createOrganization, options = {}) => {
      // verify required parameter 'createOrganization' is not null or undefined
      ;(0, common_1.assertParamExists)('createOrganization', 'createOrganization', createOrganization)
      const localVarPath = `/organizations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createOrganization,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation: async (organizationId, createOrganizationInvitation, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('createOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'createOrganizationInvitation' is not null or undefined
      ;(0, common_1.assertParamExists)(
        'createOrganizationInvitation',
        'createOrganizationInvitation',
        createOrganizationInvitation,
      )
      const localVarPath = `/organizations/{organizationId}/invitations`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createOrganizationInvitation,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole: async (organizationId, createOrganizationRole, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('createOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'createOrganizationRole' is not null or undefined
      ;(0, common_1.assertParamExists)('createOrganizationRole', 'createOrganizationRole', createOrganizationRole)
      const localVarPath = `/organizations/{organizationId}/roles`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createOrganizationRole,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation: async (invitationId, options = {}) => {
      // verify required parameter 'invitationId' is not null or undefined
      ;(0, common_1.assertParamExists)('declineOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/invitations/{invitationId}/decline`.replace(
        `{${'invitationId'}}`,
        encodeURIComponent(String(invitationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember: async (organizationId, userId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteOrganizationMember', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteOrganizationMember', 'userId', userId)
      const localVarPath = `/organizations/{organizationId}/users/{userId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole: async (organizationId, roleId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'roleId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteOrganizationRole', 'roleId', roleId)
      const localVarPath = `/organizations/{organizationId}/roles/{roleId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('getOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser: async (options = {}) => {
      const localVarPath = `/organizations/invitations/count`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('getOrganizationUsageOverview', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/usage`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('leaveOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/leave`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('listOrganizationInvitations', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/invitations`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser: async (options = {}) => {
      const localVarPath = `/organizations/invitations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('listOrganizationMembers', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/users`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('listOrganizationRoles', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/roles`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: async (options = {}) => {
      const localVarPath = `/organizations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization: async (organizationId, organizationSuspension, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('suspendOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/suspend`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        organizationSuspension,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization: async (organizationId, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('unsuspendOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/unsuspend`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAssignedOrganizationRoles: async (organizationId, userId, updateAssignedOrganizationRoles, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateAssignedOrganizationRoles', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateAssignedOrganizationRoles', 'userId', userId)
      // verify required parameter 'updateAssignedOrganizationRoles' is not null or undefined
      ;(0, common_1.assertParamExists)(
        'updateAssignedOrganizationRoles',
        'updateAssignedOrganizationRoles',
        updateAssignedOrganizationRoles,
      )
      const localVarPath = `/organizations/{organizationId}/users/{userId}/assigned-roles`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateAssignedOrganizationRoles,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation: async (organizationId, invitationId, updateOrganizationInvitation, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'invitationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationInvitation', 'invitationId', invitationId)
      // verify required parameter 'updateOrganizationInvitation' is not null or undefined
      ;(0, common_1.assertParamExists)(
        'updateOrganizationInvitation',
        'updateOrganizationInvitation',
        updateOrganizationInvitation,
      )
      const localVarPath = `/organizations/{organizationId}/invitations/{invitationId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'invitationId'}}`, encodeURIComponent(String(invitationId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateOrganizationInvitation,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota: async (organizationId, updateOrganizationQuota, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationQuota', 'organizationId', organizationId)
      // verify required parameter 'updateOrganizationQuota' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationQuota', 'updateOrganizationQuota', updateOrganizationQuota)
      const localVarPath = `/organizations/{organizationId}/quota`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateOrganizationQuota,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole: async (organizationId, roleId, updateOrganizationRole, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'roleId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationRole', 'roleId', roleId)
      // verify required parameter 'updateOrganizationRole' is not null or undefined
      ;(0, common_1.assertParamExists)('updateOrganizationRole', 'updateOrganizationRole', updateOrganizationRole)
      const localVarPath = `/organizations/{organizationId}/roles/{roleId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateOrganizationRole,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleForOrganizationMember: async (organizationId, userId, updateOrganizationMemberRole, options = {}) => {
      // verify required parameter 'organizationId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateRoleForOrganizationMember', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      ;(0, common_1.assertParamExists)('updateRoleForOrganizationMember', 'userId', userId)
      // verify required parameter 'updateOrganizationMemberRole' is not null or undefined
      ;(0, common_1.assertParamExists)(
        'updateRoleForOrganizationMember',
        'updateOrganizationMemberRole',
        updateOrganizationMemberRole,
      )
      const localVarPath = `/organizations/{organizationId}/users/{userId}/role`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        updateOrganizationMemberRole,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.OrganizationsApiAxiosParamCreator = OrganizationsApiAxiosParamCreator
/**
 * OrganizationsApi - functional programming interface
 * @export
 */
const OrganizationsApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.OrganizationsApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptOrganizationInvitation(invitationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.acceptOrganizationInvitation(invitationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.acceptOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelOrganizationInvitation(organizationId, invitationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrganizationInvitation(
        organizationId,
        invitationId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.cancelOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganization(createOrganization, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganization, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.createOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganizationInvitation(organizationId, createOrganizationInvitation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationInvitation(
        organizationId,
        createOrganizationInvitation,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.createOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganizationRole(organizationId, createOrganizationRole, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationRole(
        organizationId,
        createOrganizationRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.createOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async declineOrganizationInvitation(invitationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.declineOrganizationInvitation(invitationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.declineOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.deleteOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationMember(organizationId, userId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(
        organizationId,
        userId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.deleteOrganizationMember']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationRole(organizationId, roleId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationRole(organizationId, roleId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.deleteOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.getOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationInvitationsCountForAuthenticatedUser(options) {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOrganizationInvitationsCountForAuthenticatedUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.getOrganizationInvitationsCountForAuthenticatedUser']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationUsageOverview(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUsageOverview(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.getOrganizationUsageOverview']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaveOrganization(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.leaveOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.leaveOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationInvitations(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvitations(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.listOrganizationInvitations']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationInvitationsForAuthenticatedUser(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvitationsForAuthenticatedUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.listOrganizationInvitationsForAuthenticatedUser']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationMembers(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationMembers(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.listOrganizationMembers']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationRoles(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationRoles(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.listOrganizationRoles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizations(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.listOrganizations']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async suspendOrganization(organizationId, organizationSuspension, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.suspendOrganization(
        organizationId,
        organizationSuspension,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.suspendOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unsuspendOrganization(organizationId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unsuspendOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.unsuspendOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateAssignedOrganizationRoles(
        organizationId,
        userId,
        updateAssignedOrganizationRoles,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.updateAssignedOrganizationRoles']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationInvitation(
        organizationId,
        invitationId,
        updateOrganizationInvitation,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.updateOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationQuota(organizationId, updateOrganizationQuota, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationQuota(
        organizationId,
        updateOrganizationQuota,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.updateOrganizationQuota']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationRole(
        organizationId,
        roleId,
        updateOrganizationRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.updateOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleForOrganizationMember(
        organizationId,
        userId,
        updateOrganizationMemberRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['OrganizationsApi.updateRoleForOrganizationMember']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.OrganizationsApiFp = OrganizationsApiFp
/**
 * OrganizationsApi - factory interface
 * @export
 */
const OrganizationsApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.OrganizationsApiFp)(configuration)
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation(invitationId, options) {
      return localVarFp.acceptOrganizationInvitation(invitationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation(organizationId, invitationId, options) {
      return localVarFp
        .cancelOrganizationInvitation(organizationId, invitationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(createOrganization, options) {
      return localVarFp.createOrganization(createOrganization, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation(organizationId, createOrganizationInvitation, options) {
      return localVarFp
        .createOrganizationInvitation(organizationId, createOrganizationInvitation, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole(organizationId, createOrganizationRole, options) {
      return localVarFp
        .createOrganizationRole(organizationId, createOrganizationRole, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation(invitationId, options) {
      return localVarFp.declineOrganizationInvitation(invitationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organizationId, options) {
      return localVarFp.deleteOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(organizationId, userId, options) {
      return localVarFp
        .deleteOrganizationMember(organizationId, userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole(organizationId, roleId, options) {
      return localVarFp
        .deleteOrganizationRole(organizationId, roleId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organizationId, options) {
      return localVarFp.getOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser(options) {
      return localVarFp
        .getOrganizationInvitationsCountForAuthenticatedUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview(organizationId, options) {
      return localVarFp
        .getOrganizationUsageOverview(organizationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization(organizationId, options) {
      return localVarFp.leaveOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations(organizationId, options) {
      return localVarFp.listOrganizationInvitations(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser(options) {
      return localVarFp
        .listOrganizationInvitationsForAuthenticatedUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(organizationId, options) {
      return localVarFp.listOrganizationMembers(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles(organizationId, options) {
      return localVarFp.listOrganizationRoles(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(options) {
      return localVarFp.listOrganizations(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization(organizationId, organizationSuspension, options) {
      return localVarFp
        .suspendOrganization(organizationId, organizationSuspension, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization(organizationId, options) {
      return localVarFp.unsuspendOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options) {
      return localVarFp
        .updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options) {
      return localVarFp
        .updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota(organizationId, updateOrganizationQuota, options) {
      return localVarFp
        .updateOrganizationQuota(organizationId, updateOrganizationQuota, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options) {
      return localVarFp
        .updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options) {
      return localVarFp
        .updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.OrganizationsApiFactory = OrganizationsApiFactory
/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
class OrganizationsApi extends base_1.BaseAPI {
  /**
   *
   * @summary Accept organization invitation
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  acceptOrganizationInvitation(invitationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .acceptOrganizationInvitation(invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Cancel organization invitation
   * @param {string} organizationId Organization ID
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  cancelOrganizationInvitation(organizationId, invitationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .cancelOrganizationInvitation(organizationId, invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Create organization
   * @param {CreateOrganization} createOrganization
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  createOrganization(createOrganization, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .createOrganization(createOrganization, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Create organization invitation
   * @param {string} organizationId Organization ID
   * @param {CreateOrganizationInvitation} createOrganizationInvitation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  createOrganizationInvitation(organizationId, createOrganizationInvitation, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .createOrganizationInvitation(organizationId, createOrganizationInvitation, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Create organization role
   * @param {string} organizationId Organization ID
   * @param {CreateOrganizationRole} createOrganizationRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  createOrganizationRole(organizationId, createOrganizationRole, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .createOrganizationRole(organizationId, createOrganizationRole, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Decline organization invitation
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  declineOrganizationInvitation(invitationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .declineOrganizationInvitation(invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  deleteOrganization(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .deleteOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  deleteOrganizationMember(organizationId, userId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .deleteOrganizationMember(organizationId, userId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete organization role
   * @param {string} organizationId Organization ID
   * @param {string} roleId Role ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  deleteOrganizationRole(organizationId, roleId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .deleteOrganizationRole(organizationId, roleId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get organization by ID
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  getOrganization(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .getOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get count of organization invitations for authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  getOrganizationInvitationsCountForAuthenticatedUser(options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .getOrganizationInvitationsCountForAuthenticatedUser(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get organization current usage overview
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  getOrganizationUsageOverview(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .getOrganizationUsageOverview(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Leave organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  leaveOrganization(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .leaveOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List pending organization invitations
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  listOrganizationInvitations(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .listOrganizationInvitations(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List organization invitations for authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  listOrganizationInvitationsForAuthenticatedUser(options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .listOrganizationInvitationsForAuthenticatedUser(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List organization members
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  listOrganizationMembers(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .listOrganizationMembers(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List organization roles
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  listOrganizationRoles(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .listOrganizationRoles(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  listOrganizations(options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .listOrganizations(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Suspend organization
   * @param {string} organizationId Organization ID
   * @param {OrganizationSuspension} [organizationSuspension]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  suspendOrganization(organizationId, organizationSuspension, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .suspendOrganization(organizationId, organizationSuspension, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Unsuspend organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  unsuspendOrganization(organizationId, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .unsuspendOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update assigned roles to organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update organization invitation
   * @param {string} organizationId Organization ID
   * @param {string} invitationId Invitation ID
   * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update organization quota
   * @param {string} organizationId Organization ID
   * @param {UpdateOrganizationQuota} updateOrganizationQuota
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  updateOrganizationQuota(organizationId, updateOrganizationQuota, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .updateOrganizationQuota(organizationId, updateOrganizationQuota, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update organization role
   * @param {string} organizationId Organization ID
   * @param {string} roleId Role ID
   * @param {UpdateOrganizationRole} updateOrganizationRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update role for organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options) {
    return (0, exports.OrganizationsApiFp)(this.configuration)
      .updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.OrganizationsApi = OrganizationsApi
//# sourceMappingURL=organizations-api.js.map
