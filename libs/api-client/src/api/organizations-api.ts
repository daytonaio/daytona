/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { CreateOrganization } from '../models'
// @ts-ignore
import type { CreateOrganizationInvitation } from '../models'
// @ts-ignore
import type { CreateOrganizationRole } from '../models'
// @ts-ignore
import type { Organization } from '../models'
// @ts-ignore
import type { OrganizationInvitation } from '../models'
// @ts-ignore
import type { OrganizationRole } from '../models'
// @ts-ignore
import type { OrganizationSuspension } from '../models'
// @ts-ignore
import type { OrganizationUser } from '../models'
// @ts-ignore
import type { UpdateAssignedOrganizationRoles } from '../models'
// @ts-ignore
import type { UpdateOrganizationInvitation } from '../models'
// @ts-ignore
import type { UpdateOrganizationMemberRole } from '../models'
// @ts-ignore
import type { UpdateOrganizationQuota } from '../models'
// @ts-ignore
import type { UpdateOrganizationRole } from '../models'
// @ts-ignore
import type { UsageOverview } from '../models'
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation: async (
      invitationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'invitationId' is not null or undefined
      assertParamExists('acceptOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/invitations/{invitationId}/accept`.replace(
        `{${'invitationId'}}`,
        encodeURIComponent(String(invitationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation: async (
      organizationId: string,
      invitationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('cancelOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'invitationId' is not null or undefined
      assertParamExists('cancelOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/{organizationId}/invitations/{invitationId}/cancel`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'invitationId'}}`, encodeURIComponent(String(invitationId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization: async (
      createOrganization: CreateOrganization,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createOrganization' is not null or undefined
      assertParamExists('createOrganization', 'createOrganization', createOrganization)
      const localVarPath = `/organizations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createOrganization, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation: async (
      organizationId: string,
      createOrganizationInvitation: CreateOrganizationInvitation,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('createOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'createOrganizationInvitation' is not null or undefined
      assertParamExists('createOrganizationInvitation', 'createOrganizationInvitation', createOrganizationInvitation)
      const localVarPath = `/organizations/{organizationId}/invitations`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        createOrganizationInvitation,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole: async (
      organizationId: string,
      createOrganizationRole: CreateOrganizationRole,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('createOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'createOrganizationRole' is not null or undefined
      assertParamExists('createOrganizationRole', 'createOrganizationRole', createOrganizationRole)
      const localVarPath = `/organizations/{organizationId}/roles`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationRole, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation: async (
      invitationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'invitationId' is not null or undefined
      assertParamExists('declineOrganizationInvitation', 'invitationId', invitationId)
      const localVarPath = `/organizations/invitations/{invitationId}/decline`.replace(
        `{${'invitationId'}}`,
        encodeURIComponent(String(invitationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('deleteOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember: async (
      organizationId: string,
      userId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('deleteOrganizationMember', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('deleteOrganizationMember', 'userId', userId)
      const localVarPath = `/organizations/{organizationId}/users/{userId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole: async (
      organizationId: string,
      roleId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('deleteOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('deleteOrganizationRole', 'roleId', roleId)
      const localVarPath = `/organizations/{organizationId}/roles/{roleId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('getOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/organizations/invitations/count`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview: async (
      organizationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('getOrganizationUsageOverview', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/usage`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization: async (organizationId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('leaveOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/leave`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations: async (
      organizationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('listOrganizationInvitations', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/invitations`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/organizations/invitations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers: async (
      organizationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('listOrganizationMembers', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/users`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles: async (
      organizationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('listOrganizationRoles', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/roles`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/organizations`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization: async (
      organizationId: string,
      organizationSuspension?: OrganizationSuspension,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('suspendOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/suspend`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(organizationSuspension, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization: async (
      organizationId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('unsuspendOrganization', 'organizationId', organizationId)
      const localVarPath = `/organizations/{organizationId}/unsuspend`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAssignedOrganizationRoles: async (
      organizationId: string,
      userId: string,
      updateAssignedOrganizationRoles: UpdateAssignedOrganizationRoles,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('updateAssignedOrganizationRoles', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('updateAssignedOrganizationRoles', 'userId', userId)
      // verify required parameter 'updateAssignedOrganizationRoles' is not null or undefined
      assertParamExists(
        'updateAssignedOrganizationRoles',
        'updateAssignedOrganizationRoles',
        updateAssignedOrganizationRoles,
      )
      const localVarPath = `/organizations/{organizationId}/users/{userId}/assigned-roles`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAssignedOrganizationRoles,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation: async (
      organizationId: string,
      invitationId: string,
      updateOrganizationInvitation: UpdateOrganizationInvitation,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('updateOrganizationInvitation', 'organizationId', organizationId)
      // verify required parameter 'invitationId' is not null or undefined
      assertParamExists('updateOrganizationInvitation', 'invitationId', invitationId)
      // verify required parameter 'updateOrganizationInvitation' is not null or undefined
      assertParamExists('updateOrganizationInvitation', 'updateOrganizationInvitation', updateOrganizationInvitation)
      const localVarPath = `/organizations/{organizationId}/invitations/{invitationId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'invitationId'}}`, encodeURIComponent(String(invitationId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrganizationInvitation,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota: async (
      organizationId: string,
      updateOrganizationQuota: UpdateOrganizationQuota,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('updateOrganizationQuota', 'organizationId', organizationId)
      // verify required parameter 'updateOrganizationQuota' is not null or undefined
      assertParamExists('updateOrganizationQuota', 'updateOrganizationQuota', updateOrganizationQuota)
      const localVarPath = `/organizations/{organizationId}/quota`.replace(
        `{${'organizationId'}}`,
        encodeURIComponent(String(organizationId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrganizationQuota,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole: async (
      organizationId: string,
      roleId: string,
      updateOrganizationRole: UpdateOrganizationRole,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('updateOrganizationRole', 'organizationId', organizationId)
      // verify required parameter 'roleId' is not null or undefined
      assertParamExists('updateOrganizationRole', 'roleId', roleId)
      // verify required parameter 'updateOrganizationRole' is not null or undefined
      assertParamExists('updateOrganizationRole', 'updateOrganizationRole', updateOrganizationRole)
      const localVarPath = `/organizations/{organizationId}/roles/{roleId}`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'roleId'}}`, encodeURIComponent(String(roleId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(updateOrganizationRole, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleForOrganizationMember: async (
      organizationId: string,
      userId: string,
      updateOrganizationMemberRole: UpdateOrganizationMemberRole,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'organizationId' is not null or undefined
      assertParamExists('updateRoleForOrganizationMember', 'organizationId', organizationId)
      // verify required parameter 'userId' is not null or undefined
      assertParamExists('updateRoleForOrganizationMember', 'userId', userId)
      // verify required parameter 'updateOrganizationMemberRole' is not null or undefined
      assertParamExists('updateRoleForOrganizationMember', 'updateOrganizationMemberRole', updateOrganizationMemberRole)
      const localVarPath = `/organizations/{organizationId}/users/{userId}/role`
        .replace(`{${'organizationId'}}`, encodeURIComponent(String(organizationId)))
        .replace(`{${'userId'}}`, encodeURIComponent(String(userId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateOrganizationMemberRole,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async acceptOrganizationInvitation(
      invitationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.acceptOrganizationInvitation(invitationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.acceptOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async cancelOrganizationInvitation(
      organizationId: string,
      invitationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrganizationInvitation(
        organizationId,
        invitationId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.cancelOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganization(
      createOrganization: CreateOrganization,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganization(createOrganization, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.createOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganizationInvitation(
      organizationId: string,
      createOrganizationInvitation: CreateOrganizationInvitation,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInvitation>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationInvitation(
        organizationId,
        createOrganizationInvitation,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.createOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createOrganizationRole(
      organizationId: string,
      createOrganizationRole: CreateOrganizationRole,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRole>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationRole(
        organizationId,
        createOrganizationRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.createOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async declineOrganizationInvitation(
      invitationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.declineOrganizationInvitation(invitationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.declineOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganization(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.deleteOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationMember(
      organizationId: string,
      userId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationMember(
        organizationId,
        userId,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.deleteOrganizationMember']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganizationRole(
      organizationId: string,
      roleId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganizationRole(organizationId, roleId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.deleteOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganization(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.getOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationInvitationsCountForAuthenticatedUser(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getOrganizationInvitationsCountForAuthenticatedUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.getOrganizationInvitationsCountForAuthenticatedUser']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganizationUsageOverview(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsageOverview>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationUsageOverview(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.getOrganizationUsageOverview']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async leaveOrganization(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.leaveOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.leaveOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationInvitations(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationInvitation>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvitations(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.listOrganizationInvitations']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationInvitationsForAuthenticatedUser(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationInvitation>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationInvitationsForAuthenticatedUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.listOrganizationInvitationsForAuthenticatedUser']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationMembers(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationUser>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationMembers(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.listOrganizationMembers']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizationRoles(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationRole>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizationRoles(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.listOrganizationRoles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listOrganizations(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Organization>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listOrganizations(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.listOrganizations']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async suspendOrganization(
      organizationId: string,
      organizationSuspension?: OrganizationSuspension,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.suspendOrganization(
        organizationId,
        organizationSuspension,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.suspendOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unsuspendOrganization(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unsuspendOrganization(organizationId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.unsuspendOrganization']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateAssignedOrganizationRoles(
      organizationId: string,
      userId: string,
      updateAssignedOrganizationRoles: UpdateAssignedOrganizationRoles,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateAssignedOrganizationRoles(
        organizationId,
        userId,
        updateAssignedOrganizationRoles,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.updateAssignedOrganizationRoles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationInvitation(
      organizationId: string,
      invitationId: string,
      updateOrganizationInvitation: UpdateOrganizationInvitation,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInvitation>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationInvitation(
        organizationId,
        invitationId,
        updateOrganizationInvitation,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.updateOrganizationInvitation']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationQuota(
      organizationId: string,
      updateOrganizationQuota: UpdateOrganizationQuota,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationQuota(
        organizationId,
        updateOrganizationQuota,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.updateOrganizationQuota']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateOrganizationRole(
      organizationId: string,
      roleId: string,
      updateOrganizationRole: UpdateOrganizationRole,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationRole>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrganizationRole(
        organizationId,
        roleId,
        updateOrganizationRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.updateOrganizationRole']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRoleForOrganizationMember(
      organizationId: string,
      userId: string,
      updateOrganizationMemberRole: UpdateOrganizationMemberRole,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRoleForOrganizationMember(
        organizationId,
        userId,
        updateOrganizationMemberRole,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['OrganizationsApi.updateRoleForOrganizationMember']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = OrganizationsApiFp(configuration)
  return {
    /**
     *
     * @summary Accept organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    acceptOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.acceptOrganizationInvitation(invitationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Cancel organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelOrganizationInvitation(
      organizationId: string,
      invitationId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .cancelOrganizationInvitation(organizationId, invitationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization
     * @param {CreateOrganization} createOrganization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganization(
      createOrganization: CreateOrganization,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Organization> {
      return localVarFp.createOrganization(createOrganization, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization invitation
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationInvitation} createOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationInvitation(
      organizationId: string,
      createOrganizationInvitation: CreateOrganizationInvitation,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationInvitation> {
      return localVarFp
        .createOrganizationInvitation(organizationId, createOrganizationInvitation, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create organization role
     * @param {string} organizationId Organization ID
     * @param {CreateOrganizationRole} createOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createOrganizationRole(
      organizationId: string,
      createOrganizationRole: CreateOrganizationRole,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationRole> {
      return localVarFp
        .createOrganizationRole(organizationId, createOrganizationRole, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Decline organization invitation
     * @param {string} invitationId Invitation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    declineOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.declineOrganizationInvitation(invitationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationMember(
      organizationId: string,
      userId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOrganizationMember(organizationId, userId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganizationRole(
      organizationId: string,
      roleId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteOrganizationRole(organizationId, roleId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get organization by ID
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<Organization> {
      return localVarFp.getOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get count of organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationInvitationsCountForAuthenticatedUser(options?: RawAxiosRequestConfig): AxiosPromise<number> {
      return localVarFp
        .getOrganizationInvitationsCountForAuthenticatedUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get organization current usage overview
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganizationUsageOverview(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<UsageOverview> {
      return localVarFp
        .getOrganizationUsageOverview(organizationId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Leave organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.leaveOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List pending organization invitations
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitations(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<OrganizationInvitation>> {
      return localVarFp.listOrganizationInvitations(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization invitations for authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationInvitationsForAuthenticatedUser(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<OrganizationInvitation>> {
      return localVarFp
        .listOrganizationInvitationsForAuthenticatedUser(options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization members
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationMembers(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<OrganizationUser>> {
      return localVarFp.listOrganizationMembers(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organization roles
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizationRoles(
      organizationId: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<OrganizationRole>> {
      return localVarFp.listOrganizationRoles(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List organizations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listOrganizations(options?: RawAxiosRequestConfig): AxiosPromise<Array<Organization>> {
      return localVarFp.listOrganizations(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Suspend organization
     * @param {string} organizationId Organization ID
     * @param {OrganizationSuspension} [organizationSuspension]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    suspendOrganization(
      organizationId: string,
      organizationSuspension?: OrganizationSuspension,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .suspendOrganization(organizationId, organizationSuspension, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Unsuspend organization
     * @param {string} organizationId Organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsuspendOrganization(organizationId: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.unsuspendOrganization(organizationId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update assigned roles to organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAssignedOrganizationRoles(
      organizationId: string,
      userId: string,
      updateAssignedOrganizationRoles: UpdateAssignedOrganizationRoles,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationUser> {
      return localVarFp
        .updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization invitation
     * @param {string} organizationId Organization ID
     * @param {string} invitationId Invitation ID
     * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationInvitation(
      organizationId: string,
      invitationId: string,
      updateOrganizationInvitation: UpdateOrganizationInvitation,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationInvitation> {
      return localVarFp
        .updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization quota
     * @param {string} organizationId Organization ID
     * @param {UpdateOrganizationQuota} updateOrganizationQuota
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationQuota(
      organizationId: string,
      updateOrganizationQuota: UpdateOrganizationQuota,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Organization> {
      return localVarFp
        .updateOrganizationQuota(organizationId, updateOrganizationQuota, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update organization role
     * @param {string} organizationId Organization ID
     * @param {string} roleId Role ID
     * @param {UpdateOrganizationRole} updateOrganizationRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateOrganizationRole(
      organizationId: string,
      roleId: string,
      updateOrganizationRole: UpdateOrganizationRole,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationRole> {
      return localVarFp
        .updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update role for organization member
     * @param {string} organizationId Organization ID
     * @param {string} userId User ID
     * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleForOrganizationMember(
      organizationId: string,
      userId: string,
      updateOrganizationMemberRole: UpdateOrganizationMemberRole,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<OrganizationUser> {
      return localVarFp
        .updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
  /**
   *
   * @summary Accept organization invitation
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public acceptOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .acceptOrganizationInvitation(invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Cancel organization invitation
   * @param {string} organizationId Organization ID
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public cancelOrganizationInvitation(organizationId: string, invitationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .cancelOrganizationInvitation(organizationId, invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create organization
   * @param {CreateOrganization} createOrganization
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public createOrganization(createOrganization: CreateOrganization, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .createOrganization(createOrganization, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create organization invitation
   * @param {string} organizationId Organization ID
   * @param {CreateOrganizationInvitation} createOrganizationInvitation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public createOrganizationInvitation(
    organizationId: string,
    createOrganizationInvitation: CreateOrganizationInvitation,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .createOrganizationInvitation(organizationId, createOrganizationInvitation, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Create organization role
   * @param {string} organizationId Organization ID
   * @param {CreateOrganizationRole} createOrganizationRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public createOrganizationRole(
    organizationId: string,
    createOrganizationRole: CreateOrganizationRole,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .createOrganizationRole(organizationId, createOrganizationRole, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Decline organization invitation
   * @param {string} invitationId Invitation ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public declineOrganizationInvitation(invitationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .declineOrganizationInvitation(invitationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganizationMember(organizationId: string, userId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganizationMember(organizationId, userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Delete organization role
   * @param {string} organizationId Organization ID
   * @param {string} roleId Role ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public deleteOrganizationRole(organizationId: string, roleId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .deleteOrganizationRole(organizationId, roleId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get organization by ID
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .getOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get count of organization invitations for authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganizationInvitationsCountForAuthenticatedUser(options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .getOrganizationInvitationsCountForAuthenticatedUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get organization current usage overview
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public getOrganizationUsageOverview(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .getOrganizationUsageOverview(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Leave organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public leaveOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .leaveOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List pending organization invitations
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizationInvitations(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizationInvitations(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List organization invitations for authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizationInvitationsForAuthenticatedUser(options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizationInvitationsForAuthenticatedUser(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List organization members
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizationMembers(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizationMembers(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List organization roles
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizationRoles(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizationRoles(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List organizations
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public listOrganizations(options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .listOrganizations(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Suspend organization
   * @param {string} organizationId Organization ID
   * @param {OrganizationSuspension} [organizationSuspension]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public suspendOrganization(
    organizationId: string,
    organizationSuspension?: OrganizationSuspension,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .suspendOrganization(organizationId, organizationSuspension, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Unsuspend organization
   * @param {string} organizationId Organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public unsuspendOrganization(organizationId: string, options?: RawAxiosRequestConfig) {
    return OrganizationsApiFp(this.configuration)
      .unsuspendOrganization(organizationId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update assigned roles to organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {UpdateAssignedOrganizationRoles} updateAssignedOrganizationRoles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateAssignedOrganizationRoles(
    organizationId: string,
    userId: string,
    updateAssignedOrganizationRoles: UpdateAssignedOrganizationRoles,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateAssignedOrganizationRoles(organizationId, userId, updateAssignedOrganizationRoles, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update organization invitation
   * @param {string} organizationId Organization ID
   * @param {string} invitationId Invitation ID
   * @param {UpdateOrganizationInvitation} updateOrganizationInvitation
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateOrganizationInvitation(
    organizationId: string,
    invitationId: string,
    updateOrganizationInvitation: UpdateOrganizationInvitation,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateOrganizationInvitation(organizationId, invitationId, updateOrganizationInvitation, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update organization quota
   * @param {string} organizationId Organization ID
   * @param {UpdateOrganizationQuota} updateOrganizationQuota
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateOrganizationQuota(
    organizationId: string,
    updateOrganizationQuota: UpdateOrganizationQuota,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateOrganizationQuota(organizationId, updateOrganizationQuota, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update organization role
   * @param {string} organizationId Organization ID
   * @param {string} roleId Role ID
   * @param {UpdateOrganizationRole} updateOrganizationRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateOrganizationRole(
    organizationId: string,
    roleId: string,
    updateOrganizationRole: UpdateOrganizationRole,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateOrganizationRole(organizationId, roleId, updateOrganizationRole, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update role for organization member
   * @param {string} organizationId Organization ID
   * @param {string} userId User ID
   * @param {UpdateOrganizationMemberRole} updateOrganizationMemberRole
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganizationsApi
   */
  public updateRoleForOrganizationMember(
    organizationId: string,
    userId: string,
    updateOrganizationMemberRole: UpdateOrganizationMemberRole,
    options?: RawAxiosRequestConfig,
  ) {
    return OrganizationsApiFp(this.configuration)
      .updateRoleForOrganizationMember(organizationId, userId, updateOrganizationMemberRole, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
