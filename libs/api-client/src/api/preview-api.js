'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.PreviewApi = exports.PreviewApiFactory = exports.PreviewApiFp = exports.PreviewApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * PreviewApi - axios parameter creator
 * @export
 */
const PreviewApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasSandboxAccess: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('hasSandboxAccess', 'sandboxId', sandboxId)
      const localVarPath = `/preview/{sandboxId}/access`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isSandboxPublic: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('isSandboxPublic', 'sandboxId', sandboxId)
      const localVarPath = `/preview/{sandboxId}/public`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isValidAuthToken: async (sandboxId, authToken, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('isValidAuthToken', 'sandboxId', sandboxId)
      // verify required parameter 'authToken' is not null or undefined
      ;(0, common_1.assertParamExists)('isValidAuthToken', 'authToken', authToken)
      const localVarPath = `/preview/{sandboxId}/validate/{authToken}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'authToken'}}`, encodeURIComponent(String(authToken)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.PreviewApiAxiosParamCreator = PreviewApiAxiosParamCreator
/**
 * PreviewApi - functional programming interface
 * @export
 */
const PreviewApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.PreviewApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async hasSandboxAccess(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.hasSandboxAccess(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['PreviewApi.hasSandboxAccess']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async isSandboxPublic(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.isSandboxPublic(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['PreviewApi.isSandboxPublic']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async isValidAuthToken(sandboxId, authToken, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.isValidAuthToken(sandboxId, authToken, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['PreviewApi.isValidAuthToken']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.PreviewApiFp = PreviewApiFp
/**
 * PreviewApi - factory interface
 * @export
 */
const PreviewApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.PreviewApiFp)(configuration)
  return {
    /**
     *
     * @summary Check if user has access to the sandbox
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    hasSandboxAccess(sandboxId, options) {
      return localVarFp.hasSandboxAccess(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Check if sandbox is public
     * @param {string} sandboxId ID of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isSandboxPublic(sandboxId, options) {
      return localVarFp.isSandboxPublic(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Check if sandbox auth token is valid
     * @param {string} sandboxId ID of the sandbox
     * @param {string} authToken Auth token of the sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    isValidAuthToken(sandboxId, authToken, options) {
      return localVarFp.isValidAuthToken(sandboxId, authToken, options).then((request) => request(axios, basePath))
    },
  }
}
exports.PreviewApiFactory = PreviewApiFactory
/**
 * PreviewApi - object-oriented interface
 * @export
 * @class PreviewApi
 * @extends {BaseAPI}
 */
class PreviewApi extends base_1.BaseAPI {
  /**
   *
   * @summary Check if user has access to the sandbox
   * @param {string} sandboxId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PreviewApi
   */
  hasSandboxAccess(sandboxId, options) {
    return (0, exports.PreviewApiFp)(this.configuration)
      .hasSandboxAccess(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Check if sandbox is public
   * @param {string} sandboxId ID of the sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PreviewApi
   */
  isSandboxPublic(sandboxId, options) {
    return (0, exports.PreviewApiFp)(this.configuration)
      .isSandboxPublic(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Check if sandbox auth token is valid
   * @param {string} sandboxId ID of the sandbox
   * @param {string} authToken Auth token of the sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PreviewApi
   */
  isValidAuthToken(sandboxId, authToken, options) {
    return (0, exports.PreviewApiFp)(this.configuration)
      .isValidAuthToken(sandboxId, authToken, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.PreviewApi = PreviewApi
//# sourceMappingURL=preview-api.js.map
