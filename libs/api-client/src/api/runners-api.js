'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.RunnersApi = exports.RunnersApiFactory = exports.RunnersApiFp = exports.RunnersApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * RunnersApi - axios parameter creator
 * @export
 */
const RunnersApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner: async (createRunner, options = {}) => {
      // verify required parameter 'createRunner' is not null or undefined
      ;(0, common_1.assertParamExists)('createRunner', 'createRunner', createRunner)
      const localVarPath = `/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createRunner,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners: async (options = {}) => {
      const localVarPath = `/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('updateRunnerScheduling', 'id', id)
      const localVarPath = `/runners/{id}/scheduling`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.RunnersApiAxiosParamCreator = RunnersApiAxiosParamCreator
/**
 * RunnersApi - functional programming interface
 * @export
 */
const RunnersApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.RunnersApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRunner(createRunner, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRunner(createRunner, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['RunnersApi.createRunner']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRunners(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRunners(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['RunnersApi.listRunners']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRunnerScheduling(id, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunnerScheduling(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['RunnersApi.updateRunnerScheduling']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.RunnersApiFp = RunnersApiFp
/**
 * RunnersApi - factory interface
 * @export
 */
const RunnersApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.RunnersApiFp)(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner(createRunner, options) {
      return localVarFp.createRunner(createRunner, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all runners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners(options) {
      return localVarFp.listRunners(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling(id, options) {
      return localVarFp.updateRunnerScheduling(id, options).then((request) => request(axios, basePath))
    },
  }
}
exports.RunnersApiFactory = RunnersApiFactory
/**
 * RunnersApi - object-oriented interface
 * @export
 * @class RunnersApi
 * @extends {BaseAPI}
 */
class RunnersApi extends base_1.BaseAPI {
  /**
   *
   * @summary Create runner
   * @param {CreateRunner} createRunner
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  createRunner(createRunner, options) {
    return (0, exports.RunnersApiFp)(this.configuration)
      .createRunner(createRunner, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List all runners
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  listRunners(options) {
    return (0, exports.RunnersApiFp)(this.configuration)
      .listRunners(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update runner scheduling status
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  updateRunnerScheduling(id, options) {
    return (0, exports.RunnersApiFp)(this.configuration)
      .updateRunnerScheduling(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.RunnersApi = RunnersApi
//# sourceMappingURL=runners-api.js.map
