/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { CreateRunner } from '../models'
// @ts-ignore
import type { Runner } from '../models'
/**
 * RunnersApi - axios parameter creator
 * @export
 */
export const RunnersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner: async (createRunner: CreateRunner, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'createRunner' is not null or undefined
      assertParamExists('createRunner', 'createRunner', createRunner)
      const localVarPath = `/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createRunner, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get info for authenticated runner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInfoForAuthenticatedRunner: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/runners/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRunner: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteRunner', 'id', id)
      const localVarPath = `/runners/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get runner by ID
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getRunnerById', 'id', id)
      const localVarPath = `/runners/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all runners
     * @param {string} [region] Filter runners by region name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners: async (region?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/runners`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (region !== undefined) {
        localVarQueryParameter['region'] = region
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('updateRunnerScheduling', 'id', id)
      const localVarPath = `/runners/{id}/scheduling`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * RunnersApi - functional programming interface
 * @export
 */
export const RunnersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RunnersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createRunner(
      createRunner: CreateRunner,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createRunner(createRunner, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.createRunner']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get info for authenticated runner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInfoForAuthenticatedRunner(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInfoForAuthenticatedRunner(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.getInfoForAuthenticatedRunner']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteRunner(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRunner(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.deleteRunner']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get runner by ID
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRunnerById(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRunnerById(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.getRunnerById']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all runners
     * @param {string} [region] Filter runners by region name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listRunners(
      region?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Runner>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listRunners(region, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.listRunners']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateRunnerScheduling(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Runner>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateRunnerScheduling(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['RunnersApi.updateRunnerScheduling']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * RunnersApi - factory interface
 * @export
 */
export const RunnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = RunnersApiFp(configuration)
  return {
    /**
     *
     * @summary Create runner
     * @param {CreateRunner} createRunner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRunner(createRunner: CreateRunner, options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.createRunner(createRunner, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get info for authenticated runner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInfoForAuthenticatedRunner(options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.getInfoForAuthenticatedRunner(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get runner by sandbox ID
     * @param {string} sandboxId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteRunner(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.deleteRunner(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get runner by ID
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRunnerById(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.getRunnerById(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all runners
     * @param {string} [region] Filter runners by region name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listRunners(region?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Runner>> {
      return localVarFp.listRunners(region, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update runner scheduling status
     * @param {string} id Runner ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRunnerScheduling(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Runner> {
      return localVarFp.updateRunnerScheduling(id, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * RunnersApi - object-oriented interface
 * @export
 * @class RunnersApi
 * @extends {BaseAPI}
 */
export class RunnersApi extends BaseAPI {
  /**
   *
   * @summary Create runner
   * @param {CreateRunner} createRunner
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public createRunner(createRunner: CreateRunner, options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .createRunner(createRunner, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get info for authenticated runner
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public getInfoForAuthenticatedRunner(options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .getInfoForAuthenticatedRunner(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get runner by sandbox ID
   * @param {string} sandboxId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public deleteRunner(id: string, options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .deleteRunner(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get runner by ID
   * @param {string} id Runner ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public getRunnerById(id: string, options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .getRunnerById(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List all runners
   * @param {string} [region] Filter runners by region name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public listRunners(region?: string, options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .listRunners(region, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update runner scheduling status
   * @param {string} id Runner ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RunnersApi
   */
  public updateRunnerScheduling(id: string, options?: RawAxiosRequestConfig) {
    return RunnersApiFp(this.configuration)
      .updateRunnerScheduling(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
