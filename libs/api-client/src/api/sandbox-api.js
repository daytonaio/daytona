'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.SandboxApi = exports.SandboxApiFactory = exports.SandboxApiFp = exports.SandboxApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * SandboxApi - axios parameter creator
 * @export
 */
const SandboxApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveSandbox: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('archiveSandbox', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}/archive`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('createBackup', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}/backup`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSandbox: async (createSandbox, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'createSandbox' is not null or undefined
      ;(0, common_1.assertParamExists)('createSandbox', 'createSandbox', createSandbox)
      const localVarPath = `/sandbox`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createSandbox,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSandbox: async (sandboxId, force, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteSandbox', 'sandboxId', sandboxId)
      // verify required parameter 'force' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteSandbox', 'force', force)
      const localVarPath = `/sandbox/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (force !== undefined) {
        localVarQueryParameter['force'] = force
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs: async (sandboxId, xDaytonaOrganizationID, follow, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('getBuildLogs', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}/build-logs`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPortPreviewUrl: async (sandboxId, port, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('getPortPreviewUrl', 'sandboxId', sandboxId)
      // verify required parameter 'port' is not null or undefined
      ;(0, common_1.assertParamExists)('getPortPreviewUrl', 'port', port)
      const localVarPath = `/sandbox/{sandboxId}/ports/{port}/preview-url`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'port'}}`, encodeURIComponent(String(port)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandbox: async (sandboxId, xDaytonaOrganizationID, verbose, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('getSandbox', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (verbose !== undefined) {
        localVarQueryParameter['verbose'] = verbose
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSandboxes: async (xDaytonaOrganizationID, verbose, labels, options = {}) => {
      const localVarPath = `/sandbox`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (verbose !== undefined) {
        localVarQueryParameter['verbose'] = verbose
      }
      if (labels !== undefined) {
        localVarQueryParameter['labels'] = labels
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceLabels: async (sandboxId, sandboxLabels, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('replaceLabels', 'sandboxId', sandboxId)
      // verify required parameter 'sandboxLabels' is not null or undefined
      ;(0, common_1.assertParamExists)('replaceLabels', 'sandboxLabels', sandboxLabels)
      const localVarPath = `/sandbox/{sandboxId}/labels`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        sandboxLabels,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoArchiveInterval: async (sandboxId, interval, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutoArchiveInterval', 'sandboxId', sandboxId)
      // verify required parameter 'interval' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutoArchiveInterval', 'interval', interval)
      const localVarPath = `/sandbox/{sandboxId}/autoarchive/{interval}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'interval'}}`, encodeURIComponent(String(interval)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutostopInterval: async (sandboxId, interval, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutostopInterval', 'sandboxId', sandboxId)
      // verify required parameter 'interval' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutostopInterval', 'interval', interval)
      const localVarPath = `/sandbox/{sandboxId}/autostop/{interval}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'interval'}}`, encodeURIComponent(String(interval)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startSandbox: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('startSandbox', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopSandbox: async (sandboxId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('stopSandbox', 'sandboxId', sandboxId)
      const localVarPath = `/sandbox/{sandboxId}/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicStatus: async (sandboxId, isPublic, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('updatePublicStatus', 'sandboxId', sandboxId)
      // verify required parameter 'isPublic' is not null or undefined
      ;(0, common_1.assertParamExists)('updatePublicStatus', 'isPublic', isPublic)
      const localVarPath = `/sandbox/{sandboxId}/public/{isPublic}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'isPublic'}}`, encodeURIComponent(String(isPublic)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.SandboxApiAxiosParamCreator = SandboxApiAxiosParamCreator
/**
 * SandboxApi - functional programming interface
 * @export
 */
const SandboxApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.SandboxApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async archiveSandbox(sandboxId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.archiveSandbox(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.archiveSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBackup(sandboxId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBackup(sandboxId, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.createBackup']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSandbox(createSandbox, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createSandbox(
        createSandbox,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.createSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSandbox(sandboxId, force, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSandbox(
        sandboxId,
        force,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.deleteSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildLogs(sandboxId, xDaytonaOrganizationID, follow, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildLogs(
        sandboxId,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.getBuildLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPortPreviewUrl(sandboxId, port, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPortPreviewUrl(
        sandboxId,
        port,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.getPortPreviewUrl']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSandbox(sandboxId, xDaytonaOrganizationID, verbose, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSandbox(
        sandboxId,
        xDaytonaOrganizationID,
        verbose,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.getSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSandboxes(xDaytonaOrganizationID, verbose, labels, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listSandboxes(
        xDaytonaOrganizationID,
        verbose,
        labels,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.listSandboxes']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceLabels(sandboxId, sandboxLabels, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceLabels(
        sandboxId,
        sandboxLabels,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.replaceLabels']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAutoArchiveInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAutoArchiveInterval(
        sandboxId,
        interval,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.setAutoArchiveInterval']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setAutostopInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAutostopInterval(
        sandboxId,
        interval,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.setAutostopInterval']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startSandbox(sandboxId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startSandbox(sandboxId, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.startSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stopSandbox(sandboxId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stopSandbox(sandboxId, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.stopSandbox']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updatePublicStatus(sandboxId, isPublic, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePublicStatus(
        sandboxId,
        isPublic,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.updatePublicStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.SandboxApiFp = SandboxApiFp
/**
 * SandboxApi - factory interface
 * @export
 */
const SandboxApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.SandboxApiFp)(configuration)
  return {
    /**
     *
     * @summary Archive sandbox
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveSandbox(sandboxId, xDaytonaOrganizationID, options) {
      return localVarFp
        .archiveSandbox(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create sandbox backup
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup(sandboxId, xDaytonaOrganizationID, options) {
      return localVarFp
        .createBackup(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Create a new sandbox
     * @param {CreateSandbox} createSandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSandbox(createSandbox, xDaytonaOrganizationID, options) {
      return localVarFp
        .createSandbox(createSandbox, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSandbox(sandboxId, force, xDaytonaOrganizationID, options) {
      return localVarFp
        .deleteSandbox(sandboxId, force, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get build logs
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs(sandboxId, xDaytonaOrganizationID, follow, options) {
      return localVarFp
        .getBuildLogs(sandboxId, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get preview URL for a sandbox port
     * @param {string} sandboxId ID of the sandbox
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPortPreviewUrl(sandboxId, port, xDaytonaOrganizationID, options) {
      return localVarFp
        .getPortPreviewUrl(sandboxId, port, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get sandbox details
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSandbox(sandboxId, xDaytonaOrganizationID, verbose, options) {
      return localVarFp
        .getSandbox(sandboxId, xDaytonaOrganizationID, verbose, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all sandboxes
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSandboxes(xDaytonaOrganizationID, verbose, labels, options) {
      return localVarFp
        .listSandboxes(xDaytonaOrganizationID, verbose, labels, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Replace sandbox labels
     * @param {string} sandboxId ID of the sandbox
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceLabels(sandboxId, sandboxLabels, xDaytonaOrganizationID, options) {
      return localVarFp
        .replaceLabels(sandboxId, sandboxLabels, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set sandbox auto-archive interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutoArchiveInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
      return localVarFp
        .setAutoArchiveInterval(sandboxId, interval, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set sandbox auto-stop interval
     * @param {string} sandboxId ID of the sandbox
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setAutostopInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
      return localVarFp
        .setAutostopInterval(sandboxId, interval, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Start sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startSandbox(sandboxId, xDaytonaOrganizationID, options) {
      return localVarFp
        .startSandbox(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Stop sandbox
     * @param {string} sandboxId ID of the sandbox
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopSandbox(sandboxId, xDaytonaOrganizationID, options) {
      return localVarFp
        .stopSandbox(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update public status
     * @param {string} sandboxId ID of the sandbox
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePublicStatus(sandboxId, isPublic, xDaytonaOrganizationID, options) {
      return localVarFp
        .updatePublicStatus(sandboxId, isPublic, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.SandboxApiFactory = SandboxApiFactory
/**
 * SandboxApi - object-oriented interface
 * @export
 * @class SandboxApi
 * @extends {BaseAPI}
 */
class SandboxApi extends base_1.BaseAPI {
  /**
   *
   * @summary Archive sandbox
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  archiveSandbox(sandboxId, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .archiveSandbox(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Create sandbox backup
   * @param {string} sandboxId ID of the sandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  createBackup(sandboxId, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .createBackup(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Create a new sandbox
   * @param {CreateSandbox} createSandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  createSandbox(createSandbox, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .createSandbox(createSandbox, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete sandbox
   * @param {string} sandboxId ID of the sandbox
   * @param {boolean} force
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  deleteSandbox(sandboxId, force, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .deleteSandbox(sandboxId, force, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get build logs
   * @param {string} sandboxId ID of the sandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow] Whether to follow the logs stream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  getBuildLogs(sandboxId, xDaytonaOrganizationID, follow, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .getBuildLogs(sandboxId, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get preview URL for a sandbox port
   * @param {string} sandboxId ID of the sandbox
   * @param {number} port Port number to get preview URL for
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  getPortPreviewUrl(sandboxId, port, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .getPortPreviewUrl(sandboxId, port, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get sandbox details
   * @param {string} sandboxId ID of the sandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [verbose] Include verbose output
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  getSandbox(sandboxId, xDaytonaOrganizationID, verbose, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .getSandbox(sandboxId, xDaytonaOrganizationID, verbose, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List all sandboxes
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [verbose] Include verbose output
   * @param {string} [labels] JSON encoded labels to filter by
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  listSandboxes(xDaytonaOrganizationID, verbose, labels, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .listSandboxes(xDaytonaOrganizationID, verbose, labels, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Replace sandbox labels
   * @param {string} sandboxId ID of the sandbox
   * @param {SandboxLabels} sandboxLabels
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  replaceLabels(sandboxId, sandboxLabels, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .replaceLabels(sandboxId, sandboxLabels, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Set sandbox auto-archive interval
   * @param {string} sandboxId ID of the sandbox
   * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  setAutoArchiveInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .setAutoArchiveInterval(sandboxId, interval, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Set sandbox auto-stop interval
   * @param {string} sandboxId ID of the sandbox
   * @param {number} interval Auto-stop interval in minutes (0 to disable)
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  setAutostopInterval(sandboxId, interval, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .setAutostopInterval(sandboxId, interval, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Start sandbox
   * @param {string} sandboxId ID of the sandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  startSandbox(sandboxId, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .startSandbox(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Stop sandbox
   * @param {string} sandboxId ID of the sandbox
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  stopSandbox(sandboxId, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .stopSandbox(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Update public status
   * @param {string} sandboxId ID of the sandbox
   * @param {boolean} isPublic Public status to set
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  updatePublicStatus(sandboxId, isPublic, xDaytonaOrganizationID, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .updatePublicStatus(sandboxId, isPublic, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.SandboxApi = SandboxApi
//# sourceMappingURL=sandbox-api.js.map
