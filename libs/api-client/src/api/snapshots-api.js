'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.SnapshotsApi =
  exports.SnapshotsApiFactory =
  exports.SnapshotsApiFp =
  exports.SnapshotsApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
const SnapshotsApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Create a new snapshot
     * @param {CreateSnapshot} createSnapshot
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSnapshot: async (createSnapshot, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'createSnapshot' is not null or undefined
      ;(0, common_1.assertParamExists)('createSnapshot', 'createSnapshot', createSnapshot)
      const localVarPath = `/snapshots`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createSnapshot,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSnapshots: async (xDaytonaOrganizationID, limit, page, options = {}) => {
      const localVarPath = `/snapshots`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (limit !== undefined) {
        localVarQueryParameter['limit'] = limit
      }
      if (page !== undefined) {
        localVarQueryParameter['page'] = page
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get snapshot by ID or name
     * @param {string} id Snapshot ID or name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshot: async (id, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('getSnapshot', 'id', id)
      const localVarPath = `/snapshots/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get snapshot build logs
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshotBuildLogs: async (id, xDaytonaOrganizationID, follow, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('getSnapshotBuildLogs', 'id', id)
      const localVarPath = `/snapshots/{id}/build-logs`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Delete snapshot
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSnapshot: async (id, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('removeSnapshot', 'id', id)
      const localVarPath = `/snapshots/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Set snapshot general status
     * @param {string} id Snapshot ID
     * @param {SetSnapshotGeneralStatusDto} setSnapshotGeneralStatusDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSnapshotGeneralStatus: async (id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('setSnapshotGeneralStatus', 'id', id)
      // verify required parameter 'setSnapshotGeneralStatusDto' is not null or undefined
      ;(0, common_1.assertParamExists)(
        'setSnapshotGeneralStatus',
        'setSnapshotGeneralStatusDto',
        setSnapshotGeneralStatusDto,
      )
      const localVarPath = `/snapshots/{id}/general`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        setSnapshotGeneralStatusDto,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Toggle snapshot state
     * @param {string} id Snapshot ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleSnapshotState: async (id, toggleState, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('toggleSnapshotState', 'id', id)
      // verify required parameter 'toggleState' is not null or undefined
      ;(0, common_1.assertParamExists)('toggleSnapshotState', 'toggleState', toggleState)
      const localVarPath = `/snapshots/{id}/toggle`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        toggleState,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.SnapshotsApiAxiosParamCreator = SnapshotsApiAxiosParamCreator
/**
 * SnapshotsApi - functional programming interface
 * @export
 */
const SnapshotsApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.SnapshotsApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Create a new snapshot
     * @param {CreateSnapshot} createSnapshot
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSnapshot(createSnapshot, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createSnapshot(
        createSnapshot,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.createSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllSnapshots(xDaytonaOrganizationID, limit, page, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAllSnapshots(
        xDaytonaOrganizationID,
        limit,
        page,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.getAllSnapshots']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get snapshot by ID or name
     * @param {string} id Snapshot ID or name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSnapshot(id, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshot(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.getSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get snapshot build logs
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSnapshotBuildLogs(id, xDaytonaOrganizationID, follow, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSnapshotBuildLogs(
        id,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.getSnapshotBuildLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Delete snapshot
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeSnapshot(id, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeSnapshot(id, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.removeSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Set snapshot general status
     * @param {string} id Snapshot ID
     * @param {SetSnapshotGeneralStatusDto} setSnapshotGeneralStatusDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setSnapshotGeneralStatus(id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setSnapshotGeneralStatus(
        id,
        setSnapshotGeneralStatusDto,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.setSnapshotGeneralStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Toggle snapshot state
     * @param {string} id Snapshot ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async toggleSnapshotState(id, toggleState, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.toggleSnapshotState(
        id,
        toggleState,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.toggleSnapshotState']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.SnapshotsApiFp = SnapshotsApiFp
/**
 * SnapshotsApi - factory interface
 * @export
 */
const SnapshotsApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.SnapshotsApiFp)(configuration)
  return {
    /**
     *
     * @summary Create a new snapshot
     * @param {CreateSnapshot} createSnapshot
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSnapshot(createSnapshot, xDaytonaOrganizationID, options) {
      return localVarFp
        .createSnapshot(createSnapshot, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all snapshots
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [limit] Number of items per page
     * @param {number} [page] Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllSnapshots(xDaytonaOrganizationID, limit, page, options) {
      return localVarFp
        .getAllSnapshots(xDaytonaOrganizationID, limit, page, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get snapshot by ID or name
     * @param {string} id Snapshot ID or name
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshot(id, xDaytonaOrganizationID, options) {
      return localVarFp.getSnapshot(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get snapshot build logs
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSnapshotBuildLogs(id, xDaytonaOrganizationID, follow, options) {
      return localVarFp
        .getSnapshotBuildLogs(id, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Delete snapshot
     * @param {string} id Snapshot ID
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSnapshot(id, xDaytonaOrganizationID, options) {
      return localVarFp.removeSnapshot(id, xDaytonaOrganizationID, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Set snapshot general status
     * @param {string} id Snapshot ID
     * @param {SetSnapshotGeneralStatusDto} setSnapshotGeneralStatusDto
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setSnapshotGeneralStatus(id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options) {
      return localVarFp
        .setSnapshotGeneralStatus(id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Toggle snapshot state
     * @param {string} id Snapshot ID
     * @param {ToggleState} toggleState
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    toggleSnapshotState(id, toggleState, xDaytonaOrganizationID, options) {
      return localVarFp
        .toggleSnapshotState(id, toggleState, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.SnapshotsApiFactory = SnapshotsApiFactory
/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
class SnapshotsApi extends base_1.BaseAPI {
  /**
   *
   * @summary Create a new snapshot
   * @param {CreateSnapshot} createSnapshot
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  createSnapshot(createSnapshot, xDaytonaOrganizationID, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .createSnapshot(createSnapshot, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List all snapshots
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {number} [limit] Number of items per page
   * @param {number} [page] Page number
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  getAllSnapshots(xDaytonaOrganizationID, limit, page, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .getAllSnapshots(xDaytonaOrganizationID, limit, page, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get snapshot by ID or name
   * @param {string} id Snapshot ID or name
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  getSnapshot(id, xDaytonaOrganizationID, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .getSnapshot(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get snapshot build logs
   * @param {string} id Snapshot ID
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow] Whether to follow the logs stream
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  getSnapshotBuildLogs(id, xDaytonaOrganizationID, follow, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .getSnapshotBuildLogs(id, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Delete snapshot
   * @param {string} id Snapshot ID
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  removeSnapshot(id, xDaytonaOrganizationID, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .removeSnapshot(id, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Set snapshot general status
   * @param {string} id Snapshot ID
   * @param {SetSnapshotGeneralStatusDto} setSnapshotGeneralStatusDto
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  setSnapshotGeneralStatus(id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .setSnapshotGeneralStatus(id, setSnapshotGeneralStatusDto, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Toggle snapshot state
   * @param {string} id Snapshot ID
   * @param {ToggleState} toggleState
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  toggleSnapshotState(id, toggleState, xDaytonaOrganizationID, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .toggleSnapshotState(id, toggleState, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.SnapshotsApi = SnapshotsApi
//# sourceMappingURL=snapshots-api.js.map
