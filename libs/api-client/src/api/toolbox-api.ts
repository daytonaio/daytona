/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { Command } from '../models'
// @ts-ignore
import type { CompletionList } from '../models'
// @ts-ignore
import type { CreateSessionRequest } from '../models'
// @ts-ignore
import type { ExecuteRequest } from '../models'
// @ts-ignore
import type { ExecuteResponse } from '../models'
// @ts-ignore
import type { FileInfo } from '../models'
// @ts-ignore
import type { GitAddRequest } from '../models'
// @ts-ignore
import type { GitBranchRequest } from '../models'
// @ts-ignore
import type { GitCheckoutRequest } from '../models'
// @ts-ignore
import type { GitCloneRequest } from '../models'
// @ts-ignore
import type { GitCommitInfo } from '../models'
// @ts-ignore
import type { GitCommitRequest } from '../models'
// @ts-ignore
import type { GitCommitResponse } from '../models'
// @ts-ignore
import type { GitDeleteBranchRequest } from '../models'
// @ts-ignore
import type { GitRepoRequest } from '../models'
// @ts-ignore
import type { GitStatus } from '../models'
// @ts-ignore
import type { ListBranchResponse } from '../models'
// @ts-ignore
import type { LspCompletionParams } from '../models'
// @ts-ignore
import type { LspDocumentRequest } from '../models'
// @ts-ignore
import type { LspServerRequest } from '../models'
// @ts-ignore
import type { LspSymbol } from '../models'
// @ts-ignore
import type { Match } from '../models'
// @ts-ignore
import type { ProjectDirResponse } from '../models'
// @ts-ignore
import type { ReplaceRequest } from '../models'
// @ts-ignore
import type { ReplaceResult } from '../models'
// @ts-ignore
import type { SearchFilesResponse } from '../models'
// @ts-ignore
import type { SearchRequest } from '../models'
// @ts-ignore
import type { SearchResults } from '../models'
// @ts-ignore
import type { Session } from '../models'
// @ts-ignore
import type { SessionExecuteRequest } from '../models'
// @ts-ignore
import type { SessionExecuteResponse } from '../models'
/**
 * ToolboxApi - axios parameter creator
 * @export
 */
export const ToolboxApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder: async (
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createFolder', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('createFolder', 'path', path)
      // verify required parameter 'mode' is not null or undefined
      assertParamExists('createFolder', 'mode', mode)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/folder`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (mode !== undefined) {
        localVarQueryParameter['mode'] = mode
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession: async (
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createSession', 'sandboxId', sandboxId)
      // verify required parameter 'createSessionRequest' is not null or undefined
      assertParamExists('createSession', 'createSessionRequest', createSessionRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createSessionRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('deleteFile', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('deleteFile', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('deleteSession', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('deleteSession', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('downloadFile', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('downloadFile', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/download`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCommand: async (
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('executeCommand', 'sandboxId', sandboxId)
      // verify required parameter 'executeRequest' is not null or undefined
      assertParamExists('executeCommand', 'executeRequest', executeRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/execute`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(executeRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSessionCommand: async (
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('executeSessionCommand', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('executeSessionCommand', 'sessionId', sessionId)
      // verify required parameter 'sessionExecuteRequest' is not null or undefined
      assertParamExists('executeSessionCommand', 'sessionExecuteRequest', sessionExecuteRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/exec`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sessionExecuteRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInFiles: async (
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('findInFiles', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('findInFiles', 'path', path)
      // verify required parameter 'pattern' is not null or undefined
      assertParamExists('findInFiles', 'pattern', pattern)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/find`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (pattern !== undefined) {
        localVarQueryParameter['pattern'] = pattern
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileInfo: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getFileInfo', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('getFileInfo', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/info`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectDir: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getProjectDir', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/project-dir`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSession', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSession', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommand: async (
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSessionCommand', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSessionCommand', 'sessionId', sessionId)
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists('getSessionCommand', 'commandId', commandId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
        .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommandLogs: async (
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSessionCommandLogs', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSessionCommandLogs', 'sessionId', sessionId)
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists('getSessionCommandLogs', 'commandId', commandId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}/logs`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
        .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitAddFiles: async (
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitAddFiles', 'sandboxId', sandboxId)
      // verify required parameter 'gitAddRequest' is not null or undefined
      assertParamExists('gitAddFiles', 'gitAddRequest', gitAddRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/add`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitAddRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCheckoutBranch: async (
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCheckoutBranch', 'sandboxId', sandboxId)
      // verify required parameter 'gitCheckoutRequest' is not null or undefined
      assertParamExists('gitCheckoutBranch', 'gitCheckoutRequest', gitCheckoutRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/checkout`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCheckoutRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCloneRepository: async (
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCloneRepository', 'sandboxId', sandboxId)
      // verify required parameter 'gitCloneRequest' is not null or undefined
      assertParamExists('gitCloneRepository', 'gitCloneRequest', gitCloneRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/clone`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCloneRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCommitChanges: async (
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCommitChanges', 'sandboxId', sandboxId)
      // verify required parameter 'gitCommitRequest' is not null or undefined
      assertParamExists('gitCommitChanges', 'gitCommitRequest', gitCommitRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/commit`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCommitRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCreateBranch: async (
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCreateBranch', 'sandboxId', sandboxId)
      // verify required parameter 'gitBranchRequest' is not null or undefined
      assertParamExists('gitCreateBranch', 'gitBranchRequest', gitBranchRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitBranchRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitDeleteBranch: async (
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitDeleteBranch', 'sandboxId', sandboxId)
      // verify required parameter 'gitDeleteBranchRequest' is not null or undefined
      assertParamExists('gitDeleteBranch', 'gitDeleteBranchRequest', gitDeleteBranchRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitDeleteBranchRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetHistory: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitGetHistory', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitGetHistory', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/history`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetStatus: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitGetStatus', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitGetStatus', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/status`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitListBranches: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitListBranches', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitListBranches', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPullChanges: async (
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitPullChanges', 'sandboxId', sandboxId)
      // verify required parameter 'gitRepoRequest' is not null or undefined
      assertParamExists('gitPullChanges', 'gitRepoRequest', gitRepoRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/pull`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitRepoRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPushChanges: async (
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitPushChanges', 'sandboxId', sandboxId)
      // verify required parameter 'gitRepoRequest' is not null or undefined
      assertParamExists('gitPushChanges', 'gitRepoRequest', gitRepoRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/push`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitRepoRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('listFiles', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('listSessions', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspCompletions: async (
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspCompletions', 'sandboxId', sandboxId)
      // verify required parameter 'lspCompletionParams' is not null or undefined
      assertParamExists('lspCompletions', 'lspCompletionParams', lspCompletionParams)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/completions`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspCompletionParams, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidClose: async (
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDidClose', 'sandboxId', sandboxId)
      // verify required parameter 'lspDocumentRequest' is not null or undefined
      assertParamExists('lspDidClose', 'lspDocumentRequest', lspDocumentRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-close`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspDocumentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidOpen: async (
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDidOpen', 'sandboxId', sandboxId)
      // verify required parameter 'lspDocumentRequest' is not null or undefined
      assertParamExists('lspDidOpen', 'lspDocumentRequest', lspDocumentRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-open`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspDocumentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDocumentSymbols: async (
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDocumentSymbols', 'sandboxId', sandboxId)
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('lspDocumentSymbols', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('lspDocumentSymbols', 'pathToProject', pathToProject)
      // verify required parameter 'uri' is not null or undefined
      assertParamExists('lspDocumentSymbols', 'uri', uri)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/document-symbols`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      if (uri !== undefined) {
        localVarQueryParameter['uri'] = uri
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStart: async (
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspStart', 'sandboxId', sandboxId)
      // verify required parameter 'lspServerRequest' is not null or undefined
      assertParamExists('lspStart', 'lspServerRequest', lspServerRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspServerRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStop: async (
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspStop', 'sandboxId', sandboxId)
      // verify required parameter 'lspServerRequest' is not null or undefined
      assertParamExists('lspStop', 'lspServerRequest', lspServerRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspServerRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspWorkspaceSymbols: async (
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspWorkspaceSymbols', 'sandboxId', sandboxId)
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('lspWorkspaceSymbols', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('lspWorkspaceSymbols', 'pathToProject', pathToProject)
      // verify required parameter 'query' is not null or undefined
      assertParamExists('lspWorkspaceSymbols', 'query', query)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/workspace-symbols`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveFile: async (
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('moveFile', 'sandboxId', sandboxId)
      // verify required parameter 'source' is not null or undefined
      assertParamExists('moveFile', 'source', source)
      // verify required parameter 'destination' is not null or undefined
      assertParamExists('moveFile', 'destination', destination)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/move`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (source !== undefined) {
        localVarQueryParameter['source'] = source
      }

      if (destination !== undefined) {
        localVarQueryParameter['destination'] = destination
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInFiles: async (
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('replaceInFiles', 'sandboxId', sandboxId)
      // verify required parameter 'replaceRequest' is not null or undefined
      assertParamExists('replaceInFiles', 'replaceRequest', replaceRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/replace`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(replaceRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for content inside sandbox files using ripgrep or fallback
     * @summary Search content in files
     * @param {string} sandboxId
     * @param {SearchRequest} searchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchContent: async (
      sandboxId: string,
      searchRequest: SearchRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('searchContent', 'sandboxId', sandboxId)
      // verify required parameter 'searchRequest' is not null or undefined
      assertParamExists('searchContent', 'searchRequest', searchRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/search`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles: async (
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('searchFiles', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('searchFiles', 'path', path)
      // verify required parameter 'pattern' is not null or undefined
      assertParamExists('searchFiles', 'pattern', pattern)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/search`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (pattern !== undefined) {
        localVarQueryParameter['pattern'] = pattern
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFilePermissions: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('setFilePermissions', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('setFilePermissions', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/permissions`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (owner !== undefined) {
        localVarQueryParameter['owner'] = owner
      }

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (mode !== undefined) {
        localVarQueryParameter['mode'] = mode
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFile: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('uploadFile', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('uploadFile', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/upload`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (file !== undefined) {
        localVarFormParams.append('file', file as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFiles: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('uploadFiles', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/bulk-upload`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ToolboxApi - functional programming interface
 * @export
 */
export const ToolboxApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ToolboxApiAxiosParamCreator(configuration)
  return {
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createFolder(
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFolder(
        sandboxId,
        path,
        mode,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.createFolder']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createSession(
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createSession(
        sandboxId,
        createSessionRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.createSession']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.deleteFile']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteSession(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSession(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.deleteSession']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async downloadFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFile(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.downloadFile']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeCommand(
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeCommand(
        sandboxId,
        executeRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.executeCommand']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async executeSessionCommand(
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionExecuteResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSessionCommand(
        sandboxId,
        sessionId,
        sessionExecuteRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.executeSessionCommand']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async findInFiles(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findInFiles(
        sandboxId,
        path,
        pattern,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.findInFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFileInfo(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFileInfo(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getFileInfo']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectDir(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDirResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDir(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getProjectDir']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSession(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSession(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSession']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSessionCommand(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Command>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommand(
        sandboxId,
        sessionId,
        commandId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSessionCommand']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSessionCommandLogs(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommandLogs(
        sandboxId,
        sessionId,
        commandId,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSessionCommandLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitAddFiles(
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitAddFiles(
        sandboxId,
        gitAddRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitAddFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitCheckoutBranch(
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCheckoutBranch(
        sandboxId,
        gitCheckoutRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCheckoutBranch']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitCloneRepository(
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCloneRepository(
        sandboxId,
        gitCloneRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCloneRepository']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitCommitChanges(
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitCommitResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCommitChanges(
        sandboxId,
        gitCommitRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCommitChanges']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitCreateBranch(
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCreateBranch(
        sandboxId,
        gitBranchRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCreateBranch']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitDeleteBranch(
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitDeleteBranch(
        sandboxId,
        gitDeleteBranchRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitDeleteBranch']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitGetHistory(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GitCommitInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetHistory(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitGetHistory']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitGetStatus(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitStatus>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetStatus(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitGetStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitListBranches(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBranchResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitListBranches(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitListBranches']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitPullChanges(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitPullChanges(
        sandboxId,
        gitRepoRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitPullChanges']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gitPushChanges(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitPushChanges(
        sandboxId,
        gitRepoRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitPushChanges']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listFiles(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listFiles(
        sandboxId,
        xDaytonaOrganizationID,
        path,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.listFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listSessions(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listSessions(sandboxId, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.listSessions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspCompletions(
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletionList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspCompletions(
        sandboxId,
        lspCompletionParams,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspCompletions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspDidClose(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidClose(
        sandboxId,
        lspDocumentRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDidClose']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspDidOpen(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidOpen(
        sandboxId,
        lspDocumentRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDidOpen']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspDocumentSymbols(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDocumentSymbols(
        sandboxId,
        languageId,
        pathToProject,
        uri,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDocumentSymbols']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspStart(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspStart(
        sandboxId,
        lspServerRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspStart']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspStop(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspStop(
        sandboxId,
        lspServerRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspStop']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async lspWorkspaceSymbols(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspWorkspaceSymbols(
        sandboxId,
        languageId,
        pathToProject,
        query,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspWorkspaceSymbols']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moveFile(
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.moveFile(
        sandboxId,
        source,
        destination,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.moveFile']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async replaceInFiles(
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReplaceResult>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceInFiles(
        sandboxId,
        replaceRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.replaceInFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for content inside sandbox files using ripgrep or fallback
     * @summary Search content in files
     * @param {string} sandboxId
     * @param {SearchRequest} searchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchContent(
      sandboxId: string,
      searchRequest: SearchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResults>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchContent(
        sandboxId,
        searchRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.searchContent']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async searchFiles(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchFiles(
        sandboxId,
        path,
        pattern,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.searchFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async setFilePermissions(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setFilePermissions(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        owner,
        group,
        mode,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.setFilePermissions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async uploadFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        file,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.uploadFile']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFiles(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFiles(sandboxId, xDaytonaOrganizationID, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.uploadFiles']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ToolboxApi - factory interface
 * @export
 */
export const ToolboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ToolboxApiFp(configuration)
  return {
    /**
     * Create folder inside sandbox
     * @summary Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFolder(
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create a new session in the sandbox
     * @summary Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSession(
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete file inside sandbox
     * @summary Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteFile(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete a specific session
     * @summary Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSession(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Download file from sandbox
     * @summary Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    downloadFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<File> {
      return localVarFp
        .downloadFile(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeCommand(
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ExecuteResponse> {
      return localVarFp
        .executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Execute a command in a specific session
     * @summary Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    executeSessionCommand(
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SessionExecuteResponse> {
      return localVarFp
        .executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    findInFiles(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Match>> {
      return localVarFp
        .findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get file info inside sandbox
     * @summary Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFileInfo(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FileInfo> {
      return localVarFp
        .getFileInfo(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectDir(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProjectDirResponse> {
      return localVarFp
        .getProjectDir(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get session by ID
     * @summary Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSession(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Session> {
      return localVarFp
        .getSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get session command by ID
     * @summary Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommand(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Command> {
      return localVarFp
        .getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get logs for a specific command in a session
     * @summary Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSessionCommandLogs(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Add files to git commit
     * @summary Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitAddFiles(
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Checkout branch or commit in git repository
     * @summary Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCheckoutBranch(
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Clone git repository
     * @summary Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCloneRepository(
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Commit changes to git repository
     * @summary Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCommitChanges(
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GitCommitResponse> {
      return localVarFp
        .gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create branch on git repository
     * @summary Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitCreateBranch(
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete branch on git repository
     * @summary Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitDeleteBranch(
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get commit history from git repository
     * @summary Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetHistory(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<GitCommitInfo>> {
      return localVarFp
        .gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get status from git repository
     * @summary Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitGetStatus(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GitStatus> {
      return localVarFp
        .gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get branch list from git repository
     * @summary Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitListBranches(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListBranchResponse> {
      return localVarFp
        .gitListBranches(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Pull changes from remote
     * @summary Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPullChanges(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Push changes to remote
     * @summary Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gitPushChanges(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listFiles(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<FileInfo>> {
      return localVarFp
        .listFiles(sandboxId, xDaytonaOrganizationID, path, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * List all active sessions in the sandbox
     * @summary List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listSessions(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Session>> {
      return localVarFp
        .listSessions(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspCompletions(
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CompletionList> {
      return localVarFp
        .lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidClose(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDidOpen(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspDocumentSymbols(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStart(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspStop(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    lspWorkspaceSymbols(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Move file inside sandbox
     * @summary Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveFile(
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    replaceInFiles(
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ReplaceResult>> {
      return localVarFp
        .replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Search for content inside sandbox files using ripgrep or fallback
     * @summary Search content in files
     * @param {string} sandboxId
     * @param {SearchRequest} searchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchContent(
      sandboxId: string,
      searchRequest: SearchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SearchResults> {
      return localVarFp
        .searchContent(sandboxId, searchRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Search for files inside sandbox
     * @summary Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchFiles(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SearchFilesResponse> {
      return localVarFp
        .searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setFilePermissions(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Upload file inside sandbox
     * @summary Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFile(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Upload multiple files inside sandbox
     * @summary Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFiles(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .uploadFiles(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ToolboxApi - object-oriented interface
 * @export
 * @class ToolboxApi
 * @extends {BaseAPI}
 */
export class ToolboxApi extends BaseAPI {
  /**
   * Create folder inside sandbox
   * @summary Create folder
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} mode
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public createFolder(
    sandboxId: string,
    path: string,
    mode: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .createFolder(sandboxId, path, mode, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a new session in the sandbox
   * @summary Create session
   * @param {string} sandboxId
   * @param {CreateSessionRequest} createSessionRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public createSession(
    sandboxId: string,
    createSessionRequest: CreateSessionRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .createSession(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete file inside sandbox
   * @summary Delete file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public deleteFile(sandboxId: string, path: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .deleteFile(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete a specific session
   * @summary Delete session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public deleteSession(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .deleteSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Download file from sandbox
   * @summary Download file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public downloadFile(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .downloadFile(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Execute command synchronously inside sandbox
   * @summary Execute command
   * @param {string} sandboxId
   * @param {ExecuteRequest} executeRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public executeCommand(
    sandboxId: string,
    executeRequest: ExecuteRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .executeCommand(sandboxId, executeRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Execute a command in a specific session
   * @summary Execute command in session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {SessionExecuteRequest} sessionExecuteRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public executeSessionCommand(
    sandboxId: string,
    sessionId: string,
    sessionExecuteRequest: SessionExecuteRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .executeSessionCommand(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for text/pattern inside sandbox files
   * @summary Search for text/pattern in files
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} pattern
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public findInFiles(
    sandboxId: string,
    path: string,
    pattern: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .findInFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get file info inside sandbox
   * @summary Get file info
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getFileInfo(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getFileInfo(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get sandbox project dir
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getProjectDir(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getProjectDir(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get session by ID
   * @summary Get session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSession(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSession(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get session command by ID
   * @summary Get session command
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} commandId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSessionCommand(
    sandboxId: string,
    sessionId: string,
    commandId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSessionCommand(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get logs for a specific command in a session
   * @summary Get command logs
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} commandId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSessionCommandLogs(
    sandboxId: string,
    sessionId: string,
    commandId: string,
    xDaytonaOrganizationID?: string,
    follow?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSessionCommandLogs(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Add files to git commit
   * @summary Add files
   * @param {string} sandboxId
   * @param {GitAddRequest} gitAddRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitAddFiles(
    sandboxId: string,
    gitAddRequest: GitAddRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitAddFiles(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Checkout branch or commit in git repository
   * @summary Checkout branch
   * @param {string} sandboxId
   * @param {GitCheckoutRequest} gitCheckoutRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCheckoutBranch(
    sandboxId: string,
    gitCheckoutRequest: GitCheckoutRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCheckoutBranch(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Clone git repository
   * @summary Clone repository
   * @param {string} sandboxId
   * @param {GitCloneRequest} gitCloneRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCloneRepository(
    sandboxId: string,
    gitCloneRequest: GitCloneRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCloneRepository(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Commit changes to git repository
   * @summary Commit changes
   * @param {string} sandboxId
   * @param {GitCommitRequest} gitCommitRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCommitChanges(
    sandboxId: string,
    gitCommitRequest: GitCommitRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCommitChanges(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create branch on git repository
   * @summary Create branch
   * @param {string} sandboxId
   * @param {GitBranchRequest} gitBranchRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCreateBranch(
    sandboxId: string,
    gitBranchRequest: GitBranchRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCreateBranch(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete branch on git repository
   * @summary Delete branch
   * @param {string} sandboxId
   * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitDeleteBranch(
    sandboxId: string,
    gitDeleteBranchRequest: GitDeleteBranchRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitDeleteBranch(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get commit history from git repository
   * @summary Get commit history
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitGetHistory(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitGetHistory(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get status from git repository
   * @summary Get git status
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitGetStatus(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitGetStatus(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get branch list from git repository
   * @summary Get branch list
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitListBranches(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitListBranches(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Pull changes from remote
   * @summary Pull changes
   * @param {string} sandboxId
   * @param {GitRepoRequest} gitRepoRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitPullChanges(
    sandboxId: string,
    gitRepoRequest: GitRepoRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitPullChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Push changes to remote
   * @summary Push changes
   * @param {string} sandboxId
   * @param {GitRepoRequest} gitRepoRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitPushChanges(
    sandboxId: string,
    gitRepoRequest: GitRepoRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitPushChanges(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List files
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {string} [path]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public listFiles(sandboxId: string, xDaytonaOrganizationID?: string, path?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .listFiles(sandboxId, xDaytonaOrganizationID, path, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all active sessions in the sandbox
   * @summary List sessions
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public listSessions(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .listSessions(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
   * @summary Get Lsp Completions
   * @param {string} sandboxId
   * @param {LspCompletionParams} lspCompletionParams
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspCompletions(
    sandboxId: string,
    lspCompletionParams: LspCompletionParams,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspCompletions(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document close notification is sent from the client to the server when the document got closed in the client.
   * @summary Call Lsp DidClose
   * @param {string} sandboxId
   * @param {LspDocumentRequest} lspDocumentRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDidClose(
    sandboxId: string,
    lspDocumentRequest: LspDocumentRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDidClose(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document open notification is sent from the client to the server to signal newly opened text documents.
   * @summary Call Lsp DidOpen
   * @param {string} sandboxId
   * @param {LspDocumentRequest} lspDocumentRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDidOpen(
    sandboxId: string,
    lspDocumentRequest: LspDocumentRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDidOpen(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document symbol request is sent from the client to the server.
   * @summary Call Lsp DocumentSymbols
   * @param {string} sandboxId
   * @param {string} languageId
   * @param {string} pathToProject
   * @param {string} uri
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDocumentSymbols(
    sandboxId: string,
    languageId: string,
    pathToProject: string,
    uri: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDocumentSymbols(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start Lsp server process inside sandbox project
   * @summary Start Lsp server
   * @param {string} sandboxId
   * @param {LspServerRequest} lspServerRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspStart(
    sandboxId: string,
    lspServerRequest: LspServerRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspStart(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop Lsp server process inside sandbox project
   * @summary Stop Lsp server
   * @param {string} sandboxId
   * @param {LspServerRequest} lspServerRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspStop(
    sandboxId: string,
    lspServerRequest: LspServerRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspStop(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
   * @summary Call Lsp WorkspaceSymbols
   * @param {string} sandboxId
   * @param {string} languageId
   * @param {string} pathToProject
   * @param {string} query
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspWorkspaceSymbols(
    sandboxId: string,
    languageId: string,
    pathToProject: string,
    query: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspWorkspaceSymbols(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Move file inside sandbox
   * @summary Move file
   * @param {string} sandboxId
   * @param {string} source
   * @param {string} destination
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public moveFile(
    sandboxId: string,
    source: string,
    destination: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .moveFile(sandboxId, source, destination, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Replace text/pattern in multiple files inside sandbox
   * @summary Replace in files
   * @param {string} sandboxId
   * @param {ReplaceRequest} replaceRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public replaceInFiles(
    sandboxId: string,
    replaceRequest: ReplaceRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .replaceInFiles(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for content inside sandbox files using ripgrep or fallback
   * @summary Search content in files
   * @param {string} sandboxId
   * @param {SearchRequest} searchRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public searchContent(
    sandboxId: string,
    searchRequest: SearchRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .searchContent(sandboxId, searchRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for files inside sandbox
   * @summary Search files
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} pattern
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public searchFiles(
    sandboxId: string,
    path: string,
    pattern: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .searchFiles(sandboxId, path, pattern, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Set file owner/group/permissions inside sandbox
   * @summary Set file permissions
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {string} [owner]
   * @param {string} [group]
   * @param {string} [mode]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public setFilePermissions(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    owner?: string,
    group?: string,
    mode?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .setFilePermissions(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Upload file inside sandbox
   * @summary Upload file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {File} [file]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public uploadFile(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    file?: File,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .uploadFile(sandboxId, path, xDaytonaOrganizationID, file, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Upload multiple files inside sandbox
   * @summary Upload multiple files
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public uploadFiles(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .uploadFiles(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
