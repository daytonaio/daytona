/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { Command } from '../models'
// @ts-ignore
import type { CompletionList } from '../models'
// @ts-ignore
import type { CompressedScreenshotResponse } from '../models'
// @ts-ignore
import type { ComputerUseStartResponse } from '../models'
// @ts-ignore
import type { ComputerUseStatusResponse } from '../models'
// @ts-ignore
import type { ComputerUseStopResponse } from '../models'
// @ts-ignore
import type { CreateSessionRequest } from '../models'
// @ts-ignore
import type { DisplayInfoResponse } from '../models'
// @ts-ignore
import type { DownloadFiles } from '../models'
// @ts-ignore
import type { ExecuteRequest } from '../models'
// @ts-ignore
import type { ExecuteResponse } from '../models'
// @ts-ignore
import type { FileInfo } from '../models'
// @ts-ignore
import type { GitAddRequest } from '../models'
// @ts-ignore
import type { GitBranchRequest } from '../models'
// @ts-ignore
import type { GitCheckoutRequest } from '../models'
// @ts-ignore
import type { GitCloneRequest } from '../models'
// @ts-ignore
import type { GitCommitInfo } from '../models'
// @ts-ignore
import type { GitCommitRequest } from '../models'
// @ts-ignore
import type { GitCommitResponse } from '../models'
// @ts-ignore
import type { GitDeleteBranchRequest } from '../models'
// @ts-ignore
import type { GitRepoRequest } from '../models'
// @ts-ignore
import type { GitStatus } from '../models'
// @ts-ignore
import type { KeyboardHotkeyRequest } from '../models'
// @ts-ignore
import type { KeyboardPressRequest } from '../models'
// @ts-ignore
import type { KeyboardTypeRequest } from '../models'
// @ts-ignore
import type { ListBranchResponse } from '../models'
// @ts-ignore
import type { LspCompletionParams } from '../models'
// @ts-ignore
import type { LspDocumentRequest } from '../models'
// @ts-ignore
import type { LspServerRequest } from '../models'
// @ts-ignore
import type { LspSymbol } from '../models'
// @ts-ignore
import type { Match } from '../models'
// @ts-ignore
import type { MouseClickRequest } from '../models'
// @ts-ignore
import type { MouseClickResponse } from '../models'
// @ts-ignore
import type { MouseDragRequest } from '../models'
// @ts-ignore
import type { MouseDragResponse } from '../models'
// @ts-ignore
import type { MouseMoveRequest } from '../models'
// @ts-ignore
import type { MouseMoveResponse } from '../models'
// @ts-ignore
import type { MousePosition } from '../models'
// @ts-ignore
import type { MouseScrollRequest } from '../models'
// @ts-ignore
import type { MouseScrollResponse } from '../models'
// @ts-ignore
import type { ProcessErrorsResponse } from '../models'
// @ts-ignore
import type { ProcessLogsResponse } from '../models'
// @ts-ignore
import type { ProcessRestartResponse } from '../models'
// @ts-ignore
import type { ProcessStatusResponse } from '../models'
// @ts-ignore
import type { ProjectDirResponse } from '../models'
// @ts-ignore
import type { PtyCreateRequest } from '../models'
// @ts-ignore
import type { PtyCreateResponse } from '../models'
// @ts-ignore
import type { PtyListResponse } from '../models'
// @ts-ignore
import type { PtyResizeRequest } from '../models'
// @ts-ignore
import type { PtySessionInfo } from '../models'
// @ts-ignore
import type { RegionScreenshotResponse } from '../models'
// @ts-ignore
import type { ReplaceRequest } from '../models'
// @ts-ignore
import type { ReplaceResult } from '../models'
// @ts-ignore
import type { ScreenshotResponse } from '../models'
// @ts-ignore
import type { SearchFilesResponse } from '../models'
// @ts-ignore
import type { Session } from '../models'
// @ts-ignore
import type { SessionExecuteRequest } from '../models'
// @ts-ignore
import type { SessionExecuteResponse } from '../models'
// @ts-ignore
import type { UserHomeDirResponse } from '../models'
// @ts-ignore
import type { WindowsResponse } from '../models'
// @ts-ignore
import type { WorkDirResponse } from '../models'
/**
 * ToolboxApi - axios parameter creator
 * @export
 */
export const ToolboxApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Click mouse at specified coordinates
     * @summary [DEPRECATED] Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    clickMouseDeprecated: async (
      sandboxId: string,
      mouseClickRequest: MouseClickRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('clickMouseDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'mouseClickRequest' is not null or undefined
      assertParamExists('clickMouseDeprecated', 'mouseClickRequest', mouseClickRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/click`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(mouseClickRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create folder inside sandbox
     * @summary [DEPRECATED] Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createFolderDeprecated: async (
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createFolderDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('createFolderDeprecated', 'path', path)
      // verify required parameter 'mode' is not null or undefined
      assertParamExists('createFolderDeprecated', 'mode', mode)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/folder`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (mode !== undefined) {
        localVarQueryParameter['mode'] = mode
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a new PTY session in the sandbox
     * @summary [DEPRECATED] Create PTY session
     * @param {string} sandboxId
     * @param {PtyCreateRequest} ptyCreateRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createPTYSessionDeprecated: async (
      sandboxId: string,
      ptyCreateRequest: PtyCreateRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createPTYSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'ptyCreateRequest' is not null or undefined
      assertParamExists('createPTYSessionDeprecated', 'ptyCreateRequest', ptyCreateRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/pty`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(ptyCreateRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create a new session in the sandbox
     * @summary [DEPRECATED] Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createSessionDeprecated: async (
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'createSessionRequest' is not null or undefined
      assertParamExists('createSessionDeprecated', 'createSessionRequest', createSessionRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createSessionRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete file inside sandbox
     * @summary [DEPRECATED] Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteFileDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      recursive?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('deleteFileDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('deleteFileDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (recursive !== undefined) {
        localVarQueryParameter['recursive'] = recursive
      }

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete a PTY session and terminate the associated process
     * @summary [DEPRECATED] Delete PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deletePTYSessionDeprecated: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('deletePTYSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('deletePTYSessionDeprecated', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/pty/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete a specific session
     * @summary [DEPRECATED] Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSessionDeprecated: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('deleteSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('deleteSessionDeprecated', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Download file from sandbox
     * @summary [DEPRECATED] Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFileDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('downloadFileDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('downloadFileDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/download`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary [DEPRECATED] Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFilesDeprecated: async (
      sandboxId: string,
      downloadFiles: DownloadFiles,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('downloadFilesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'downloadFiles' is not null or undefined
      assertParamExists('downloadFilesDeprecated', 'downloadFiles', downloadFiles)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/bulk-download`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(downloadFiles, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Drag mouse from start to end coordinates
     * @summary [DEPRECATED] Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    dragMouseDeprecated: async (
      sandboxId: string,
      mouseDragRequest: MouseDragRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('dragMouseDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'mouseDragRequest' is not null or undefined
      assertParamExists('dragMouseDeprecated', 'mouseDragRequest', mouseDragRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/drag`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(mouseDragRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary [DEPRECATED] Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    executeCommandDeprecated: async (
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('executeCommandDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'executeRequest' is not null or undefined
      assertParamExists('executeCommandDeprecated', 'executeRequest', executeRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/execute`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(executeRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Execute a command in a specific session
     * @summary [DEPRECATED] Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    executeSessionCommandDeprecated: async (
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('executeSessionCommandDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('executeSessionCommandDeprecated', 'sessionId', sessionId)
      // verify required parameter 'sessionExecuteRequest' is not null or undefined
      assertParamExists('executeSessionCommandDeprecated', 'sessionExecuteRequest', sessionExecuteRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/exec`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sessionExecuteRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary [DEPRECATED] Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    findInFilesDeprecated: async (
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('findInFilesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('findInFilesDeprecated', 'path', path)
      // verify required parameter 'pattern' is not null or undefined
      assertParamExists('findInFilesDeprecated', 'pattern', pattern)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/find`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (pattern !== undefined) {
        localVarQueryParameter['pattern'] = pattern
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get status of all VNC desktop processes
     * @summary [DEPRECATED] Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getComputerUseStatusDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getComputerUseStatusDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/status`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get information about displays
     * @summary [DEPRECATED] Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getDisplayInfoDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getDisplayInfoDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/display/info`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get file info inside sandbox
     * @summary [DEPRECATED] Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getFileInfoDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getFileInfoDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('getFileInfoDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/info`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get current mouse cursor position
     * @summary [DEPRECATED] Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getMousePositionDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getMousePositionDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/position`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get PTY session information by ID
     * @summary [DEPRECATED] Get PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPTYSessionDeprecated: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getPTYSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getPTYSessionDeprecated', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/pty/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get error logs for a specific VNC process
     * @summary [DEPRECATED] Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessErrorsDeprecated: async (
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessErrorsDeprecated', 'processName', processName)
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getProcessErrorsDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/errors`
        .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get logs for a specific VNC process
     * @summary [DEPRECATED] Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessLogsDeprecated: async (
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessLogsDeprecated', 'processName', processName)
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getProcessLogsDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/logs`
        .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get status of a specific VNC process
     * @summary [DEPRECATED] Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessStatusDeprecated: async (
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessStatusDeprecated', 'processName', processName)
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getProcessStatusDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/status`
        .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProjectDirDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getProjectDirDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/project-dir`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get session command by ID
     * @summary [DEPRECATED] Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionCommandDeprecated: async (
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSessionCommandDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSessionCommandDeprecated', 'sessionId', sessionId)
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists('getSessionCommandDeprecated', 'commandId', commandId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
        .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get logs for a specific command in a session
     * @summary [DEPRECATED] Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionCommandLogsDeprecated: async (
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSessionCommandLogsDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSessionCommandLogsDeprecated', 'sessionId', sessionId)
      // verify required parameter 'commandId' is not null or undefined
      assertParamExists('getSessionCommandLogsDeprecated', 'commandId', commandId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}/command/{commandId}/logs`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
        .replace(`{${'commandId'}}`, encodeURIComponent(String(commandId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get session by ID
     * @summary [DEPRECATED] Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionDeprecated: async (
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('getSessionDeprecated', 'sessionId', sessionId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session/{sessionId}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getUserHomeDirDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getUserHomeDirDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/user-home-dir`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get list of open windows
     * @summary [DEPRECATED] Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWindowsDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getWindowsDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/display/windows`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkDirDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getWorkDirDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/work-dir`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Add files to git commit
     * @summary [DEPRECATED] Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitAddFilesDeprecated: async (
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitAddFilesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitAddRequest' is not null or undefined
      assertParamExists('gitAddFilesDeprecated', 'gitAddRequest', gitAddRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/add`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitAddRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Checkout branch or commit in git repository
     * @summary [DEPRECATED] Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCheckoutBranchDeprecated: async (
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCheckoutBranchDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitCheckoutRequest' is not null or undefined
      assertParamExists('gitCheckoutBranchDeprecated', 'gitCheckoutRequest', gitCheckoutRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/checkout`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCheckoutRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Clone git repository
     * @summary [DEPRECATED] Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCloneRepositoryDeprecated: async (
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCloneRepositoryDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitCloneRequest' is not null or undefined
      assertParamExists('gitCloneRepositoryDeprecated', 'gitCloneRequest', gitCloneRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/clone`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCloneRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Commit changes to git repository
     * @summary [DEPRECATED] Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCommitChangesDeprecated: async (
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCommitChangesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitCommitRequest' is not null or undefined
      assertParamExists('gitCommitChangesDeprecated', 'gitCommitRequest', gitCommitRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/commit`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitCommitRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create branch on git repository
     * @summary [DEPRECATED] Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCreateBranchDeprecated: async (
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitCreateBranchDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitBranchRequest' is not null or undefined
      assertParamExists('gitCreateBranchDeprecated', 'gitBranchRequest', gitBranchRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitBranchRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Delete branch on git repository
     * @summary [DEPRECATED] Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitDeleteBranchDeprecated: async (
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitDeleteBranchDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitDeleteBranchRequest' is not null or undefined
      assertParamExists('gitDeleteBranchDeprecated', 'gitDeleteBranchRequest', gitDeleteBranchRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitDeleteBranchRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get commit history from git repository
     * @summary [DEPRECATED] Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitGetHistoryDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitGetHistoryDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitGetHistoryDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/history`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get status from git repository
     * @summary [DEPRECATED] Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitGetStatusDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitGetStatusDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitGetStatusDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/status`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get branch list from git repository
     * @summary [DEPRECATED] Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitListBranchesDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitListBranchesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('gitListBranchesDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/branches`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Pull changes from remote
     * @summary [DEPRECATED] Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitPullChangesDeprecated: async (
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitPullChangesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitRepoRequest' is not null or undefined
      assertParamExists('gitPullChangesDeprecated', 'gitRepoRequest', gitRepoRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/pull`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitRepoRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Push changes to remote
     * @summary [DEPRECATED] Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitPushChangesDeprecated: async (
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('gitPushChangesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'gitRepoRequest' is not null or undefined
      assertParamExists('gitPushChangesDeprecated', 'gitRepoRequest', gitRepoRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/git/push`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(gitRepoRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listFilesDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('listFilesDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all active PTY sessions in the sandbox
     * @summary [DEPRECATED] List PTY sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listPTYSessionsDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('listPTYSessionsDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/pty`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * List all active sessions in the sandbox
     * @summary [DEPRECATED] List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listSessionsDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('listSessionsDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/session`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary [DEPRECATED] Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspCompletionsDeprecated: async (
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspCompletionsDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'lspCompletionParams' is not null or undefined
      assertParamExists('lspCompletionsDeprecated', 'lspCompletionParams', lspCompletionParams)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/completions`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspCompletionParams, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary [DEPRECATED] Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDidCloseDeprecated: async (
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDidCloseDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'lspDocumentRequest' is not null or undefined
      assertParamExists('lspDidCloseDeprecated', 'lspDocumentRequest', lspDocumentRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-close`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspDocumentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary [DEPRECATED] Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDidOpenDeprecated: async (
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDidOpenDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'lspDocumentRequest' is not null or undefined
      assertParamExists('lspDidOpenDeprecated', 'lspDocumentRequest', lspDocumentRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/did-open`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspDocumentRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary [DEPRECATED] Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDocumentSymbolsDeprecated: async (
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspDocumentSymbolsDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('lspDocumentSymbolsDeprecated', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('lspDocumentSymbolsDeprecated', 'pathToProject', pathToProject)
      // verify required parameter 'uri' is not null or undefined
      assertParamExists('lspDocumentSymbolsDeprecated', 'uri', uri)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/document-symbols`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      if (uri !== undefined) {
        localVarQueryParameter['uri'] = uri
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary [DEPRECATED] Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspStartDeprecated: async (
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspStartDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'lspServerRequest' is not null or undefined
      assertParamExists('lspStartDeprecated', 'lspServerRequest', lspServerRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspServerRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary [DEPRECATED] Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspStopDeprecated: async (
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspStopDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'lspServerRequest' is not null or undefined
      assertParamExists('lspStopDeprecated', 'lspServerRequest', lspServerRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(lspServerRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary [DEPRECATED] Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspWorkspaceSymbolsDeprecated: async (
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('lspWorkspaceSymbolsDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('lspWorkspaceSymbolsDeprecated', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('lspWorkspaceSymbolsDeprecated', 'pathToProject', pathToProject)
      // verify required parameter 'query' is not null or undefined
      assertParamExists('lspWorkspaceSymbolsDeprecated', 'query', query)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/lsp/workspace-symbols`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      if (query !== undefined) {
        localVarQueryParameter['query'] = query
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Move file inside sandbox
     * @summary [DEPRECATED] Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    moveFileDeprecated: async (
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('moveFileDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'source' is not null or undefined
      assertParamExists('moveFileDeprecated', 'source', source)
      // verify required parameter 'destination' is not null or undefined
      assertParamExists('moveFileDeprecated', 'destination', destination)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/move`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (source !== undefined) {
        localVarQueryParameter['source'] = source
      }

      if (destination !== undefined) {
        localVarQueryParameter['destination'] = destination
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Move mouse cursor to specified coordinates
     * @summary [DEPRECATED] Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    moveMouseDeprecated: async (
      sandboxId: string,
      mouseMoveRequest: MouseMoveRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('moveMouseDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'mouseMoveRequest' is not null or undefined
      assertParamExists('moveMouseDeprecated', 'mouseMoveRequest', mouseMoveRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/move`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(mouseMoveRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Press a hotkey combination
     * @summary [DEPRECATED] Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    pressHotkeyDeprecated: async (
      sandboxId: string,
      keyboardHotkeyRequest: KeyboardHotkeyRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('pressHotkeyDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'keyboardHotkeyRequest' is not null or undefined
      assertParamExists('pressHotkeyDeprecated', 'keyboardHotkeyRequest', keyboardHotkeyRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/hotkey`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(keyboardHotkeyRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Press a key with optional modifiers
     * @summary [DEPRECATED] Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    pressKeyDeprecated: async (
      sandboxId: string,
      keyboardPressRequest: KeyboardPressRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('pressKeyDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'keyboardPressRequest' is not null or undefined
      assertParamExists('pressKeyDeprecated', 'keyboardPressRequest', keyboardPressRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/key`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(keyboardPressRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary [DEPRECATED] Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceInFilesDeprecated: async (
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('replaceInFilesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'replaceRequest' is not null or undefined
      assertParamExists('replaceInFilesDeprecated', 'replaceRequest', replaceRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/replace`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(replaceRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Resize a PTY session
     * @summary [DEPRECATED] Resize PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {PtyResizeRequest} ptyResizeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    resizePTYSessionDeprecated: async (
      sandboxId: string,
      sessionId: string,
      ptyResizeRequest: PtyResizeRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('resizePTYSessionDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'sessionId' is not null or undefined
      assertParamExists('resizePTYSessionDeprecated', 'sessionId', sessionId)
      // verify required parameter 'ptyResizeRequest' is not null or undefined
      assertParamExists('resizePTYSessionDeprecated', 'ptyResizeRequest', ptyResizeRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/process/pty/{sessionId}/resize`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'sessionId'}}`, encodeURIComponent(String(sessionId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(ptyResizeRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Restart a specific VNC process
     * @summary [DEPRECATED] Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    restartProcessDeprecated: async (
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('restartProcessDeprecated', 'processName', processName)
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('restartProcessDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/process/{processName}/restart`
        .replace(`{${'processName'}}`, encodeURIComponent(String(processName)))
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Scroll mouse at specified coordinates
     * @summary [DEPRECATED] Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    scrollMouseDeprecated: async (
      sandboxId: string,
      mouseScrollRequest: MouseScrollRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('scrollMouseDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'mouseScrollRequest' is not null or undefined
      assertParamExists('scrollMouseDeprecated', 'mouseScrollRequest', mouseScrollRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/mouse/scroll`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(mouseScrollRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for files inside sandbox
     * @summary [DEPRECATED] Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    searchFilesDeprecated: async (
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('searchFilesDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('searchFilesDeprecated', 'path', path)
      // verify required parameter 'pattern' is not null or undefined
      assertParamExists('searchFilesDeprecated', 'pattern', pattern)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/search`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (pattern !== undefined) {
        localVarQueryParameter['pattern'] = pattern
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary [DEPRECATED] Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setFilePermissionsDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('setFilePermissionsDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('setFilePermissionsDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/permissions`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (owner !== undefined) {
        localVarQueryParameter['owner'] = owner
      }

      if (group !== undefined) {
        localVarQueryParameter['group'] = group
      }

      if (mode !== undefined) {
        localVarQueryParameter['mode'] = mode
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startComputerUseDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('startComputerUseDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopComputerUseDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('stopComputerUseDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a compressed screenshot of a specific region
     * @summary [DEPRECATED] Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshotDeprecated: async (
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshotDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'height' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshotDeprecated', 'height', height)
      // verify required parameter 'width' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshotDeprecated', 'width', width)
      // verify required parameter 'y' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshotDeprecated', 'y', y)
      // verify required parameter 'x' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshotDeprecated', 'x', x)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region/compressed`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (scale !== undefined) {
        localVarQueryParameter['scale'] = scale
      }

      if (quality !== undefined) {
        localVarQueryParameter['quality'] = quality
      }

      if (format !== undefined) {
        localVarQueryParameter['format'] = format
      }

      if (showCursor !== undefined) {
        localVarQueryParameter['show_cursor'] = showCursor
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height
      }

      if (width !== undefined) {
        localVarQueryParameter['width'] = width
      }

      if (y !== undefined) {
        localVarQueryParameter['y'] = y
      }

      if (x !== undefined) {
        localVarQueryParameter['x'] = x
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary [DEPRECATED] Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeCompressedScreenshotDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('takeCompressedScreenshotDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/compressed`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (scale !== undefined) {
        localVarQueryParameter['scale'] = scale
      }

      if (quality !== undefined) {
        localVarQueryParameter['quality'] = quality
      }

      if (format !== undefined) {
        localVarQueryParameter['format'] = format
      }

      if (showCursor !== undefined) {
        localVarQueryParameter['show_cursor'] = showCursor
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a screenshot of a specific region
     * @summary [DEPRECATED] Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeRegionScreenshotDeprecated: async (
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('takeRegionScreenshotDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'height' is not null or undefined
      assertParamExists('takeRegionScreenshotDeprecated', 'height', height)
      // verify required parameter 'width' is not null or undefined
      assertParamExists('takeRegionScreenshotDeprecated', 'width', width)
      // verify required parameter 'y' is not null or undefined
      assertParamExists('takeRegionScreenshotDeprecated', 'y', y)
      // verify required parameter 'x' is not null or undefined
      assertParamExists('takeRegionScreenshotDeprecated', 'x', x)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot/region`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (showCursor !== undefined) {
        localVarQueryParameter['show_cursor'] = showCursor
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height
      }

      if (width !== undefined) {
        localVarQueryParameter['width'] = width
      }

      if (y !== undefined) {
        localVarQueryParameter['y'] = y
      }

      if (x !== undefined) {
        localVarQueryParameter['x'] = x
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a screenshot of the entire screen
     * @summary [DEPRECATED] Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeScreenshotDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('takeScreenshotDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/screenshot`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (showCursor !== undefined) {
        localVarQueryParameter['show_cursor'] = showCursor
      }

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Type text using keyboard
     * @summary [DEPRECATED] Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    typeTextDeprecated: async (
      sandboxId: string,
      keyboardTypeRequest: KeyboardTypeRequest,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('typeTextDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'keyboardTypeRequest' is not null or undefined
      assertParamExists('typeTextDeprecated', 'keyboardTypeRequest', keyboardTypeRequest)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/computeruse/keyboard/type`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(keyboardTypeRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Upload file inside sandbox
     * @summary [DEPRECATED] Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFileDeprecated: async (
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('uploadFileDeprecated', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      assertParamExists('uploadFileDeprecated', 'path', path)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/upload`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)()

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (path !== undefined) {
        localVarQueryParameter['path'] = path
      }

      if (file !== undefined) {
        localVarFormParams.append('file', file as any)
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data'

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = localVarFormParams

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Upload multiple files inside sandbox
     * @summary [DEPRECATED] Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFilesDeprecated: async (
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('uploadFilesDeprecated', 'sandboxId', sandboxId)
      const localVarPath = `/toolbox/{sandboxId}/toolbox/files/bulk-upload`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      // authentication oauth2 required

      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ToolboxApi - functional programming interface
 * @export
 */
export const ToolboxApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ToolboxApiAxiosParamCreator(configuration)
  return {
    /**
     * Click mouse at specified coordinates
     * @summary [DEPRECATED] Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async clickMouseDeprecated(
      sandboxId: string,
      mouseClickRequest: MouseClickRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseClickResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.clickMouseDeprecated(
        sandboxId,
        mouseClickRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.clickMouseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create folder inside sandbox
     * @summary [DEPRECATED] Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async createFolderDeprecated(
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createFolderDeprecated(
        sandboxId,
        path,
        mode,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.createFolderDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create a new PTY session in the sandbox
     * @summary [DEPRECATED] Create PTY session
     * @param {string} sandboxId
     * @param {PtyCreateRequest} ptyCreateRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async createPTYSessionDeprecated(
      sandboxId: string,
      ptyCreateRequest: PtyCreateRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PtyCreateResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createPTYSessionDeprecated(
        sandboxId,
        ptyCreateRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.createPTYSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create a new session in the sandbox
     * @summary [DEPRECATED] Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async createSessionDeprecated(
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createSessionDeprecated(
        sandboxId,
        createSessionRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.createSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete file inside sandbox
     * @summary [DEPRECATED] Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async deleteFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      recursive?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFileDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        recursive,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.deleteFileDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete a PTY session and terminate the associated process
     * @summary [DEPRECATED] Delete PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async deletePTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePTYSessionDeprecated(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.deletePTYSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete a specific session
     * @summary [DEPRECATED] Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async deleteSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSessionDeprecated(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.deleteSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Download file from sandbox
     * @summary [DEPRECATED] Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async downloadFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFileDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.downloadFileDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary [DEPRECATED] Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async downloadFilesDeprecated(
      sandboxId: string,
      downloadFiles: DownloadFiles,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.downloadFilesDeprecated(
        sandboxId,
        downloadFiles,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.downloadFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Drag mouse from start to end coordinates
     * @summary [DEPRECATED] Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async dragMouseDeprecated(
      sandboxId: string,
      mouseDragRequest: MouseDragRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseDragResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.dragMouseDeprecated(
        sandboxId,
        mouseDragRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.dragMouseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary [DEPRECATED] Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async executeCommandDeprecated(
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExecuteResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeCommandDeprecated(
        sandboxId,
        executeRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.executeCommandDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Execute a command in a specific session
     * @summary [DEPRECATED] Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async executeSessionCommandDeprecated(
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SessionExecuteResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.executeSessionCommandDeprecated(
        sandboxId,
        sessionId,
        sessionExecuteRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.executeSessionCommandDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary [DEPRECATED] Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async findInFilesDeprecated(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Match>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.findInFilesDeprecated(
        sandboxId,
        path,
        pattern,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.findInFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get status of all VNC desktop processes
     * @summary [DEPRECATED] Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getComputerUseStatusDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStatusResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComputerUseStatusDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getComputerUseStatusDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get information about displays
     * @summary [DEPRECATED] Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getDisplayInfoDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisplayInfoResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDisplayInfoDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getDisplayInfoDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get file info inside sandbox
     * @summary [DEPRECATED] Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getFileInfoDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getFileInfoDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getFileInfoDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get current mouse cursor position
     * @summary [DEPRECATED] Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getMousePositionDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MousePosition>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMousePositionDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getMousePositionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get PTY session information by ID
     * @summary [DEPRECATED] Get PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getPTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PtySessionInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPTYSessionDeprecated(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getPTYSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get error logs for a specific VNC process
     * @summary [DEPRECATED] Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getProcessErrorsDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessErrorsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessErrorsDeprecated(
        processName,
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getProcessErrorsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get logs for a specific VNC process
     * @summary [DEPRECATED] Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getProcessLogsDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessLogsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessLogsDeprecated(
        processName,
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getProcessLogsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get status of a specific VNC process
     * @summary [DEPRECATED] Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getProcessStatusDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessStatusResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessStatusDeprecated(
        processName,
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getProcessStatusDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getProjectDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDirResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDirDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getProjectDirDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get session command by ID
     * @summary [DEPRECATED] Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getSessionCommandDeprecated(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Command>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommandDeprecated(
        sandboxId,
        sessionId,
        commandId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSessionCommandDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get logs for a specific command in a session
     * @summary [DEPRECATED] Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getSessionCommandLogsDeprecated(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionCommandLogsDeprecated(
        sandboxId,
        sessionId,
        commandId,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSessionCommandLogsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get session by ID
     * @summary [DEPRECATED] Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Session>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getSessionDeprecated(
        sandboxId,
        sessionId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getUserHomeDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserHomeDirResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserHomeDirDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getUserHomeDirDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get list of open windows
     * @summary [DEPRECATED] Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getWindowsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WindowsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWindowsDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getWindowsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getWorkDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkDirResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkDirDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.getWorkDirDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Add files to git commit
     * @summary [DEPRECATED] Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitAddFilesDeprecated(
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitAddFilesDeprecated(
        sandboxId,
        gitAddRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitAddFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Checkout branch or commit in git repository
     * @summary [DEPRECATED] Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitCheckoutBranchDeprecated(
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCheckoutBranchDeprecated(
        sandboxId,
        gitCheckoutRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCheckoutBranchDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Clone git repository
     * @summary [DEPRECATED] Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitCloneRepositoryDeprecated(
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCloneRepositoryDeprecated(
        sandboxId,
        gitCloneRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCloneRepositoryDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Commit changes to git repository
     * @summary [DEPRECATED] Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitCommitChangesDeprecated(
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitCommitResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCommitChangesDeprecated(
        sandboxId,
        gitCommitRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCommitChangesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create branch on git repository
     * @summary [DEPRECATED] Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitCreateBranchDeprecated(
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitCreateBranchDeprecated(
        sandboxId,
        gitBranchRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitCreateBranchDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Delete branch on git repository
     * @summary [DEPRECATED] Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitDeleteBranchDeprecated(
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitDeleteBranchDeprecated(
        sandboxId,
        gitDeleteBranchRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitDeleteBranchDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get commit history from git repository
     * @summary [DEPRECATED] Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitGetHistoryDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GitCommitInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetHistoryDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitGetHistoryDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get status from git repository
     * @summary [DEPRECATED] Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitGetStatusDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GitStatus>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitGetStatusDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitGetStatusDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get branch list from git repository
     * @summary [DEPRECATED] Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitListBranchesDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListBranchResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitListBranchesDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitListBranchesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Pull changes from remote
     * @summary [DEPRECATED] Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitPullChangesDeprecated(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitPullChangesDeprecated(
        sandboxId,
        gitRepoRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitPullChangesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Push changes to remote
     * @summary [DEPRECATED] Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async gitPushChangesDeprecated(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gitPushChangesDeprecated(
        sandboxId,
        gitRepoRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.gitPushChangesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async listFilesDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileInfo>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listFilesDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        path,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.listFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * List all active PTY sessions in the sandbox
     * @summary [DEPRECATED] List PTY sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async listPTYSessionsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PtyListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listPTYSessionsDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.listPTYSessionsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * List all active sessions in the sandbox
     * @summary [DEPRECATED] List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async listSessionsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Session>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listSessionsDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.listSessionsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary [DEPRECATED] Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspCompletionsDeprecated(
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletionList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspCompletionsDeprecated(
        sandboxId,
        lspCompletionParams,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspCompletionsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary [DEPRECATED] Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspDidCloseDeprecated(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidCloseDeprecated(
        sandboxId,
        lspDocumentRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDidCloseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary [DEPRECATED] Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspDidOpenDeprecated(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDidOpenDeprecated(
        sandboxId,
        lspDocumentRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDidOpenDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary [DEPRECATED] Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspDocumentSymbolsDeprecated(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspDocumentSymbolsDeprecated(
        sandboxId,
        languageId,
        pathToProject,
        uri,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspDocumentSymbolsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary [DEPRECATED] Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspStartDeprecated(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspStartDeprecated(
        sandboxId,
        lspServerRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspStartDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary [DEPRECATED] Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspStopDeprecated(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspStopDeprecated(
        sandboxId,
        lspServerRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspStopDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary [DEPRECATED] Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async lspWorkspaceSymbolsDeprecated(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.lspWorkspaceSymbolsDeprecated(
        sandboxId,
        languageId,
        pathToProject,
        query,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.lspWorkspaceSymbolsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Move file inside sandbox
     * @summary [DEPRECATED] Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async moveFileDeprecated(
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.moveFileDeprecated(
        sandboxId,
        source,
        destination,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.moveFileDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Move mouse cursor to specified coordinates
     * @summary [DEPRECATED] Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async moveMouseDeprecated(
      sandboxId: string,
      mouseMoveRequest: MouseMoveRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseMoveResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.moveMouseDeprecated(
        sandboxId,
        mouseMoveRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.moveMouseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Press a hotkey combination
     * @summary [DEPRECATED] Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async pressHotkeyDeprecated(
      sandboxId: string,
      keyboardHotkeyRequest: KeyboardHotkeyRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pressHotkeyDeprecated(
        sandboxId,
        keyboardHotkeyRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.pressHotkeyDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Press a key with optional modifiers
     * @summary [DEPRECATED] Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async pressKeyDeprecated(
      sandboxId: string,
      keyboardPressRequest: KeyboardPressRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pressKeyDeprecated(
        sandboxId,
        keyboardPressRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.pressKeyDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary [DEPRECATED] Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async replaceInFilesDeprecated(
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReplaceResult>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceInFilesDeprecated(
        sandboxId,
        replaceRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.replaceInFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Resize a PTY session
     * @summary [DEPRECATED] Resize PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {PtyResizeRequest} ptyResizeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async resizePTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      ptyResizeRequest: PtyResizeRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PtySessionInfo>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resizePTYSessionDeprecated(
        sandboxId,
        sessionId,
        ptyResizeRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.resizePTYSessionDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Restart a specific VNC process
     * @summary [DEPRECATED] Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async restartProcessDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessRestartResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.restartProcessDeprecated(
        processName,
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.restartProcessDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Scroll mouse at specified coordinates
     * @summary [DEPRECATED] Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async scrollMouseDeprecated(
      sandboxId: string,
      mouseScrollRequest: MouseScrollRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseScrollResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.scrollMouseDeprecated(
        sandboxId,
        mouseScrollRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.scrollMouseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for files inside sandbox
     * @summary [DEPRECATED] Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async searchFilesDeprecated(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFilesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.searchFilesDeprecated(
        sandboxId,
        path,
        pattern,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.searchFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary [DEPRECATED] Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async setFilePermissionsDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setFilePermissionsDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        owner,
        group,
        mode,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.setFilePermissionsDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async startComputerUseDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStartResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startComputerUseDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.startComputerUseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async stopComputerUseDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStopResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stopComputerUseDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.stopComputerUseDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a compressed screenshot of a specific region
     * @summary [DEPRECATED] Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async takeCompressedRegionScreenshotDeprecated(
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompressedScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedRegionScreenshotDeprecated(
        sandboxId,
        height,
        width,
        y,
        x,
        xDaytonaOrganizationID,
        scale,
        quality,
        format,
        showCursor,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.takeCompressedRegionScreenshotDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary [DEPRECATED] Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async takeCompressedScreenshotDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompressedScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedScreenshotDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        scale,
        quality,
        format,
        showCursor,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.takeCompressedScreenshotDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a screenshot of a specific region
     * @summary [DEPRECATED] Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async takeRegionScreenshotDeprecated(
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegionScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeRegionScreenshotDeprecated(
        sandboxId,
        height,
        width,
        y,
        x,
        xDaytonaOrganizationID,
        showCursor,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.takeRegionScreenshotDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a screenshot of the entire screen
     * @summary [DEPRECATED] Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async takeScreenshotDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeScreenshotDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        showCursor,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.takeScreenshotDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Type text using keyboard
     * @summary [DEPRECATED] Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async typeTextDeprecated(
      sandboxId: string,
      keyboardTypeRequest: KeyboardTypeRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.typeTextDeprecated(
        sandboxId,
        keyboardTypeRequest,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.typeTextDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Upload file inside sandbox
     * @summary [DEPRECATED] Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async uploadFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFileDeprecated(
        sandboxId,
        path,
        xDaytonaOrganizationID,
        file,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.uploadFileDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Upload multiple files inside sandbox
     * @summary [DEPRECATED] Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async uploadFilesDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ToolboxApi.uploadFilesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ToolboxApi - factory interface
 * @export
 */
export const ToolboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ToolboxApiFp(configuration)
  return {
    /**
     * Click mouse at specified coordinates
     * @summary [DEPRECATED] Click mouse
     * @param {string} sandboxId
     * @param {MouseClickRequest} mouseClickRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    clickMouseDeprecated(
      sandboxId: string,
      mouseClickRequest: MouseClickRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MouseClickResponse> {
      return localVarFp
        .clickMouseDeprecated(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create folder inside sandbox
     * @summary [DEPRECATED] Create folder
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} mode
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createFolderDeprecated(
      sandboxId: string,
      path: string,
      mode: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .createFolderDeprecated(sandboxId, path, mode, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create a new PTY session in the sandbox
     * @summary [DEPRECATED] Create PTY session
     * @param {string} sandboxId
     * @param {PtyCreateRequest} ptyCreateRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createPTYSessionDeprecated(
      sandboxId: string,
      ptyCreateRequest: PtyCreateRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PtyCreateResponse> {
      return localVarFp
        .createPTYSessionDeprecated(sandboxId, ptyCreateRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create a new session in the sandbox
     * @summary [DEPRECATED] Create session
     * @param {string} sandboxId
     * @param {CreateSessionRequest} createSessionRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createSessionDeprecated(
      sandboxId: string,
      createSessionRequest: CreateSessionRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .createSessionDeprecated(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete file inside sandbox
     * @summary [DEPRECATED] Delete file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [recursive]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      recursive?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteFileDeprecated(sandboxId, path, xDaytonaOrganizationID, recursive, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete a PTY session and terminate the associated process
     * @summary [DEPRECATED] Delete PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deletePTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deletePTYSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete a specific session
     * @summary [DEPRECATED] Delete session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .deleteSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Download file from sandbox
     * @summary [DEPRECATED] Download file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<File> {
      return localVarFp
        .downloadFileDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Streams back a multipart/form-data bundle of the requested paths
     * @summary [DEPRECATED] Download multiple files
     * @param {string} sandboxId
     * @param {DownloadFiles} downloadFiles
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    downloadFilesDeprecated(
      sandboxId: string,
      downloadFiles: DownloadFiles,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<File> {
      return localVarFp
        .downloadFilesDeprecated(sandboxId, downloadFiles, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Drag mouse from start to end coordinates
     * @summary [DEPRECATED] Drag mouse
     * @param {string} sandboxId
     * @param {MouseDragRequest} mouseDragRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    dragMouseDeprecated(
      sandboxId: string,
      mouseDragRequest: MouseDragRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MouseDragResponse> {
      return localVarFp
        .dragMouseDeprecated(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Execute command synchronously inside sandbox
     * @summary [DEPRECATED] Execute command
     * @param {string} sandboxId
     * @param {ExecuteRequest} executeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    executeCommandDeprecated(
      sandboxId: string,
      executeRequest: ExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ExecuteResponse> {
      return localVarFp
        .executeCommandDeprecated(sandboxId, executeRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Execute a command in a specific session
     * @summary [DEPRECATED] Execute command in session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {SessionExecuteRequest} sessionExecuteRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    executeSessionCommandDeprecated(
      sandboxId: string,
      sessionId: string,
      sessionExecuteRequest: SessionExecuteRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SessionExecuteResponse> {
      return localVarFp
        .executeSessionCommandDeprecated(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Search for text/pattern inside sandbox files
     * @summary [DEPRECATED] Search for text/pattern in files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    findInFilesDeprecated(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Match>> {
      return localVarFp
        .findInFilesDeprecated(sandboxId, path, pattern, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get status of all VNC desktop processes
     * @summary [DEPRECATED] Get computer use status
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getComputerUseStatusDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComputerUseStatusResponse> {
      return localVarFp
        .getComputerUseStatusDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get information about displays
     * @summary [DEPRECATED] Get display info
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getDisplayInfoDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<DisplayInfoResponse> {
      return localVarFp
        .getDisplayInfoDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get file info inside sandbox
     * @summary [DEPRECATED] Get file info
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getFileInfoDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<FileInfo> {
      return localVarFp
        .getFileInfoDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get current mouse cursor position
     * @summary [DEPRECATED] Get mouse position
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getMousePositionDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MousePosition> {
      return localVarFp
        .getMousePositionDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get PTY session information by ID
     * @summary [DEPRECATED] Get PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PtySessionInfo> {
      return localVarFp
        .getPTYSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get error logs for a specific VNC process
     * @summary [DEPRECATED] Get process errors
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessErrorsDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProcessErrorsResponse> {
      return localVarFp
        .getProcessErrorsDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get logs for a specific VNC process
     * @summary [DEPRECATED] Get process logs
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessLogsDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProcessLogsResponse> {
      return localVarFp
        .getProcessLogsDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get status of a specific VNC process
     * @summary [DEPRECATED] Get process status
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProcessStatusDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProcessStatusResponse> {
      return localVarFp
        .getProcessStatusDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox project dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getProjectDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProjectDirResponse> {
      return localVarFp
        .getProjectDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get session command by ID
     * @summary [DEPRECATED] Get session command
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionCommandDeprecated(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Command> {
      return localVarFp
        .getSessionCommandDeprecated(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get logs for a specific command in a session
     * @summary [DEPRECATED] Get command logs
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} commandId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to stream the logs
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionCommandLogsDeprecated(
      sandboxId: string,
      sessionId: string,
      commandId: string,
      xDaytonaOrganizationID?: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .getSessionCommandLogsDeprecated(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get session by ID
     * @summary [DEPRECATED] Get session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Session> {
      return localVarFp
        .getSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox user home dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getUserHomeDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserHomeDirResponse> {
      return localVarFp
        .getUserHomeDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get list of open windows
     * @summary [DEPRECATED] Get windows
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWindowsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<WindowsResponse> {
      return localVarFp
        .getWindowsDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get sandbox work-dir
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkDirDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<WorkDirResponse> {
      return localVarFp
        .getWorkDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Add files to git commit
     * @summary [DEPRECATED] Add files
     * @param {string} sandboxId
     * @param {GitAddRequest} gitAddRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitAddFilesDeprecated(
      sandboxId: string,
      gitAddRequest: GitAddRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitAddFilesDeprecated(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Checkout branch or commit in git repository
     * @summary [DEPRECATED] Checkout branch
     * @param {string} sandboxId
     * @param {GitCheckoutRequest} gitCheckoutRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCheckoutBranchDeprecated(
      sandboxId: string,
      gitCheckoutRequest: GitCheckoutRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCheckoutBranchDeprecated(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Clone git repository
     * @summary [DEPRECATED] Clone repository
     * @param {string} sandboxId
     * @param {GitCloneRequest} gitCloneRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCloneRepositoryDeprecated(
      sandboxId: string,
      gitCloneRequest: GitCloneRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCloneRepositoryDeprecated(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Commit changes to git repository
     * @summary [DEPRECATED] Commit changes
     * @param {string} sandboxId
     * @param {GitCommitRequest} gitCommitRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCommitChangesDeprecated(
      sandboxId: string,
      gitCommitRequest: GitCommitRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GitCommitResponse> {
      return localVarFp
        .gitCommitChangesDeprecated(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Create branch on git repository
     * @summary [DEPRECATED] Create branch
     * @param {string} sandboxId
     * @param {GitBranchRequest} gitBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitCreateBranchDeprecated(
      sandboxId: string,
      gitBranchRequest: GitBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitCreateBranchDeprecated(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Delete branch on git repository
     * @summary [DEPRECATED] Delete branch
     * @param {string} sandboxId
     * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitDeleteBranchDeprecated(
      sandboxId: string,
      gitDeleteBranchRequest: GitDeleteBranchRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitDeleteBranchDeprecated(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get commit history from git repository
     * @summary [DEPRECATED] Get commit history
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitGetHistoryDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<GitCommitInfo>> {
      return localVarFp
        .gitGetHistoryDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get status from git repository
     * @summary [DEPRECATED] Get git status
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitGetStatusDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<GitStatus> {
      return localVarFp
        .gitGetStatusDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Get branch list from git repository
     * @summary [DEPRECATED] Get branch list
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitListBranchesDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ListBranchResponse> {
      return localVarFp
        .gitListBranchesDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Pull changes from remote
     * @summary [DEPRECATED] Pull changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitPullChangesDeprecated(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitPullChangesDeprecated(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Push changes to remote
     * @summary [DEPRECATED] Push changes
     * @param {string} sandboxId
     * @param {GitRepoRequest} gitRepoRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    gitPushChangesDeprecated(
      sandboxId: string,
      gitRepoRequest: GitRepoRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .gitPushChangesDeprecated(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] List files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [path]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listFilesDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      path?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<FileInfo>> {
      return localVarFp
        .listFilesDeprecated(sandboxId, xDaytonaOrganizationID, path, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * List all active PTY sessions in the sandbox
     * @summary [DEPRECATED] List PTY sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listPTYSessionsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PtyListResponse> {
      return localVarFp
        .listPTYSessionsDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * List all active sessions in the sandbox
     * @summary [DEPRECATED] List sessions
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listSessionsDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Session>> {
      return localVarFp
        .listSessionsDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
     * @summary [DEPRECATED] Get Lsp Completions
     * @param {string} sandboxId
     * @param {LspCompletionParams} lspCompletionParams
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspCompletionsDeprecated(
      sandboxId: string,
      lspCompletionParams: LspCompletionParams,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CompletionList> {
      return localVarFp
        .lspCompletionsDeprecated(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document close notification is sent from the client to the server when the document got closed in the client.
     * @summary [DEPRECATED] Call Lsp DidClose
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDidCloseDeprecated(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspDidCloseDeprecated(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document open notification is sent from the client to the server to signal newly opened text documents.
     * @summary [DEPRECATED] Call Lsp DidOpen
     * @param {string} sandboxId
     * @param {LspDocumentRequest} lspDocumentRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDidOpenDeprecated(
      sandboxId: string,
      lspDocumentRequest: LspDocumentRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspDidOpenDeprecated(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The document symbol request is sent from the client to the server.
     * @summary [DEPRECATED] Call Lsp DocumentSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} uri
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspDocumentSymbolsDeprecated(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      uri: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .lspDocumentSymbolsDeprecated(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Start Lsp server process inside sandbox project
     * @summary [DEPRECATED] Start Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspStartDeprecated(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspStartDeprecated(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Stop Lsp server process inside sandbox project
     * @summary [DEPRECATED] Stop Lsp server
     * @param {string} sandboxId
     * @param {LspServerRequest} lspServerRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspStopDeprecated(
      sandboxId: string,
      lspServerRequest: LspServerRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .lspStopDeprecated(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
     * @summary [DEPRECATED] Call Lsp WorkspaceSymbols
     * @param {string} sandboxId
     * @param {string} languageId
     * @param {string} pathToProject
     * @param {string} query
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    lspWorkspaceSymbolsDeprecated(
      sandboxId: string,
      languageId: string,
      pathToProject: string,
      query: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .lspWorkspaceSymbolsDeprecated(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Move file inside sandbox
     * @summary [DEPRECATED] Move file
     * @param {string} sandboxId
     * @param {string} source
     * @param {string} destination
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    moveFileDeprecated(
      sandboxId: string,
      source: string,
      destination: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .moveFileDeprecated(sandboxId, source, destination, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Move mouse cursor to specified coordinates
     * @summary [DEPRECATED] Move mouse
     * @param {string} sandboxId
     * @param {MouseMoveRequest} mouseMoveRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    moveMouseDeprecated(
      sandboxId: string,
      mouseMoveRequest: MouseMoveRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MouseMoveResponse> {
      return localVarFp
        .moveMouseDeprecated(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Press a hotkey combination
     * @summary [DEPRECATED] Press hotkey
     * @param {string} sandboxId
     * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    pressHotkeyDeprecated(
      sandboxId: string,
      keyboardHotkeyRequest: KeyboardHotkeyRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .pressHotkeyDeprecated(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Press a key with optional modifiers
     * @summary [DEPRECATED] Press key
     * @param {string} sandboxId
     * @param {KeyboardPressRequest} keyboardPressRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    pressKeyDeprecated(
      sandboxId: string,
      keyboardPressRequest: KeyboardPressRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .pressKeyDeprecated(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Replace text/pattern in multiple files inside sandbox
     * @summary [DEPRECATED] Replace in files
     * @param {string} sandboxId
     * @param {ReplaceRequest} replaceRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceInFilesDeprecated(
      sandboxId: string,
      replaceRequest: ReplaceRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<ReplaceResult>> {
      return localVarFp
        .replaceInFilesDeprecated(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Resize a PTY session
     * @summary [DEPRECATED] Resize PTY session
     * @param {string} sandboxId
     * @param {string} sessionId
     * @param {PtyResizeRequest} ptyResizeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    resizePTYSessionDeprecated(
      sandboxId: string,
      sessionId: string,
      ptyResizeRequest: PtyResizeRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PtySessionInfo> {
      return localVarFp
        .resizePTYSessionDeprecated(sandboxId, sessionId, ptyResizeRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Restart a specific VNC process
     * @summary [DEPRECATED] Restart process
     * @param {string} processName
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    restartProcessDeprecated(
      processName: string,
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ProcessRestartResponse> {
      return localVarFp
        .restartProcessDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Scroll mouse at specified coordinates
     * @summary [DEPRECATED] Scroll mouse
     * @param {string} sandboxId
     * @param {MouseScrollRequest} mouseScrollRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    scrollMouseDeprecated(
      sandboxId: string,
      mouseScrollRequest: MouseScrollRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<MouseScrollResponse> {
      return localVarFp
        .scrollMouseDeprecated(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Search for files inside sandbox
     * @summary [DEPRECATED] Search files
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} pattern
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    searchFilesDeprecated(
      sandboxId: string,
      path: string,
      pattern: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SearchFilesResponse> {
      return localVarFp
        .searchFilesDeprecated(sandboxId, path, pattern, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Set file owner/group/permissions inside sandbox
     * @summary [DEPRECATED] Set file permissions
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {string} [owner]
     * @param {string} [group]
     * @param {string} [mode]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setFilePermissionsDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      owner?: string,
      group?: string,
      mode?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .setFilePermissionsDeprecated(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Start computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startComputerUseDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComputerUseStartResponse> {
      return localVarFp
        .startComputerUseDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
     * @summary [DEPRECATED] Stop computer use processes
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopComputerUseDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ComputerUseStopResponse> {
      return localVarFp
        .stopComputerUseDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a compressed screenshot of a specific region
     * @summary [DEPRECATED] Take compressed region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshotDeprecated(
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CompressedScreenshotResponse> {
      return localVarFp
        .takeCompressedRegionScreenshotDeprecated(
          sandboxId,
          height,
          width,
          y,
          x,
          xDaytonaOrganizationID,
          scale,
          quality,
          format,
          showCursor,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a compressed screenshot with format, quality, and scale options
     * @summary [DEPRECATED] Take compressed screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {number} [scale]
     * @param {number} [quality]
     * @param {string} [format]
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeCompressedScreenshotDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      scale?: number,
      quality?: number,
      format?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<CompressedScreenshotResponse> {
      return localVarFp
        .takeCompressedScreenshotDeprecated(
          sandboxId,
          xDaytonaOrganizationID,
          scale,
          quality,
          format,
          showCursor,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a screenshot of a specific region
     * @summary [DEPRECATED] Take region screenshot
     * @param {string} sandboxId
     * @param {number} height
     * @param {number} width
     * @param {number} y
     * @param {number} x
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeRegionScreenshotDeprecated(
      sandboxId: string,
      height: number,
      width: number,
      y: number,
      x: number,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<RegionScreenshotResponse> {
      return localVarFp
        .takeRegionScreenshotDeprecated(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a screenshot of the entire screen
     * @summary [DEPRECATED] Take screenshot
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [showCursor]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    takeScreenshotDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ScreenshotResponse> {
      return localVarFp
        .takeScreenshotDeprecated(sandboxId, xDaytonaOrganizationID, showCursor, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Type text using keyboard
     * @summary [DEPRECATED] Type text
     * @param {string} sandboxId
     * @param {KeyboardTypeRequest} keyboardTypeRequest
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    typeTextDeprecated(
      sandboxId: string,
      keyboardTypeRequest: KeyboardTypeRequest,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .typeTextDeprecated(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Upload file inside sandbox
     * @summary [DEPRECATED] Upload file
     * @param {string} sandboxId
     * @param {string} path
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFileDeprecated(
      sandboxId: string,
      path: string,
      xDaytonaOrganizationID?: string,
      file?: File,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .uploadFileDeprecated(sandboxId, path, xDaytonaOrganizationID, file, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Upload multiple files inside sandbox
     * @summary [DEPRECATED] Upload multiple files
     * @param {string} sandboxId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    uploadFilesDeprecated(
      sandboxId: string,
      xDaytonaOrganizationID?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .uploadFilesDeprecated(sandboxId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ToolboxApi - object-oriented interface
 * @export
 * @class ToolboxApi
 * @extends {BaseAPI}
 */
export class ToolboxApi extends BaseAPI {
  /**
   * Click mouse at specified coordinates
   * @summary [DEPRECATED] Click mouse
   * @param {string} sandboxId
   * @param {MouseClickRequest} mouseClickRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public clickMouseDeprecated(
    sandboxId: string,
    mouseClickRequest: MouseClickRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .clickMouseDeprecated(sandboxId, mouseClickRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create folder inside sandbox
   * @summary [DEPRECATED] Create folder
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} mode
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public createFolderDeprecated(
    sandboxId: string,
    path: string,
    mode: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .createFolderDeprecated(sandboxId, path, mode, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a new PTY session in the sandbox
   * @summary [DEPRECATED] Create PTY session
   * @param {string} sandboxId
   * @param {PtyCreateRequest} ptyCreateRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public createPTYSessionDeprecated(
    sandboxId: string,
    ptyCreateRequest: PtyCreateRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .createPTYSessionDeprecated(sandboxId, ptyCreateRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create a new session in the sandbox
   * @summary [DEPRECATED] Create session
   * @param {string} sandboxId
   * @param {CreateSessionRequest} createSessionRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public createSessionDeprecated(
    sandboxId: string,
    createSessionRequest: CreateSessionRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .createSessionDeprecated(sandboxId, createSessionRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete file inside sandbox
   * @summary [DEPRECATED] Delete file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [recursive]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public deleteFileDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    recursive?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .deleteFileDeprecated(sandboxId, path, xDaytonaOrganizationID, recursive, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete a PTY session and terminate the associated process
   * @summary [DEPRECATED] Delete PTY session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public deletePTYSessionDeprecated(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .deletePTYSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete a specific session
   * @summary [DEPRECATED] Delete session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public deleteSessionDeprecated(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .deleteSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Download file from sandbox
   * @summary [DEPRECATED] Download file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public downloadFileDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .downloadFileDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Streams back a multipart/form-data bundle of the requested paths
   * @summary [DEPRECATED] Download multiple files
   * @param {string} sandboxId
   * @param {DownloadFiles} downloadFiles
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public downloadFilesDeprecated(
    sandboxId: string,
    downloadFiles: DownloadFiles,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .downloadFilesDeprecated(sandboxId, downloadFiles, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Drag mouse from start to end coordinates
   * @summary [DEPRECATED] Drag mouse
   * @param {string} sandboxId
   * @param {MouseDragRequest} mouseDragRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public dragMouseDeprecated(
    sandboxId: string,
    mouseDragRequest: MouseDragRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .dragMouseDeprecated(sandboxId, mouseDragRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Execute command synchronously inside sandbox
   * @summary [DEPRECATED] Execute command
   * @param {string} sandboxId
   * @param {ExecuteRequest} executeRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public executeCommandDeprecated(
    sandboxId: string,
    executeRequest: ExecuteRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .executeCommandDeprecated(sandboxId, executeRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Execute a command in a specific session
   * @summary [DEPRECATED] Execute command in session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {SessionExecuteRequest} sessionExecuteRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public executeSessionCommandDeprecated(
    sandboxId: string,
    sessionId: string,
    sessionExecuteRequest: SessionExecuteRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .executeSessionCommandDeprecated(sandboxId, sessionId, sessionExecuteRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for text/pattern inside sandbox files
   * @summary [DEPRECATED] Search for text/pattern in files
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} pattern
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public findInFilesDeprecated(
    sandboxId: string,
    path: string,
    pattern: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .findInFilesDeprecated(sandboxId, path, pattern, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get status of all VNC desktop processes
   * @summary [DEPRECATED] Get computer use status
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getComputerUseStatusDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getComputerUseStatusDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get information about displays
   * @summary [DEPRECATED] Get display info
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getDisplayInfoDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getDisplayInfoDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get file info inside sandbox
   * @summary [DEPRECATED] Get file info
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getFileInfoDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getFileInfoDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get current mouse cursor position
   * @summary [DEPRECATED] Get mouse position
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getMousePositionDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getMousePositionDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get PTY session information by ID
   * @summary [DEPRECATED] Get PTY session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getPTYSessionDeprecated(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getPTYSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get error logs for a specific VNC process
   * @summary [DEPRECATED] Get process errors
   * @param {string} processName
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getProcessErrorsDeprecated(
    processName: string,
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getProcessErrorsDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get logs for a specific VNC process
   * @summary [DEPRECATED] Get process logs
   * @param {string} processName
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getProcessLogsDeprecated(
    processName: string,
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getProcessLogsDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get status of a specific VNC process
   * @summary [DEPRECATED] Get process status
   * @param {string} processName
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getProcessStatusDeprecated(
    processName: string,
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getProcessStatusDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [DEPRECATED] Get sandbox project dir
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getProjectDirDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getProjectDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get session command by ID
   * @summary [DEPRECATED] Get session command
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} commandId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSessionCommandDeprecated(
    sandboxId: string,
    sessionId: string,
    commandId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSessionCommandDeprecated(sandboxId, sessionId, commandId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get logs for a specific command in a session
   * @summary [DEPRECATED] Get command logs
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} commandId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow] Whether to stream the logs
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSessionCommandLogsDeprecated(
    sandboxId: string,
    sessionId: string,
    commandId: string,
    xDaytonaOrganizationID?: string,
    follow?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSessionCommandLogsDeprecated(sandboxId, sessionId, commandId, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get session by ID
   * @summary [DEPRECATED] Get session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getSessionDeprecated(
    sandboxId: string,
    sessionId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .getSessionDeprecated(sandboxId, sessionId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [DEPRECATED] Get sandbox user home dir
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getUserHomeDirDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getUserHomeDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get list of open windows
   * @summary [DEPRECATED] Get windows
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getWindowsDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getWindowsDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [DEPRECATED] Get sandbox work-dir
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public getWorkDirDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .getWorkDirDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Add files to git commit
   * @summary [DEPRECATED] Add files
   * @param {string} sandboxId
   * @param {GitAddRequest} gitAddRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitAddFilesDeprecated(
    sandboxId: string,
    gitAddRequest: GitAddRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitAddFilesDeprecated(sandboxId, gitAddRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Checkout branch or commit in git repository
   * @summary [DEPRECATED] Checkout branch
   * @param {string} sandboxId
   * @param {GitCheckoutRequest} gitCheckoutRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCheckoutBranchDeprecated(
    sandboxId: string,
    gitCheckoutRequest: GitCheckoutRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCheckoutBranchDeprecated(sandboxId, gitCheckoutRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Clone git repository
   * @summary [DEPRECATED] Clone repository
   * @param {string} sandboxId
   * @param {GitCloneRequest} gitCloneRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCloneRepositoryDeprecated(
    sandboxId: string,
    gitCloneRequest: GitCloneRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCloneRepositoryDeprecated(sandboxId, gitCloneRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Commit changes to git repository
   * @summary [DEPRECATED] Commit changes
   * @param {string} sandboxId
   * @param {GitCommitRequest} gitCommitRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCommitChangesDeprecated(
    sandboxId: string,
    gitCommitRequest: GitCommitRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCommitChangesDeprecated(sandboxId, gitCommitRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create branch on git repository
   * @summary [DEPRECATED] Create branch
   * @param {string} sandboxId
   * @param {GitBranchRequest} gitBranchRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitCreateBranchDeprecated(
    sandboxId: string,
    gitBranchRequest: GitBranchRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitCreateBranchDeprecated(sandboxId, gitBranchRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Delete branch on git repository
   * @summary [DEPRECATED] Delete branch
   * @param {string} sandboxId
   * @param {GitDeleteBranchRequest} gitDeleteBranchRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitDeleteBranchDeprecated(
    sandboxId: string,
    gitDeleteBranchRequest: GitDeleteBranchRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitDeleteBranchDeprecated(sandboxId, gitDeleteBranchRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get commit history from git repository
   * @summary [DEPRECATED] Get commit history
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitGetHistoryDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitGetHistoryDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get status from git repository
   * @summary [DEPRECATED] Get git status
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitGetStatusDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitGetStatusDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get branch list from git repository
   * @summary [DEPRECATED] Get branch list
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitListBranchesDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitListBranchesDeprecated(sandboxId, path, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Pull changes from remote
   * @summary [DEPRECATED] Pull changes
   * @param {string} sandboxId
   * @param {GitRepoRequest} gitRepoRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitPullChangesDeprecated(
    sandboxId: string,
    gitRepoRequest: GitRepoRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitPullChangesDeprecated(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Push changes to remote
   * @summary [DEPRECATED] Push changes
   * @param {string} sandboxId
   * @param {GitRepoRequest} gitRepoRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public gitPushChangesDeprecated(
    sandboxId: string,
    gitRepoRequest: GitRepoRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .gitPushChangesDeprecated(sandboxId, gitRepoRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary [DEPRECATED] List files
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {string} [path]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public listFilesDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    path?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .listFilesDeprecated(sandboxId, xDaytonaOrganizationID, path, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all active PTY sessions in the sandbox
   * @summary [DEPRECATED] List PTY sessions
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public listPTYSessionsDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .listPTYSessionsDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * List all active sessions in the sandbox
   * @summary [DEPRECATED] List sessions
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public listSessionsDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .listSessionsDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The Completion request is sent from the client to the server to compute completion items at a given cursor position.
   * @summary [DEPRECATED] Get Lsp Completions
   * @param {string} sandboxId
   * @param {LspCompletionParams} lspCompletionParams
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspCompletionsDeprecated(
    sandboxId: string,
    lspCompletionParams: LspCompletionParams,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspCompletionsDeprecated(sandboxId, lspCompletionParams, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document close notification is sent from the client to the server when the document got closed in the client.
   * @summary [DEPRECATED] Call Lsp DidClose
   * @param {string} sandboxId
   * @param {LspDocumentRequest} lspDocumentRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDidCloseDeprecated(
    sandboxId: string,
    lspDocumentRequest: LspDocumentRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDidCloseDeprecated(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document open notification is sent from the client to the server to signal newly opened text documents.
   * @summary [DEPRECATED] Call Lsp DidOpen
   * @param {string} sandboxId
   * @param {LspDocumentRequest} lspDocumentRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDidOpenDeprecated(
    sandboxId: string,
    lspDocumentRequest: LspDocumentRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDidOpenDeprecated(sandboxId, lspDocumentRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The document symbol request is sent from the client to the server.
   * @summary [DEPRECATED] Call Lsp DocumentSymbols
   * @param {string} sandboxId
   * @param {string} languageId
   * @param {string} pathToProject
   * @param {string} uri
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspDocumentSymbolsDeprecated(
    sandboxId: string,
    languageId: string,
    pathToProject: string,
    uri: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspDocumentSymbolsDeprecated(sandboxId, languageId, pathToProject, uri, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start Lsp server process inside sandbox project
   * @summary [DEPRECATED] Start Lsp server
   * @param {string} sandboxId
   * @param {LspServerRequest} lspServerRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspStartDeprecated(
    sandboxId: string,
    lspServerRequest: LspServerRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspStartDeprecated(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop Lsp server process inside sandbox project
   * @summary [DEPRECATED] Stop Lsp server
   * @param {string} sandboxId
   * @param {LspServerRequest} lspServerRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspStopDeprecated(
    sandboxId: string,
    lspServerRequest: LspServerRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspStopDeprecated(sandboxId, lspServerRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * The workspace symbol request is sent from the client to the server to list project-wide symbols matching the query string.
   * @summary [DEPRECATED] Call Lsp WorkspaceSymbols
   * @param {string} sandboxId
   * @param {string} languageId
   * @param {string} pathToProject
   * @param {string} query
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public lspWorkspaceSymbolsDeprecated(
    sandboxId: string,
    languageId: string,
    pathToProject: string,
    query: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .lspWorkspaceSymbolsDeprecated(sandboxId, languageId, pathToProject, query, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Move file inside sandbox
   * @summary [DEPRECATED] Move file
   * @param {string} sandboxId
   * @param {string} source
   * @param {string} destination
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public moveFileDeprecated(
    sandboxId: string,
    source: string,
    destination: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .moveFileDeprecated(sandboxId, source, destination, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Move mouse cursor to specified coordinates
   * @summary [DEPRECATED] Move mouse
   * @param {string} sandboxId
   * @param {MouseMoveRequest} mouseMoveRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public moveMouseDeprecated(
    sandboxId: string,
    mouseMoveRequest: MouseMoveRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .moveMouseDeprecated(sandboxId, mouseMoveRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Press a hotkey combination
   * @summary [DEPRECATED] Press hotkey
   * @param {string} sandboxId
   * @param {KeyboardHotkeyRequest} keyboardHotkeyRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public pressHotkeyDeprecated(
    sandboxId: string,
    keyboardHotkeyRequest: KeyboardHotkeyRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .pressHotkeyDeprecated(sandboxId, keyboardHotkeyRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Press a key with optional modifiers
   * @summary [DEPRECATED] Press key
   * @param {string} sandboxId
   * @param {KeyboardPressRequest} keyboardPressRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public pressKeyDeprecated(
    sandboxId: string,
    keyboardPressRequest: KeyboardPressRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .pressKeyDeprecated(sandboxId, keyboardPressRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Replace text/pattern in multiple files inside sandbox
   * @summary [DEPRECATED] Replace in files
   * @param {string} sandboxId
   * @param {ReplaceRequest} replaceRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public replaceInFilesDeprecated(
    sandboxId: string,
    replaceRequest: ReplaceRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .replaceInFilesDeprecated(sandboxId, replaceRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Resize a PTY session
   * @summary [DEPRECATED] Resize PTY session
   * @param {string} sandboxId
   * @param {string} sessionId
   * @param {PtyResizeRequest} ptyResizeRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public resizePTYSessionDeprecated(
    sandboxId: string,
    sessionId: string,
    ptyResizeRequest: PtyResizeRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .resizePTYSessionDeprecated(sandboxId, sessionId, ptyResizeRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Restart a specific VNC process
   * @summary [DEPRECATED] Restart process
   * @param {string} processName
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public restartProcessDeprecated(
    processName: string,
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .restartProcessDeprecated(processName, sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Scroll mouse at specified coordinates
   * @summary [DEPRECATED] Scroll mouse
   * @param {string} sandboxId
   * @param {MouseScrollRequest} mouseScrollRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public scrollMouseDeprecated(
    sandboxId: string,
    mouseScrollRequest: MouseScrollRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .scrollMouseDeprecated(sandboxId, mouseScrollRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for files inside sandbox
   * @summary [DEPRECATED] Search files
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} pattern
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public searchFilesDeprecated(
    sandboxId: string,
    path: string,
    pattern: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .searchFilesDeprecated(sandboxId, path, pattern, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Set file owner/group/permissions inside sandbox
   * @summary [DEPRECATED] Set file permissions
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {string} [owner]
   * @param {string} [group]
   * @param {string} [mode]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public setFilePermissionsDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    owner?: string,
    group?: string,
    mode?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .setFilePermissionsDeprecated(sandboxId, path, xDaytonaOrganizationID, owner, group, mode, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
   * @summary [DEPRECATED] Start computer use processes
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public startComputerUseDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .startComputerUseDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop all VNC desktop processes (Xvfb, xfce4, x11vnc, novnc)
   * @summary [DEPRECATED] Stop computer use processes
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public stopComputerUseDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .stopComputerUseDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a compressed screenshot of a specific region
   * @summary [DEPRECATED] Take compressed region screenshot
   * @param {string} sandboxId
   * @param {number} height
   * @param {number} width
   * @param {number} y
   * @param {number} x
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {number} [scale]
   * @param {number} [quality]
   * @param {string} [format]
   * @param {boolean} [showCursor]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public takeCompressedRegionScreenshotDeprecated(
    sandboxId: string,
    height: number,
    width: number,
    y: number,
    x: number,
    xDaytonaOrganizationID?: string,
    scale?: number,
    quality?: number,
    format?: string,
    showCursor?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .takeCompressedRegionScreenshotDeprecated(
        sandboxId,
        height,
        width,
        y,
        x,
        xDaytonaOrganizationID,
        scale,
        quality,
        format,
        showCursor,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a compressed screenshot with format, quality, and scale options
   * @summary [DEPRECATED] Take compressed screenshot
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {number} [scale]
   * @param {number} [quality]
   * @param {string} [format]
   * @param {boolean} [showCursor]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public takeCompressedScreenshotDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    scale?: number,
    quality?: number,
    format?: string,
    showCursor?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .takeCompressedScreenshotDeprecated(
        sandboxId,
        xDaytonaOrganizationID,
        scale,
        quality,
        format,
        showCursor,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a screenshot of a specific region
   * @summary [DEPRECATED] Take region screenshot
   * @param {string} sandboxId
   * @param {number} height
   * @param {number} width
   * @param {number} y
   * @param {number} x
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [showCursor]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public takeRegionScreenshotDeprecated(
    sandboxId: string,
    height: number,
    width: number,
    y: number,
    x: number,
    xDaytonaOrganizationID?: string,
    showCursor?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .takeRegionScreenshotDeprecated(sandboxId, height, width, y, x, xDaytonaOrganizationID, showCursor, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a screenshot of the entire screen
   * @summary [DEPRECATED] Take screenshot
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [showCursor]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public takeScreenshotDeprecated(
    sandboxId: string,
    xDaytonaOrganizationID?: string,
    showCursor?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .takeScreenshotDeprecated(sandboxId, xDaytonaOrganizationID, showCursor, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Type text using keyboard
   * @summary [DEPRECATED] Type text
   * @param {string} sandboxId
   * @param {KeyboardTypeRequest} keyboardTypeRequest
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public typeTextDeprecated(
    sandboxId: string,
    keyboardTypeRequest: KeyboardTypeRequest,
    xDaytonaOrganizationID?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .typeTextDeprecated(sandboxId, keyboardTypeRequest, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Upload file inside sandbox
   * @summary [DEPRECATED] Upload file
   * @param {string} sandboxId
   * @param {string} path
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {File} [file]
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public uploadFileDeprecated(
    sandboxId: string,
    path: string,
    xDaytonaOrganizationID?: string,
    file?: File,
    options?: RawAxiosRequestConfig,
  ) {
    return ToolboxApiFp(this.configuration)
      .uploadFileDeprecated(sandboxId, path, xDaytonaOrganizationID, file, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Upload multiple files inside sandbox
   * @summary [DEPRECATED] Upload multiple files
   * @param {string} sandboxId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  public uploadFilesDeprecated(sandboxId: string, xDaytonaOrganizationID?: string, options?: RawAxiosRequestConfig) {
    return ToolboxApiFp(this.configuration)
      .uploadFilesDeprecated(sandboxId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
