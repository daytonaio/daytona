'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.UsersApi = exports.UsersApiFactory = exports.UsersApiFp = exports.UsersApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * UsersApi - axios parameter creator
 * @export
 */
const UsersApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser: async (createUser, options = {}) => {
      // verify required parameter 'createUser' is not null or undefined
      ;(0, common_1.assertParamExists)('createUser', 'createUser', createUser)
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createUser,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser: async (options = {}) => {
      const localVarPath = `/users/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAccountProviders: async (options = {}) => {
      const localVarPath = `/users/account-providers`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('getUser', 'id', id)
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAccount: async (createLinkedAccount, options = {}) => {
      // verify required parameter 'createLinkedAccount' is not null or undefined
      ;(0, common_1.assertParamExists)('linkAccount', 'createLinkedAccount', createLinkedAccount)
      const localVarPath = `/users/linked-accounts`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createLinkedAccount,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers: async (options = {}) => {
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateKeyPair: async (id, options = {}) => {
      // verify required parameter 'id' is not null or undefined
      ;(0, common_1.assertParamExists)('regenerateKeyPair', 'id', id)
      const localVarPath = `/users/{id}/regenerate-key-pair`.replace(`{${'id'}}`, encodeURIComponent(String(id)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkAccount: async (provider, providerUserId, options = {}) => {
      // verify required parameter 'provider' is not null or undefined
      ;(0, common_1.assertParamExists)('unlinkAccount', 'provider', provider)
      // verify required parameter 'providerUserId' is not null or undefined
      ;(0, common_1.assertParamExists)('unlinkAccount', 'providerUserId', providerUserId)
      const localVarPath = `/users/linked-accounts/{provider}/{providerUserId}`
        .replace(`{${'provider'}}`, encodeURIComponent(String(provider)))
        .replace(`{${'providerUserId'}}`, encodeURIComponent(String(providerUserId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.UsersApiAxiosParamCreator = UsersApiAxiosParamCreator
/**
 * UsersApi - functional programming interface
 * @export
 */
const UsersApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.UsersApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createUser(createUser, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(createUser, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.createUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAuthenticatedUser(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthenticatedUser(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.getAuthenticatedUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAvailableAccountProviders(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableAccountProviders(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.getAvailableAccountProviders']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUser(id, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.getUser']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async linkAccount(createLinkedAccount, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.linkAccount(createLinkedAccount, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.linkAccount']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async listUsers(options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.listUsers']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async regenerateKeyPair(id, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.regenerateKeyPair(id, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.regenerateKeyPair']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unlinkAccount(provider, providerUserId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.unlinkAccount(provider, providerUserId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['UsersApi.unlinkAccount']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.UsersApiFp = UsersApiFp
/**
 * UsersApi - factory interface
 * @export
 */
const UsersApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.UsersApiFp)(configuration)
  return {
    /**
     *
     * @summary Create user
     * @param {CreateUser} createUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createUser(createUser, options) {
      return localVarFp.createUser(createUser, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAuthenticatedUser(options) {
      return localVarFp.getAuthenticatedUser(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get available account providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAccountProviders(options) {
      return localVarFp.getAvailableAccountProviders(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get user by ID
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUser(id, options) {
      return localVarFp.getUser(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Link account
     * @param {CreateLinkedAccount} createLinkedAccount
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    linkAccount(createLinkedAccount, options) {
      return localVarFp.linkAccount(createLinkedAccount, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUsers(options) {
      return localVarFp.listUsers(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Regenerate user key pair
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateKeyPair(id, options) {
      return localVarFp.regenerateKeyPair(id, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Unlink account
     * @param {string} provider
     * @param {string} providerUserId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlinkAccount(provider, providerUserId, options) {
      return localVarFp.unlinkAccount(provider, providerUserId, options).then((request) => request(axios, basePath))
    },
  }
}
exports.UsersApiFactory = UsersApiFactory
/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
class UsersApi extends base_1.BaseAPI {
  /**
   *
   * @summary Create user
   * @param {CreateUser} createUser
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  createUser(createUser, options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .createUser(createUser, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get authenticated user
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  getAuthenticatedUser(options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .getAuthenticatedUser(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get available account providers
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  getAvailableAccountProviders(options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .getAvailableAccountProviders(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Get user by ID
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  getUser(id, options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .getUser(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Link account
   * @param {CreateLinkedAccount} createLinkedAccount
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  linkAccount(createLinkedAccount, options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .linkAccount(createLinkedAccount, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary List all users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  listUsers(options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .listUsers(options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Regenerate user key pair
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  regenerateKeyPair(id, options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .regenerateKeyPair(id, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary Unlink account
   * @param {string} provider
   * @param {string} providerUserId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  unlinkAccount(provider, providerUserId, options) {
    return (0, exports.UsersApiFp)(this.configuration)
      .unlinkAccount(provider, providerUserId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.UsersApi = UsersApi
//# sourceMappingURL=users-api.js.map
