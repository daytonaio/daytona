'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona
 * Daytona AI platform API Docs
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@daytona.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.WorkspaceApi =
  exports.WorkspaceApiFactory =
  exports.WorkspaceApiFp =
  exports.WorkspaceApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * WorkspaceApi - axios parameter creator
 * @export
 */
const WorkspaceApiAxiosParamCreator = function (configuration) {
  return {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    archiveWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('archiveWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}/archive`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createBackupWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('createBackupWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}/backup`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createWorkspaceDeprecated: async (createWorkspace, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'createWorkspace' is not null or undefined
      ;(0, common_1.assertParamExists)('createWorkspaceDeprecated', 'createWorkspace', createWorkspace)
      const localVarPath = `/workspace`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        createWorkspace,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteWorkspaceDeprecated: async (workspaceId, force, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'force' is not null or undefined
      ;(0, common_1.assertParamExists)('deleteWorkspaceDeprecated', 'force', force)
      const localVarPath = `/workspace/{workspaceId}`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (force !== undefined) {
        localVarQueryParameter['force'] = force
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getBuildLogsWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, follow, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('getBuildLogsWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}/build-logs`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPortPreviewUrlWorkspaceDeprecated: async (workspaceId, port, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('getPortPreviewUrlWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'port' is not null or undefined
      ;(0, common_1.assertParamExists)('getPortPreviewUrlWorkspaceDeprecated', 'port', port)
      const localVarPath = `/workspace/{workspaceId}/ports/{port}/preview-url`
        .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
        .replace(`{${'port'}}`, encodeURIComponent(String(port)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, verbose, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('getWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (verbose !== undefined) {
        localVarQueryParameter['verbose'] = verbose
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listWorkspacesDeprecated: async (xDaytonaOrganizationID, verbose, labels, options = {}) => {
      const localVarPath = `/workspace`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (verbose !== undefined) {
        localVarQueryParameter['verbose'] = verbose
      }
      if (labels !== undefined) {
        localVarQueryParameter['labels'] = labels
      }
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceLabelsWorkspaceDeprecated: async (workspaceId, sandboxLabels, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('replaceLabelsWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'sandboxLabels' is not null or undefined
      ;(0, common_1.assertParamExists)('replaceLabelsWorkspaceDeprecated', 'sandboxLabels', sandboxLabels)
      const localVarPath = `/workspace/{workspaceId}/labels`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      localVarHeaderParameter['Content-Type'] = 'application/json'
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(
        sandboxLabels,
        localVarRequestOptions,
        configuration,
      )
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutoArchiveIntervalWorkspaceDeprecated: async (workspaceId, interval, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutoArchiveIntervalWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'interval' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutoArchiveIntervalWorkspaceDeprecated', 'interval', interval)
      const localVarPath = `/workspace/{workspaceId}/autoarchive/{interval}`
        .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
        .replace(`{${'interval'}}`, encodeURIComponent(String(interval)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutostopIntervalWorkspaceDeprecated: async (workspaceId, interval, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutostopIntervalWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'interval' is not null or undefined
      ;(0, common_1.assertParamExists)('setAutostopIntervalWorkspaceDeprecated', 'interval', interval)
      const localVarPath = `/workspace/{workspaceId}/autostop/{interval}`
        .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
        .replace(`{${'interval'}}`, encodeURIComponent(String(interval)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('startWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}/start`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopWorkspaceDeprecated: async (workspaceId, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('stopWorkspaceDeprecated', 'workspaceId', workspaceId)
      const localVarPath = `/workspace/{workspaceId}/stop`.replace(
        `{${'workspaceId'}}`,
        encodeURIComponent(String(workspaceId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updatePublicStatusWorkspaceDeprecated: async (workspaceId, isPublic, xDaytonaOrganizationID, options = {}) => {
      // verify required parameter 'workspaceId' is not null or undefined
      ;(0, common_1.assertParamExists)('updatePublicStatusWorkspaceDeprecated', 'workspaceId', workspaceId)
      // verify required parameter 'isPublic' is not null or undefined
      ;(0, common_1.assertParamExists)('updatePublicStatusWorkspaceDeprecated', 'isPublic', isPublic)
      const localVarPath = `/workspace/{workspaceId}/public/{isPublic}`
        .replace(`{${'workspaceId'}}`, encodeURIComponent(String(workspaceId)))
        .replace(`{${'isPublic'}}`, encodeURIComponent(String(isPublic)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication bearer required
      // http bearer authentication required
      await (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)
      // authentication oauth2 required
      if (xDaytonaOrganizationID != null) {
        localVarHeaderParameter['X-Daytona-Organization-ID'] = String(xDaytonaOrganizationID)
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.WorkspaceApiAxiosParamCreator = WorkspaceApiAxiosParamCreator
/**
 * WorkspaceApi - functional programming interface
 * @export
 */
const WorkspaceApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.WorkspaceApiAxiosParamCreator)(configuration)
  return {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async archiveWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.archiveWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.archiveWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async createBackupWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBackupWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.createBackupWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async createWorkspaceDeprecated(createWorkspace, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createWorkspaceDeprecated(
        createWorkspace,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.createWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async deleteWorkspaceDeprecated(workspaceId, force, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWorkspaceDeprecated(
        workspaceId,
        force,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.deleteWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getBuildLogsWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, follow, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildLogsWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        follow,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.getBuildLogsWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getPortPreviewUrlWorkspaceDeprecated(workspaceId, port, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPortPreviewUrlWorkspaceDeprecated(
        workspaceId,
        port,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.getPortPreviewUrlWorkspaceDeprecated']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async getWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, verbose, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        verbose,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.getWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async listWorkspacesDeprecated(xDaytonaOrganizationID, verbose, labels, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.listWorkspacesDeprecated(
        xDaytonaOrganizationID,
        verbose,
        labels,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.listWorkspacesDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async replaceLabelsWorkspaceDeprecated(workspaceId, sandboxLabels, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.replaceLabelsWorkspaceDeprecated(
        workspaceId,
        sandboxLabels,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.replaceLabelsWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async setAutoArchiveIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAutoArchiveIntervalWorkspaceDeprecated(
        workspaceId,
        interval,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.setAutoArchiveIntervalWorkspaceDeprecated']?.[
          localVarOperationServerIndex
        ]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async setAutostopIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.setAutostopIntervalWorkspaceDeprecated(
        workspaceId,
        interval,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.setAutostopIntervalWorkspaceDeprecated']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async startWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.startWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async stopWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stopWorkspaceDeprecated(
        workspaceId,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.stopWorkspaceDeprecated']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    async updatePublicStatusWorkspaceDeprecated(workspaceId, isPublic, xDaytonaOrganizationID, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updatePublicStatusWorkspaceDeprecated(
        workspaceId,
        isPublic,
        xDaytonaOrganizationID,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['WorkspaceApi.updatePublicStatusWorkspaceDeprecated']?.[localVarOperationServerIndex]
          ?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.WorkspaceApiFp = WorkspaceApiFp
/**
 * WorkspaceApi - factory interface
 * @export
 */
const WorkspaceApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.WorkspaceApiFp)(configuration)
  return {
    /**
     *
     * @summary [DEPRECATED] Archive workspace
     * @param {string} workspaceId
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    archiveWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      return localVarFp
        .archiveWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Create workspace backup
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createBackupWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      return localVarFp
        .createBackupWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Create a new workspace
     * @param {CreateWorkspace} createWorkspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    createWorkspaceDeprecated(createWorkspace, xDaytonaOrganizationID, options) {
      return localVarFp
        .createWorkspaceDeprecated(createWorkspace, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Delete workspace
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} force
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    deleteWorkspaceDeprecated(workspaceId, force, xDaytonaOrganizationID, options) {
      return localVarFp
        .deleteWorkspaceDeprecated(workspaceId, force, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get build logs
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [follow] Whether to follow the logs stream
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getBuildLogsWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, follow, options) {
      return localVarFp
        .getBuildLogsWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, follow, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get preview URL for a workspace port
     * @param {string} workspaceId ID of the workspace
     * @param {number} port Port number to get preview URL for
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getPortPreviewUrlWorkspaceDeprecated(workspaceId, port, xDaytonaOrganizationID, options) {
      return localVarFp
        .getPortPreviewUrlWorkspaceDeprecated(workspaceId, port, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Get workspace details
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    getWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, verbose, options) {
      return localVarFp
        .getWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, verbose, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] List all workspaces
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {boolean} [verbose] Include verbose output
     * @param {string} [labels] JSON encoded labels to filter by
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    listWorkspacesDeprecated(xDaytonaOrganizationID, verbose, labels, options) {
      return localVarFp
        .listWorkspacesDeprecated(xDaytonaOrganizationID, verbose, labels, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Replace workspace labels
     * @param {string} workspaceId ID of the workspace
     * @param {SandboxLabels} sandboxLabels
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    replaceLabelsWorkspaceDeprecated(workspaceId, sandboxLabels, xDaytonaOrganizationID, options) {
      return localVarFp
        .replaceLabelsWorkspaceDeprecated(workspaceId, sandboxLabels, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-archive interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutoArchiveIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
      return localVarFp
        .setAutoArchiveIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Set workspace auto-stop interval
     * @param {string} workspaceId ID of the workspace
     * @param {number} interval Auto-stop interval in minutes (0 to disable)
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    setAutostopIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
      return localVarFp
        .setAutostopIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Start workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    startWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      return localVarFp
        .startWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Stop workspace
     * @param {string} workspaceId ID of the workspace
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    stopWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
      return localVarFp
        .stopWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary [DEPRECATED] Update public status
     * @param {string} workspaceId ID of the workspace
     * @param {boolean} isPublic Public status to set
     * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    updatePublicStatusWorkspaceDeprecated(workspaceId, isPublic, xDaytonaOrganizationID, options) {
      return localVarFp
        .updatePublicStatusWorkspaceDeprecated(workspaceId, isPublic, xDaytonaOrganizationID, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.WorkspaceApiFactory = WorkspaceApiFactory
/**
 * WorkspaceApi - object-oriented interface
 * @export
 * @class WorkspaceApi
 * @extends {BaseAPI}
 */
class WorkspaceApi extends base_1.BaseAPI {
  /**
   *
   * @summary [DEPRECATED] Archive workspace
   * @param {string} workspaceId
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  archiveWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .archiveWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Create workspace backup
   * @param {string} workspaceId ID of the workspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  createBackupWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .createBackupWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Create a new workspace
   * @param {CreateWorkspace} createWorkspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  createWorkspaceDeprecated(createWorkspace, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .createWorkspaceDeprecated(createWorkspace, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Delete workspace
   * @param {string} workspaceId ID of the workspace
   * @param {boolean} force
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  deleteWorkspaceDeprecated(workspaceId, force, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .deleteWorkspaceDeprecated(workspaceId, force, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Get build logs
   * @param {string} workspaceId ID of the workspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [follow] Whether to follow the logs stream
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  getBuildLogsWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, follow, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .getBuildLogsWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Get preview URL for a workspace port
   * @param {string} workspaceId ID of the workspace
   * @param {number} port Port number to get preview URL for
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  getPortPreviewUrlWorkspaceDeprecated(workspaceId, port, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .getPortPreviewUrlWorkspaceDeprecated(workspaceId, port, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Get workspace details
   * @param {string} workspaceId ID of the workspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [verbose] Include verbose output
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  getWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, verbose, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .getWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, verbose, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] List all workspaces
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {boolean} [verbose] Include verbose output
   * @param {string} [labels] JSON encoded labels to filter by
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  listWorkspacesDeprecated(xDaytonaOrganizationID, verbose, labels, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .listWorkspacesDeprecated(xDaytonaOrganizationID, verbose, labels, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Replace workspace labels
   * @param {string} workspaceId ID of the workspace
   * @param {SandboxLabels} sandboxLabels
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  replaceLabelsWorkspaceDeprecated(workspaceId, sandboxLabels, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .replaceLabelsWorkspaceDeprecated(workspaceId, sandboxLabels, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Set workspace auto-archive interval
   * @param {string} workspaceId ID of the workspace
   * @param {number} interval Auto-archive interval in minutes (0 means the maximum interval will be used)
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  setAutoArchiveIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .setAutoArchiveIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Set workspace auto-stop interval
   * @param {string} workspaceId ID of the workspace
   * @param {number} interval Auto-stop interval in minutes (0 to disable)
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  setAutostopIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .setAutostopIntervalWorkspaceDeprecated(workspaceId, interval, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Start workspace
   * @param {string} workspaceId ID of the workspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  startWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .startWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Stop workspace
   * @param {string} workspaceId ID of the workspace
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  stopWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .stopWorkspaceDeprecated(workspaceId, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   *
   * @summary [DEPRECATED] Update public status
   * @param {string} workspaceId ID of the workspace
   * @param {boolean} isPublic Public status to set
   * @param {string} [xDaytonaOrganizationID] Use with JWT to specify the organization ID
   * @param {*} [options] Override http request option.
   * @deprecated
   * @throws {RequiredError}
   * @memberof WorkspaceApi
   */
  updatePublicStatusWorkspaceDeprecated(workspaceId, isPublic, xDaytonaOrganizationID, options) {
    return (0, exports.WorkspaceApiFp)(this.configuration)
      .updatePublicStatusWorkspaceDeprecated(workspaceId, isPublic, xDaytonaOrganizationID, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.WorkspaceApi = WorkspaceApi
//# sourceMappingURL=workspace-api.js.map
