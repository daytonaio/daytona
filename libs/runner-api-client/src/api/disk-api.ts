/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { DiskInfoDTO } from '../models'
/**
 * DiskApi - axios parameter creator
 * @export
 */
export const DiskApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get detailed information about a specific disk
     * @summary Get disk info
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diskInfo: async (diskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'diskId' is not null or undefined
      assertParamExists('diskInfo', 'diskId', diskId)
      const localVarPath = `/disk/{diskId}/info`.replace(`{${'diskId'}}`, encodeURIComponent(String(diskId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Pull disk from object storage
     * @summary Pull disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullDisk: async (diskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'diskId' is not null or undefined
      assertParamExists('pullDisk', 'diskId', diskId)
      const localVarPath = `/disk/{diskId}/pull`.replace(`{${'diskId'}}`, encodeURIComponent(String(diskId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Push disk to object storage
     * @summary Push disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushDisk: async (diskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'diskId' is not null or undefined
      assertParamExists('pushDisk', 'diskId', diskId)
      const localVarPath = `/disk/{diskId}/push`.replace(`{${'diskId'}}`, encodeURIComponent(String(diskId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DiskApi - functional programming interface
 * @export
 */
export const DiskApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DiskApiAxiosParamCreator(configuration)
  return {
    /**
     * Get detailed information about a specific disk
     * @summary Get disk info
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async diskInfo(
      diskId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DiskInfoDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.diskInfo(diskId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DiskApi.diskInfo']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Pull disk from object storage
     * @summary Pull disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pullDisk(
      diskId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pullDisk(diskId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DiskApi.pullDisk']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Push disk to object storage
     * @summary Push disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pushDisk(
      diskId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pushDisk(diskId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DiskApi.pushDisk']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DiskApi - factory interface
 * @export
 */
export const DiskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DiskApiFp(configuration)
  return {
    /**
     * Get detailed information about a specific disk
     * @summary Get disk info
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    diskInfo(diskId: string, options?: RawAxiosRequestConfig): AxiosPromise<DiskInfoDTO> {
      return localVarFp.diskInfo(diskId, options).then((request) => request(axios, basePath))
    },
    /**
     * Pull disk from object storage
     * @summary Pull disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullDisk(diskId: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any }> {
      return localVarFp.pullDisk(diskId, options).then((request) => request(axios, basePath))
    },
    /**
     * Push disk to object storage
     * @summary Push disk
     * @param {string} diskId Disk ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pushDisk(diskId: string, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any }> {
      return localVarFp.pushDisk(diskId, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DiskApi - object-oriented interface
 * @export
 * @class DiskApi
 * @extends {BaseAPI}
 */
export class DiskApi extends BaseAPI {
  /**
   * Get detailed information about a specific disk
   * @summary Get disk info
   * @param {string} diskId Disk ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskApi
   */
  public diskInfo(diskId: string, options?: RawAxiosRequestConfig) {
    return DiskApiFp(this.configuration)
      .diskInfo(diskId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Pull disk from object storage
   * @summary Pull disk
   * @param {string} diskId Disk ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskApi
   */
  public pullDisk(diskId: string, options?: RawAxiosRequestConfig) {
    return DiskApiFp(this.configuration)
      .pullDisk(diskId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Push disk to object storage
   * @summary Push disk
   * @param {string} diskId Disk ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskApi
   */
  public pushDisk(diskId: string, options?: RawAxiosRequestConfig) {
    return DiskApiFp(this.configuration)
      .pushDisk(diskId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
