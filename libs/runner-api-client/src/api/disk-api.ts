/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { ArchiveDiskDTO } from '../models'
// @ts-ignore
import type { RestoreDiskDTO } from '../models'
/**
 * DiskApi - axios parameter creator
 * @export
 */
export const DiskApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Archive disk to object storage
     * @summary Archive disk
     * @param {string} diskId Disk ID
     * @param {ArchiveDiskDTO} request Archive disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveDisk: async (
      diskId: string,
      request: ArchiveDiskDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'diskId' is not null or undefined
      assertParamExists('archiveDisk', 'diskId', diskId)
      // verify required parameter 'request' is not null or undefined
      assertParamExists('archiveDisk', 'request', request)
      const localVarPath = `/disk/{diskId}/archive`.replace(`{${'diskId'}}`, encodeURIComponent(String(diskId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Restore disk from object storage
     * @summary Restore disk
     * @param {string} diskId Disk ID
     * @param {RestoreDiskDTO} request Restore disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreDisk: async (
      diskId: string,
      request: RestoreDiskDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'diskId' is not null or undefined
      assertParamExists('restoreDisk', 'diskId', diskId)
      // verify required parameter 'request' is not null or undefined
      assertParamExists('restoreDisk', 'request', request)
      const localVarPath = `/disk/{diskId}/restore`.replace(`{${'diskId'}}`, encodeURIComponent(String(diskId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DiskApi - functional programming interface
 * @export
 */
export const DiskApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DiskApiAxiosParamCreator(configuration)
  return {
    /**
     * Archive disk to object storage
     * @summary Archive disk
     * @param {string} diskId Disk ID
     * @param {ArchiveDiskDTO} request Archive disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async archiveDisk(
      diskId: string,
      request: ArchiveDiskDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.archiveDisk(diskId, request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DiskApi.archiveDisk']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Restore disk from object storage
     * @summary Restore disk
     * @param {string} diskId Disk ID
     * @param {RestoreDiskDTO} request Restore disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async restoreDisk(
      diskId: string,
      request: RestoreDiskDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any }>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.restoreDisk(diskId, request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['DiskApi.restoreDisk']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * DiskApi - factory interface
 * @export
 */
export const DiskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DiskApiFp(configuration)
  return {
    /**
     * Archive disk to object storage
     * @summary Archive disk
     * @param {string} diskId Disk ID
     * @param {ArchiveDiskDTO} request Archive disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    archiveDisk(
      diskId: string,
      request: ArchiveDiskDTO,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp.archiveDisk(diskId, request, options).then((request) => request(axios, basePath))
    },
    /**
     * Restore disk from object storage
     * @summary Restore disk
     * @param {string} diskId Disk ID
     * @param {RestoreDiskDTO} request Restore disk request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restoreDisk(
      diskId: string,
      request: RestoreDiskDTO,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<{ [key: string]: any }> {
      return localVarFp.restoreDisk(diskId, request, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DiskApi - object-oriented interface
 * @export
 * @class DiskApi
 * @extends {BaseAPI}
 */
export class DiskApi extends BaseAPI {
  /**
   * Archive disk to object storage
   * @summary Archive disk
   * @param {string} diskId Disk ID
   * @param {ArchiveDiskDTO} request Archive disk request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskApi
   */
  public archiveDisk(diskId: string, request: ArchiveDiskDTO, options?: RawAxiosRequestConfig) {
    return DiskApiFp(this.configuration)
      .archiveDisk(diskId, request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Restore disk from object storage
   * @summary Restore disk
   * @param {string} diskId Disk ID
   * @param {RestoreDiskDTO} request Restore disk request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DiskApi
   */
  public restoreDisk(diskId: string, request: RestoreDiskDTO, options?: RawAxiosRequestConfig) {
    return DiskApiFp(this.configuration)
      .restoreDisk(diskId, request, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
