/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { BuildImageRequestDTO } from '../models'
// @ts-ignore
import type { ErrorResponse } from '../models'
// @ts-ignore
import type { ImageExistsResponse } from '../models'
// @ts-ignore
import type { PullImageRequestDTO } from '../models'
/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Build a Docker image from a Dockerfile and context hashes
     * @summary Build a Docker image
     * @param {BuildImageRequestDTO} request Build image request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildImage: async (request: BuildImageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('buildImage', 'request', request)
      const localVarPath = `/images/build`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} imageRef Image ID or image ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs: async (
      imageRef: string,
      follow?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'imageRef' is not null or undefined
      assertParamExists('getBuildLogs', 'imageRef', imageRef)
      const localVarPath = `/images/logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      if (imageRef !== undefined) {
        localVarQueryParameter['imageRef'] = imageRef
      }

      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Check if a specified Docker image exists locally
     * @summary Check if a Docker image exists
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    imageExists: async (image: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'image' is not null or undefined
      assertParamExists('imageExists', 'image', image)
      const localVarPath = `/images/exists`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      if (image !== undefined) {
        localVarQueryParameter['image'] = image
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Pull a Docker image from a registry
     * @summary Pull a Docker image
     * @param {PullImageRequestDTO} request Pull image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullImage: async (request: PullImageRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('pullImage', 'request', request)
      const localVarPath = `/images/pull`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Remove a specified Docker image from the local system
     * @summary Remove a Docker image
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeImage: async (image: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'image' is not null or undefined
      assertParamExists('removeImage', 'image', image)
      const localVarPath = `/images/remove`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      if (image !== undefined) {
        localVarQueryParameter['image'] = image
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
  return {
    /**
     * Build a Docker image from a Dockerfile and context hashes
     * @summary Build a Docker image
     * @param {BuildImageRequestDTO} request Build image request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buildImage(
      request: BuildImageRequestDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buildImage(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.buildImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} imageRef Image ID or image ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildLogs(
      imageRef: string,
      follow?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildLogs(imageRef, follow, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.getBuildLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Check if a specified Docker image exists locally
     * @summary Check if a Docker image exists
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async imageExists(
      image: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageExistsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.imageExists(image, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.imageExists']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Pull a Docker image from a registry
     * @summary Pull a Docker image
     * @param {PullImageRequestDTO} request Pull image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pullImage(
      request: PullImageRequestDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pullImage(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.pullImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Remove a specified Docker image from the local system
     * @summary Remove a Docker image
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeImage(
      image: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeImage(image, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ImagesApi.removeImage']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ImagesApiFp(configuration)
  return {
    /**
     * Build a Docker image from a Dockerfile and context hashes
     * @summary Build a Docker image
     * @param {BuildImageRequestDTO} request Build image request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildImage(request: BuildImageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.buildImage(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} imageRef Image ID or image ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs(imageRef: string, follow?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.getBuildLogs(imageRef, follow, options).then((request) => request(axios, basePath))
    },
    /**
     * Check if a specified Docker image exists locally
     * @summary Check if a Docker image exists
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    imageExists(image: string, options?: RawAxiosRequestConfig): AxiosPromise<ImageExistsResponse> {
      return localVarFp.imageExists(image, options).then((request) => request(axios, basePath))
    },
    /**
     * Pull a Docker image from a registry
     * @summary Pull a Docker image
     * @param {PullImageRequestDTO} request Pull image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullImage(request: PullImageRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.pullImage(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Remove a specified Docker image from the local system
     * @summary Remove a Docker image
     * @param {string} image Image name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeImage(image: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.removeImage(image, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
  /**
   * Build a Docker image from a Dockerfile and context hashes
   * @summary Build a Docker image
   * @param {BuildImageRequestDTO} request Build image request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public buildImage(request: BuildImageRequestDTO, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .buildImage(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stream build logs
   * @summary Get build logs
   * @param {string} imageRef Image ID or image ref without the tag
   * @param {boolean} [follow] Whether to follow the log output
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public getBuildLogs(imageRef: string, follow?: boolean, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .getBuildLogs(imageRef, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Check if a specified Docker image exists locally
   * @summary Check if a Docker image exists
   * @param {string} image Image name and tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public imageExists(image: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .imageExists(image, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Pull a Docker image from a registry
   * @summary Pull a Docker image
   * @param {PullImageRequestDTO} request Pull image
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public pullImage(request: PullImageRequestDTO, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .pullImage(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Remove a specified Docker image from the local system
   * @summary Remove a Docker image
   * @param {string} image Image name and tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ImagesApi
   */
  public removeImage(image: string, options?: RawAxiosRequestConfig) {
    return ImagesApiFp(this.configuration)
      .removeImage(image, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
