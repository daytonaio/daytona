'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.SandboxApi = exports.SandboxApiFactory = exports.SandboxApiFp = exports.SandboxApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * SandboxApi - axios parameter creator
 * @export
 */
const SandboxApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (sandbox, options = {}) => {
      // verify required parameter 'sandbox' is not null or undefined
      ;(0, common_1.assertParamExists)('create', 'sandbox', sandbox)
      const localVarPath = `/sandboxes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sandbox, localVarRequestOptions, configuration)
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup: async (sandboxId, sandbox, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('createBackup', 'sandboxId', sandboxId)
      // verify required parameter 'sandbox' is not null or undefined
      ;(0, common_1.assertParamExists)('createBackup', 'sandbox', sandbox)
      const localVarPath = `/sandboxes/{sandboxId}/backup`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sandbox, localVarRequestOptions, configuration)
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroy: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('destroy', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/destroy`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    info: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('info', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDestroyed: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('removeDestroyed', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resize: async (sandboxId, sandbox, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('resize', 'sandboxId', sandboxId)
      // verify required parameter 'sandbox' is not null or undefined
      ;(0, common_1.assertParamExists)('resize', 'sandbox', sandbox)
      const localVarPath = `/sandboxes/{sandboxId}/resize`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(sandbox, localVarRequestOptions, configuration)
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('start', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop: async (sandboxId, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('stop', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.SandboxApiAxiosParamCreator = SandboxApiAxiosParamCreator
/**
 * SandboxApi - functional programming interface
 * @export
 */
const SandboxApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.SandboxApiAxiosParamCreator)(configuration)
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(sandbox, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.create']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBackup(sandboxId, sandbox, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBackup(sandboxId, sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.createBackup']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroy(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.destroy']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async info(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.info(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.info']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDestroyed(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeDestroyed(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.removeDestroyed']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resize(sandboxId, sandbox, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resize(sandboxId, sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.resize']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async start(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.start(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.start']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stop(sandboxId, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stop(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SandboxApi.stop']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.SandboxApiFp = SandboxApiFp
/**
 * SandboxApi - factory interface
 * @export
 */
const SandboxApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.SandboxApiFp)(configuration)
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(sandbox, options) {
      return localVarFp.create(sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup(sandboxId, sandbox, options) {
      return localVarFp.createBackup(sandboxId, sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroy(sandboxId, options) {
      return localVarFp.destroy(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    info(sandboxId, options) {
      return localVarFp.info(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDestroyed(sandboxId, options) {
      return localVarFp.removeDestroyed(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resize(sandboxId, sandbox, options) {
      return localVarFp.resize(sandboxId, sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start(sandboxId, options) {
      return localVarFp.start(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop(sandboxId, options) {
      return localVarFp.stop(sandboxId, options).then((request) => request(axios, basePath))
    },
  }
}
exports.SandboxApiFactory = SandboxApiFactory
/**
 * SandboxApi - object-oriented interface
 * @export
 * @class SandboxApi
 * @extends {BaseAPI}
 */
class SandboxApi extends base_1.BaseAPI {
  /**
   * Create a sandbox
   * @summary Create a sandbox
   * @param {CreateSandboxDTO} sandbox Create sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  create(sandbox, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .create(sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Create sandbox backup
   * @summary Create sandbox backup
   * @param {string} sandboxId Sandbox ID
   * @param {CreateBackupDTO} sandbox Create backup
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  createBackup(sandboxId, sandbox, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .createBackup(sandboxId, sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Destroy sandbox
   * @summary Destroy sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  destroy(sandboxId, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .destroy(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Get sandbox info
   * @summary Get sandbox info
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  info(sandboxId, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .info(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Remove a sandbox that has been previously destroyed
   * @summary Remove a destroyed sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  removeDestroyed(sandboxId, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .removeDestroyed(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Resize sandbox
   * @summary Resize sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {ResizeSandboxDTO} sandbox Resize sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  resize(sandboxId, sandbox, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .resize(sandboxId, sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Start sandbox
   * @summary Start sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  start(sandboxId, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .start(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Stop sandbox
   * @summary Stop sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  stop(sandboxId, options) {
    return (0, exports.SandboxApiFp)(this.configuration)
      .stop(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.SandboxApi = SandboxApi
//# sourceMappingURL=sandbox-api.js.map
