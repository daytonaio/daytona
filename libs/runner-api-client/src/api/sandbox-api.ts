/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { CreateBackupDTO } from '../models'
// @ts-ignore
import type { CreateSandboxDTO } from '../models'
// @ts-ignore
import type { ErrorResponse } from '../models'
// @ts-ignore
import type { ResizeSandboxDTO } from '../models'
// @ts-ignore
import type { SandboxInfoResponse } from '../models'
// @ts-ignore
import type { UpdateNetworkSettingsDTO } from '../models'
/**
 * SandboxApi - axios parameter creator
 * @export
 */
export const SandboxApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create: async (sandbox: CreateSandboxDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandbox' is not null or undefined
      assertParamExists('create', 'sandbox', sandbox)
      const localVarPath = `/sandboxes`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sandbox, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup: async (
      sandboxId: string,
      sandbox: CreateBackupDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('createBackup', 'sandboxId', sandboxId)
      // verify required parameter 'sandbox' is not null or undefined
      assertParamExists('createBackup', 'sandbox', sandbox)
      const localVarPath = `/sandboxes/{sandboxId}/backup`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sandbox, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroy: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('destroy', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/destroy`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get sandbox network settings
     * @summary Get sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkSettings: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('getNetworkSettings', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/network-settings`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    info: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('info', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDestroyed: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('removeDestroyed', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}`.replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resize: async (
      sandboxId: string,
      sandbox: ResizeSandboxDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('resize', 'sandboxId', sandboxId)
      // verify required parameter 'sandbox' is not null or undefined
      assertParamExists('resize', 'sandbox', sandbox)
      const localVarPath = `/sandboxes/{sandboxId}/resize`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sandbox, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('start', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/start`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop: async (sandboxId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('stop', 'sandboxId', sandboxId)
      const localVarPath = `/sandboxes/{sandboxId}/stop`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Update sandbox network settings
     * @summary Update sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {UpdateNetworkSettingsDTO} sandbox Update network settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNetworkSettings: async (
      sandboxId: string,
      sandbox: UpdateNetworkSettingsDTO,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'sandboxId' is not null or undefined
      assertParamExists('updateNetworkSettings', 'sandboxId', sandboxId)
      // verify required parameter 'sandbox' is not null or undefined
      assertParamExists('updateNetworkSettings', 'sandbox', sandbox)
      const localVarPath = `/sandboxes/{sandboxId}/network-settings`.replace(
        `{${'sandboxId'}}`,
        encodeURIComponent(String(sandboxId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication Bearer required
      await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration)

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(sandbox, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * SandboxApi - functional programming interface
 * @export
 */
export const SandboxApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SandboxApiAxiosParamCreator(configuration)
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async create(
      sandbox: CreateSandboxDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.create(sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.create']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createBackup(
      sandboxId: string,
      sandbox: CreateBackupDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createBackup(sandboxId, sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.createBackup']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroy(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.destroy']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get sandbox network settings
     * @summary Get sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getNetworkSettings(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateNetworkSettingsDTO>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkSettings(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.getNetworkSettings']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async info(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SandboxInfoResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.info(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['SandboxApi.info']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDestroyed(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeDestroyed(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.removeDestroyed']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resize(
      sandboxId: string,
      sandbox: ResizeSandboxDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.resize(sandboxId, sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.resize']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async start(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.start(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.start']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stop(
      sandboxId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stop(sandboxId, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['SandboxApi.stop']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Update sandbox network settings
     * @summary Update sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {UpdateNetworkSettingsDTO} sandbox Update network settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateNetworkSettings(
      sandboxId: string,
      sandbox: UpdateNetworkSettingsDTO,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateNetworkSettings(sandboxId, sandbox, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['SandboxApi.updateNetworkSettings']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * SandboxApi - factory interface
 * @export
 */
export const SandboxApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = SandboxApiFp(configuration)
  return {
    /**
     * Create a sandbox
     * @summary Create a sandbox
     * @param {CreateSandboxDTO} sandbox Create sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    create(sandbox: CreateSandboxDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.create(sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Create sandbox backup
     * @summary Create sandbox backup
     * @param {string} sandboxId Sandbox ID
     * @param {CreateBackupDTO} sandbox Create backup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBackup(sandboxId: string, sandbox: CreateBackupDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.createBackup(sandboxId, sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Destroy sandbox
     * @summary Destroy sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroy(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.destroy(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Get sandbox network settings
     * @summary Get sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkSettings(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<UpdateNetworkSettingsDTO> {
      return localVarFp.getNetworkSettings(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Get sandbox info
     * @summary Get sandbox info
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    info(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<SandboxInfoResponse> {
      return localVarFp.info(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Remove a sandbox that has been previously destroyed
     * @summary Remove a destroyed sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDestroyed(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.removeDestroyed(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Resize sandbox
     * @summary Resize sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {ResizeSandboxDTO} sandbox Resize sandbox
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resize(sandboxId: string, sandbox: ResizeSandboxDTO, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.resize(sandboxId, sandbox, options).then((request) => request(axios, basePath))
    },
    /**
     * Start sandbox
     * @summary Start sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.start(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Stop sandbox
     * @summary Stop sandbox
     * @param {string} sandboxId Sandbox ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop(sandboxId: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp.stop(sandboxId, options).then((request) => request(axios, basePath))
    },
    /**
     * Update sandbox network settings
     * @summary Update sandbox network settings
     * @param {string} sandboxId Sandbox ID
     * @param {UpdateNetworkSettingsDTO} sandbox Update network settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateNetworkSettings(
      sandboxId: string,
      sandbox: UpdateNetworkSettingsDTO,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp.updateNetworkSettings(sandboxId, sandbox, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * SandboxApi - object-oriented interface
 * @export
 * @class SandboxApi
 * @extends {BaseAPI}
 */
export class SandboxApi extends BaseAPI {
  /**
   * Create a sandbox
   * @summary Create a sandbox
   * @param {CreateSandboxDTO} sandbox Create sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public create(sandbox: CreateSandboxDTO, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .create(sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Create sandbox backup
   * @summary Create sandbox backup
   * @param {string} sandboxId Sandbox ID
   * @param {CreateBackupDTO} sandbox Create backup
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public createBackup(sandboxId: string, sandbox: CreateBackupDTO, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .createBackup(sandboxId, sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Destroy sandbox
   * @summary Destroy sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public destroy(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .destroy(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get sandbox network settings
   * @summary Get sandbox network settings
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public getNetworkSettings(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .getNetworkSettings(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get sandbox info
   * @summary Get sandbox info
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public info(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .info(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Remove a sandbox that has been previously destroyed
   * @summary Remove a destroyed sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public removeDestroyed(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .removeDestroyed(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Resize sandbox
   * @summary Resize sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {ResizeSandboxDTO} sandbox Resize sandbox
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public resize(sandboxId: string, sandbox: ResizeSandboxDTO, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .resize(sandboxId, sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start sandbox
   * @summary Start sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public start(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .start(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop sandbox
   * @summary Stop sandbox
   * @param {string} sandboxId Sandbox ID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public stop(sandboxId: string, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .stop(sandboxId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Update sandbox network settings
   * @summary Update sandbox network settings
   * @param {string} sandboxId Sandbox ID
   * @param {UpdateNetworkSettingsDTO} sandbox Update network settings
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SandboxApi
   */
  public updateNetworkSettings(sandboxId: string, sandbox: UpdateNetworkSettingsDTO, options?: RawAxiosRequestConfig) {
    return SandboxApiFp(this.configuration)
      .updateNetworkSettings(sandboxId, sandbox, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
