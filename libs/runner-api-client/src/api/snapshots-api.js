'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.SnapshotsApi =
  exports.SnapshotsApiFactory =
  exports.SnapshotsApiFp =
  exports.SnapshotsApiAxiosParamCreator =
    void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * SnapshotsApi - axios parameter creator
 * @export
 */
const SnapshotsApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Build a snapshot from a Dockerfile and context hashes
     * @summary Build a snapshot
     * @param {BuildSnapshotRequestDTO} request Build snapshot request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildSnapshot: async (request, options = {}) => {
      // verify required parameter 'request' is not null or undefined
      ;(0, common_1.assertParamExists)('buildSnapshot', 'request', request)
      const localVarPath = `/snapshots/build`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration)
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} snapshotRef Snapshot ID or snapshot ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs: async (snapshotRef, follow, options = {}) => {
      // verify required parameter 'snapshotRef' is not null or undefined
      ;(0, common_1.assertParamExists)('getBuildLogs', 'snapshotRef', snapshotRef)
      const localVarPath = `/snapshots/logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      if (snapshotRef !== undefined) {
        localVarQueryParameter['snapshotRef'] = snapshotRef
      }
      if (follow !== undefined) {
        localVarQueryParameter['follow'] = follow
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Pull a snapshot from a registry
     * @summary Pull a snapshot
     * @param {PullSnapshotRequestDTO} request Pull snapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullSnapshot: async (request, options = {}) => {
      // verify required parameter 'request' is not null or undefined
      ;(0, common_1.assertParamExists)('pullSnapshot', 'request', request)
      const localVarPath = `/snapshots/pull`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      localVarHeaderParameter['Content-Type'] = 'application/json'
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(request, localVarRequestOptions, configuration)
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Remove a specified snapshot from the local system
     * @summary Remove a snapshot
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSnapshot: async (snapshot, options = {}) => {
      // verify required parameter 'snapshot' is not null or undefined
      ;(0, common_1.assertParamExists)('removeSnapshot', 'snapshot', snapshot)
      const localVarPath = `/snapshots/remove`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      if (snapshot !== undefined) {
        localVarQueryParameter['snapshot'] = snapshot
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Check if a specified snapshot exists locally
     * @summary Check if a snapshot exists
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotExists: async (snapshot, options = {}) => {
      // verify required parameter 'snapshot' is not null or undefined
      ;(0, common_1.assertParamExists)('snapshotExists', 'snapshot', snapshot)
      const localVarPath = `/snapshots/exists`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      if (snapshot !== undefined) {
        localVarQueryParameter['snapshot'] = snapshot
      }
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.SnapshotsApiAxiosParamCreator = SnapshotsApiAxiosParamCreator
/**
 * SnapshotsApi - functional programming interface
 * @export
 */
const SnapshotsApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.SnapshotsApiAxiosParamCreator)(configuration)
  return {
    /**
     * Build a snapshot from a Dockerfile and context hashes
     * @summary Build a snapshot
     * @param {BuildSnapshotRequestDTO} request Build snapshot request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async buildSnapshot(request, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.buildSnapshot(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.buildSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} snapshotRef Snapshot ID or snapshot ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBuildLogs(snapshotRef, follow, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBuildLogs(snapshotRef, follow, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.getBuildLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Pull a snapshot from a registry
     * @summary Pull a snapshot
     * @param {PullSnapshotRequestDTO} request Pull snapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pullSnapshot(request, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pullSnapshot(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.pullSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Remove a specified snapshot from the local system
     * @summary Remove a snapshot
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeSnapshot(snapshot, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeSnapshot(snapshot, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.removeSnapshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Check if a specified snapshot exists locally
     * @summary Check if a snapshot exists
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async snapshotExists(snapshot, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.snapshotExists(snapshot, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['SnapshotsApi.snapshotExists']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.SnapshotsApiFp = SnapshotsApiFp
/**
 * SnapshotsApi - factory interface
 * @export
 */
const SnapshotsApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.SnapshotsApiFp)(configuration)
  return {
    /**
     * Build a snapshot from a Dockerfile and context hashes
     * @summary Build a snapshot
     * @param {BuildSnapshotRequestDTO} request Build snapshot request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildSnapshot(request, options) {
      return localVarFp.buildSnapshot(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Stream build logs
     * @summary Get build logs
     * @param {string} snapshotRef Snapshot ID or snapshot ref without the tag
     * @param {boolean} [follow] Whether to follow the log output
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBuildLogs(snapshotRef, follow, options) {
      return localVarFp.getBuildLogs(snapshotRef, follow, options).then((request) => request(axios, basePath))
    },
    /**
     * Pull a snapshot from a registry
     * @summary Pull a snapshot
     * @param {PullSnapshotRequestDTO} request Pull snapshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pullSnapshot(request, options) {
      return localVarFp.pullSnapshot(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Remove a specified snapshot from the local system
     * @summary Remove a snapshot
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeSnapshot(snapshot, options) {
      return localVarFp.removeSnapshot(snapshot, options).then((request) => request(axios, basePath))
    },
    /**
     * Check if a specified snapshot exists locally
     * @summary Check if a snapshot exists
     * @param {string} snapshot Snapshot name and tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    snapshotExists(snapshot, options) {
      return localVarFp.snapshotExists(snapshot, options).then((request) => request(axios, basePath))
    },
  }
}
exports.SnapshotsApiFactory = SnapshotsApiFactory
/**
 * SnapshotsApi - object-oriented interface
 * @export
 * @class SnapshotsApi
 * @extends {BaseAPI}
 */
class SnapshotsApi extends base_1.BaseAPI {
  /**
   * Build a snapshot from a Dockerfile and context hashes
   * @summary Build a snapshot
   * @param {BuildSnapshotRequestDTO} request Build snapshot request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  buildSnapshot(request, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .buildSnapshot(request, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Stream build logs
   * @summary Get build logs
   * @param {string} snapshotRef Snapshot ID or snapshot ref without the tag
   * @param {boolean} [follow] Whether to follow the log output
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  getBuildLogs(snapshotRef, follow, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .getBuildLogs(snapshotRef, follow, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Pull a snapshot from a registry
   * @summary Pull a snapshot
   * @param {PullSnapshotRequestDTO} request Pull snapshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  pullSnapshot(request, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .pullSnapshot(request, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Remove a specified snapshot from the local system
   * @summary Remove a snapshot
   * @param {string} snapshot Snapshot name and tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  removeSnapshot(snapshot, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .removeSnapshot(snapshot, options)
      .then((request) => request(this.axios, this.basePath))
  }
  /**
   * Check if a specified snapshot exists locally
   * @summary Check if a snapshot exists
   * @param {string} snapshot Snapshot name and tag
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SnapshotsApi
   */
  snapshotExists(snapshot, options) {
    return (0, exports.SnapshotsApiFp)(this.configuration)
      .snapshotExists(snapshot, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.SnapshotsApi = SnapshotsApi
//# sourceMappingURL=snapshots-api.js.map
