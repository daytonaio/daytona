'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.ToolboxApi = exports.ToolboxApiFactory = exports.ToolboxApiFp = exports.ToolboxApiAxiosParamCreator = void 0
const tslib_1 = require('tslib')
const axios_1 = tslib_1.__importDefault(require('axios'))
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require('../common')
// @ts-ignore
const base_1 = require('../base')
/**
 * ToolboxApi - axios parameter creator
 * @export
 */
const ToolboxApiAxiosParamCreator = function (configuration) {
  return {
    /**
     * Forwards the request to the specified sandbox\'s container
     * @summary Proxy requests to the sandbox toolbox
     * @param {string} sandboxId Sandbox ID
     * @param {string} path Path to forward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxesSandboxIdToolboxPathGet: async (sandboxId, path, options = {}) => {
      // verify required parameter 'sandboxId' is not null or undefined
      ;(0, common_1.assertParamExists)('sandboxesSandboxIdToolboxPathGet', 'sandboxId', sandboxId)
      // verify required parameter 'path' is not null or undefined
      ;(0, common_1.assertParamExists)('sandboxesSandboxIdToolboxPathGet', 'path', path)
      const localVarPath = `/sandboxes/{sandboxId}/toolbox/{path}`
        .replace(`{${'sandboxId'}}`, encodeURIComponent(String(sandboxId)))
        .replace(`{${'path'}}`, encodeURIComponent(String(path)))
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {}
      const localVarQueryParameter = {}
      // authentication Bearer required
      await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, 'Authorization', configuration)
      ;(0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      return {
        url: (0, common_1.toPathString)(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}
exports.ToolboxApiAxiosParamCreator = ToolboxApiAxiosParamCreator
/**
 * ToolboxApi - functional programming interface
 * @export
 */
const ToolboxApiFp = function (configuration) {
  const localVarAxiosParamCreator = (0, exports.ToolboxApiAxiosParamCreator)(configuration)
  return {
    /**
     * Forwards the request to the specified sandbox\'s container
     * @summary Proxy requests to the sandbox toolbox
     * @param {string} sandboxId Sandbox ID
     * @param {string} path Path to forward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async sandboxesSandboxIdToolboxPathGet(sandboxId, path, options) {
      const localVarAxiosArgs = await localVarAxiosParamCreator.sandboxesSandboxIdToolboxPathGet(
        sandboxId,
        path,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        base_1.operationServerMap['ToolboxApi.sandboxesSandboxIdToolboxPathGet']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        (0, common_1.createRequestFunction)(
          localVarAxiosArgs,
          axios_1.default,
          base_1.BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}
exports.ToolboxApiFp = ToolboxApiFp
/**
 * ToolboxApi - factory interface
 * @export
 */
const ToolboxApiFactory = function (configuration, basePath, axios) {
  const localVarFp = (0, exports.ToolboxApiFp)(configuration)
  return {
    /**
     * Forwards the request to the specified sandbox\'s container
     * @summary Proxy requests to the sandbox toolbox
     * @param {string} sandboxId Sandbox ID
     * @param {string} path Path to forward
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    sandboxesSandboxIdToolboxPathGet(sandboxId, path, options) {
      return localVarFp
        .sandboxesSandboxIdToolboxPathGet(sandboxId, path, options)
        .then((request) => request(axios, basePath))
    },
  }
}
exports.ToolboxApiFactory = ToolboxApiFactory
/**
 * ToolboxApi - object-oriented interface
 * @export
 * @class ToolboxApi
 * @extends {BaseAPI}
 */
class ToolboxApi extends base_1.BaseAPI {
  /**
   * Forwards the request to the specified sandbox\'s container
   * @summary Proxy requests to the sandbox toolbox
   * @param {string} sandboxId Sandbox ID
   * @param {string} path Path to forward
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ToolboxApi
   */
  sandboxesSandboxIdToolboxPathGet(sandboxId, path, options) {
    return (0, exports.ToolboxApiFp)(this.configuration)
      .sandboxesSandboxIdToolboxPathGet(sandboxId, path, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
exports.ToolboxApi = ToolboxApi
//# sourceMappingURL=toolbox-api.js.map
