'use strict'
/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Runner API
 * Daytona Runner API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, '__esModule', { value: true })
exports.createRequestFunction =
  exports.toPathString =
  exports.serializeDataIfNeeded =
  exports.setSearchParams =
  exports.setOAuthToObject =
  exports.setBearerAuthToObject =
  exports.setBasicAuthToObject =
  exports.setApiKeyToObject =
  exports.assertParamExists =
  exports.DUMMY_BASE_URL =
    void 0
const base_1 = require('./base')
/**
 *
 * @export
 */
exports.DUMMY_BASE_URL = 'https://example.com'
/**
 *
 * @throws {RequiredError}
 * @export
 */
const assertParamExists = function (functionName, paramName, paramValue) {
  if (paramValue === null || paramValue === undefined) {
    throw new base_1.RequiredError(
      paramName,
      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`,
    )
  }
}
exports.assertParamExists = assertParamExists
/**
 *
 * @export
 */
const setApiKeyToObject = async function (object, keyParamName, configuration) {
  if (configuration && configuration.apiKey) {
    const localVarApiKeyValue =
      typeof configuration.apiKey === 'function' ? await configuration.apiKey(keyParamName) : await configuration.apiKey
    object[keyParamName] = localVarApiKeyValue
  }
}
exports.setApiKeyToObject = setApiKeyToObject
/**
 *
 * @export
 */
const setBasicAuthToObject = function (object, configuration) {
  if (configuration && (configuration.username || configuration.password)) {
    object['auth'] = { username: configuration.username, password: configuration.password }
  }
}
exports.setBasicAuthToObject = setBasicAuthToObject
/**
 *
 * @export
 */
const setBearerAuthToObject = async function (object, configuration) {
  if (configuration && configuration.accessToken) {
    const accessToken =
      typeof configuration.accessToken === 'function'
        ? await configuration.accessToken()
        : await configuration.accessToken
    object['Authorization'] = 'Bearer ' + accessToken
  }
}
exports.setBearerAuthToObject = setBearerAuthToObject
/**
 *
 * @export
 */
const setOAuthToObject = async function (object, name, scopes, configuration) {
  if (configuration && configuration.accessToken) {
    const localVarAccessTokenValue =
      typeof configuration.accessToken === 'function'
        ? await configuration.accessToken(name, scopes)
        : await configuration.accessToken
    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue
  }
}
exports.setOAuthToObject = setOAuthToObject
function setFlattenedQueryParams(urlSearchParams, parameter, key = '') {
  if (parameter == null) return
  if (typeof parameter === 'object') {
    if (Array.isArray(parameter)) {
      parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key))
    } else {
      Object.keys(parameter).forEach((currentKey) =>
        setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== '' ? '.' : ''}${currentKey}`),
      )
    }
  } else {
    if (urlSearchParams.has(key)) {
      urlSearchParams.append(key, parameter)
    } else {
      urlSearchParams.set(key, parameter)
    }
  }
}
/**
 *
 * @export
 */
const setSearchParams = function (url, ...objects) {
  const searchParams = new URLSearchParams(url.search)
  setFlattenedQueryParams(searchParams, objects)
  url.search = searchParams.toString()
}
exports.setSearchParams = setSearchParams
/**
 *
 * @export
 */
const serializeDataIfNeeded = function (value, requestOptions, configuration) {
  const nonString = typeof value !== 'string'
  const needsSerialization =
    nonString && configuration && configuration.isJsonMime
      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])
      : nonString
  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || ''
}
exports.serializeDataIfNeeded = serializeDataIfNeeded
/**
 *
 * @export
 */
const toPathString = function (url) {
  return url.pathname + url.search + url.hash
}
exports.toPathString = toPathString
/**
 *
 * @export
 */
const createRequestFunction = function (axiosArgs, globalAxios, BASE_PATH, configuration) {
  return (axios = globalAxios, basePath = BASE_PATH) => {
    const axiosRequestArgs = {
      ...axiosArgs.options,
      url: (axios.defaults.baseURL ? '' : (configuration?.basePath ?? basePath)) + axiosArgs.url,
    }
    return axios.request(axiosRequestArgs)
  }
}
exports.createRequestFunction = createRequestFunction
//# sourceMappingURL=common.js.map
