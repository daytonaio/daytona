// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: runner/v1/runner.proto

/* eslint-disable */
import type { Metadata } from '@grpc/grpc-js'
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'runner.v1'

export enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0,
  HEALTH_STATUS_HEALTHY = 1,
  HEALTH_STATUS_UNHEALTHY = 2,
  UNRECOGNIZED = -1,
}

export enum SandboxState {
  SANDBOX_STATE_UNSPECIFIED = 0,
  SANDBOX_STATE_CREATING = 1,
  SANDBOX_STATE_RESTORING = 2,
  SANDBOX_STATE_DESTROYED = 3,
  SANDBOX_STATE_DESTROYING = 4,
  SANDBOX_STATE_STARTED = 5,
  SANDBOX_STATE_STOPPED = 6,
  SANDBOX_STATE_STARTING = 7,
  SANDBOX_STATE_STOPPING = 8,
  SANDBOX_STATE_RESIZING = 9,
  SANDBOX_STATE_ERROR = 10,
  SANDBOX_STATE_PULLING_SNAPSHOT = 11,
  UNRECOGNIZED = -1,
}

export enum BackupState {
  BACKUP_STATE_UNSPECIFIED = 0,
  BACKUP_STATE_PENDING = 1,
  BACKUP_STATE_IN_PROGRESS = 2,
  BACKUP_STATE_COMPLETED = 3,
  BACKUP_STATE_FAILED = 4,
  UNRECOGNIZED = -1,
}

/** Health messages */
export interface HealthCheckRequest {}

export interface HealthCheckResponse {
  status: HealthStatus
  version: string
}

/** Runner messages */
export interface RunnerInfoRequest {}

export interface RunnerInfoResponse {
  metrics?: RunnerMetrics | undefined
}

/** Sandbox messages */
export interface CreateSandboxRequest {
  id: string
  fromVolumeId?: string | undefined
  userId: string
  snapshot: string
  osUser: string
  cpuQuota: number
  gpuQuota: number
  memoryQuota: number
  storageQuota: number
  env: { [key: string]: string }
  registry?: Registry | undefined
  entrypoint: string[]
  volumes: Volume[]
}

export interface CreateSandboxRequest_EnvEntry {
  key: string
  value: string
}

export interface CreateSandboxResponse {
  sandboxId: string
}

export interface DestroySandboxRequest {
  sandboxId: string
}

export interface DestroySandboxResponse {
  message: string
}

export interface CreateBackupRequest {
  sandboxId: string
  registry: Registry | undefined
  snapshot: string
}

export interface CreateBackupResponse {
  message: string
}

export interface StartSandboxRequest {
  sandboxId: string
}

export interface StartSandboxResponse {
  message: string
}

export interface StopSandboxRequest {
  sandboxId: string
}

export interface StopSandboxResponse {
  message: string
}

export interface SandboxInfoRequest {
  sandboxId: string
}

export interface SandboxInfoResponse {
  state: SandboxState
  backupState: BackupState
}

export interface RemoveDestroyedSandboxRequest {
  sandboxId: string
}

export interface RemoveDestroyedSandboxResponse {
  message: string
}

export interface SandboxDaemonVersionRequest {
  sandboxId: string
}

export interface SandboxDaemonVersionResponse {
  daemonVersion: string
}

/** Snapshot messages */
export interface Registry {
  url: string
  project?: string | undefined
  username?: string | undefined
  password?: string | undefined
}

export interface PullSnapshotRequest {
  snapshot: string
  registry: Registry | undefined
}

export interface PullSnapshotResponse {
  message: string
}

export interface BuildSnapshotRequest {
  snapshot?: string | undefined
  registry?: Registry | undefined
  dockerfile: string
  organizationId: string
  context: string[]
  pushToInternalRegistry?: boolean | undefined
}

export interface BuildSnapshotResponse {
  message: string
}

export interface SnapshotExistsRequest {
  snapshot: string
  includeLatest: boolean
}

export interface SnapshotExistsResponse {
  exists: boolean
}

export interface RemoveSnapshotRequest {
  snapshot: string
  force: boolean
}

export interface RemoveSnapshotResponse {
  message: string
}

export interface GetSnapshotLogsRequest {
  snapshotRef: string
  follow: boolean
}

export interface GetSnapshotLogsResponse {
  content: string
}

/** Add Volume message for CreateSandboxRequest */
export interface Volume {
  volumeId: string
  mountPath: string
}

/** Add RunnerMetrics message for RunnerInfoResponse */
export interface RunnerMetrics {
  currentAllocatedCpu: number
  currentAllocatedDiskGiB: number
  currentAllocatedMemoryGiB: number
  currentCpuUsagePercentage: number
  currentDiskUsagePercentage: number
  currentMemoryUsagePercentage: number
  currentSnapshotCount: number
}

export const RUNNER_V1_PACKAGE_NAME = 'runner.v1'

/** Health service */

export interface HealthServiceClient {
  healthCheck(request: HealthCheckRequest, metadata: Metadata, ...rest: any): Observable<HealthCheckResponse>
}

/** Health service */

export interface HealthServiceController {
  healthCheck(
    request: HealthCheckRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<HealthCheckResponse> | Observable<HealthCheckResponse> | HealthCheckResponse
}

export function HealthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['healthCheck']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('HealthService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('HealthService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const HEALTH_SERVICE_NAME = 'HealthService'

/** Runner service */

export interface RunnerServiceClient {
  runnerInfo(request: RunnerInfoRequest, metadata: Metadata, ...rest: any): Observable<RunnerInfoResponse>
}

/** Runner service */

export interface RunnerServiceController {
  runnerInfo(
    request: RunnerInfoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<RunnerInfoResponse> | Observable<RunnerInfoResponse> | RunnerInfoResponse
}

export function RunnerServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['runnerInfo']
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('RunnerService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('RunnerService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const RUNNER_SERVICE_NAME = 'RunnerService'

/** Sandbox service */

export interface SandboxServiceClient {
  createSandbox(request: CreateSandboxRequest, metadata: Metadata, ...rest: any): Observable<CreateSandboxResponse>

  destroySandbox(request: DestroySandboxRequest, metadata: Metadata, ...rest: any): Observable<DestroySandboxResponse>

  createBackup(request: CreateBackupRequest, metadata: Metadata, ...rest: any): Observable<CreateBackupResponse>

  startSandbox(request: StartSandboxRequest, metadata: Metadata, ...rest: any): Observable<StartSandboxResponse>

  stopSandbox(request: StopSandboxRequest, metadata: Metadata, ...rest: any): Observable<StopSandboxResponse>

  sandboxInfo(request: SandboxInfoRequest, metadata: Metadata, ...rest: any): Observable<SandboxInfoResponse>

  removeDestroyedSandbox(
    request: RemoveDestroyedSandboxRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<RemoveDestroyedSandboxResponse>

  sandboxDaemonVersion(
    request: SandboxDaemonVersionRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<SandboxDaemonVersionResponse>
}

/** Sandbox service */

export interface SandboxServiceController {
  createSandbox(
    request: CreateSandboxRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CreateSandboxResponse> | Observable<CreateSandboxResponse> | CreateSandboxResponse

  destroySandbox(
    request: DestroySandboxRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<DestroySandboxResponse> | Observable<DestroySandboxResponse> | DestroySandboxResponse

  createBackup(
    request: CreateBackupRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<CreateBackupResponse> | Observable<CreateBackupResponse> | CreateBackupResponse

  startSandbox(
    request: StartSandboxRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<StartSandboxResponse> | Observable<StartSandboxResponse> | StartSandboxResponse

  stopSandbox(
    request: StopSandboxRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<StopSandboxResponse> | Observable<StopSandboxResponse> | StopSandboxResponse

  sandboxInfo(
    request: SandboxInfoRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<SandboxInfoResponse> | Observable<SandboxInfoResponse> | SandboxInfoResponse

  removeDestroyedSandbox(
    request: RemoveDestroyedSandboxRequest,
    metadata: Metadata,
    ...rest: any
  ):
    | Promise<RemoveDestroyedSandboxResponse>
    | Observable<RemoveDestroyedSandboxResponse>
    | RemoveDestroyedSandboxResponse

  sandboxDaemonVersion(
    request: SandboxDaemonVersionRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<SandboxDaemonVersionResponse> | Observable<SandboxDaemonVersionResponse> | SandboxDaemonVersionResponse
}

export function SandboxServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createSandbox',
      'destroySandbox',
      'createBackup',
      'startSandbox',
      'stopSandbox',
      'sandboxInfo',
      'removeDestroyedSandbox',
      'sandboxDaemonVersion',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('SandboxService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('SandboxService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const SANDBOX_SERVICE_NAME = 'SandboxService'

/** Snapshot service */

export interface SnapshotServiceClient {
  pullSnapshot(request: PullSnapshotRequest, metadata: Metadata, ...rest: any): Observable<PullSnapshotResponse>

  buildSnapshot(request: BuildSnapshotRequest, metadata: Metadata, ...rest: any): Observable<BuildSnapshotResponse>

  snapshotExists(request: SnapshotExistsRequest, metadata: Metadata, ...rest: any): Observable<SnapshotExistsResponse>

  removeSnapshot(request: RemoveSnapshotRequest, metadata: Metadata, ...rest: any): Observable<RemoveSnapshotResponse>

  getSnapshotLogs(
    request: GetSnapshotLogsRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<GetSnapshotLogsResponse>
}

/** Snapshot service */

export interface SnapshotServiceController {
  pullSnapshot(
    request: PullSnapshotRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<PullSnapshotResponse> | Observable<PullSnapshotResponse> | PullSnapshotResponse

  buildSnapshot(
    request: BuildSnapshotRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<BuildSnapshotResponse> | Observable<BuildSnapshotResponse> | BuildSnapshotResponse

  snapshotExists(
    request: SnapshotExistsRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<SnapshotExistsResponse> | Observable<SnapshotExistsResponse> | SnapshotExistsResponse

  removeSnapshot(
    request: RemoveSnapshotRequest,
    metadata: Metadata,
    ...rest: any
  ): Promise<RemoveSnapshotResponse> | Observable<RemoveSnapshotResponse> | RemoveSnapshotResponse

  getSnapshotLogs(
    request: GetSnapshotLogsRequest,
    metadata: Metadata,
    ...rest: any
  ): Observable<GetSnapshotLogsResponse>
}

export function SnapshotServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'pullSnapshot',
      'buildSnapshot',
      'snapshotExists',
      'removeSnapshot',
      'getSnapshotLogs',
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcMethod('SnapshotService', method)(constructor.prototype[method], method, descriptor)
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method)
      GrpcStreamMethod('SnapshotService', method)(constructor.prototype[method], method, descriptor)
    }
  }
}

export const SNAPSHOT_SERVICE_NAME = 'SnapshotService'
