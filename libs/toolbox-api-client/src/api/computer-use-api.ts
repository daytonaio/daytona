/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Daemon API
 * Daytona Daemon API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { ComputerUseStartResponse } from '../models'
// @ts-ignore
import type { ComputerUseStatusResponse } from '../models'
// @ts-ignore
import type { ComputerUseStopResponse } from '../models'
// @ts-ignore
import type { DisplayInfoResponse } from '../models'
// @ts-ignore
import type { KeyboardHotkeyRequest } from '../models'
// @ts-ignore
import type { KeyboardPressRequest } from '../models'
// @ts-ignore
import type { KeyboardTypeRequest } from '../models'
// @ts-ignore
import type { MouseClickRequest } from '../models'
// @ts-ignore
import type { MouseClickResponse } from '../models'
// @ts-ignore
import type { MouseDragRequest } from '../models'
// @ts-ignore
import type { MouseDragResponse } from '../models'
// @ts-ignore
import type { MouseMoveRequest } from '../models'
// @ts-ignore
import type { MousePositionResponse } from '../models'
// @ts-ignore
import type { MouseScrollRequest } from '../models'
// @ts-ignore
import type { ProcessErrorsResponse } from '../models'
// @ts-ignore
import type { ProcessLogsResponse } from '../models'
// @ts-ignore
import type { ProcessRestartResponse } from '../models'
// @ts-ignore
import type { ProcessStatusResponse } from '../models'
// @ts-ignore
import type { ScreenshotResponse } from '../models'
// @ts-ignore
import type { ScrollResponse } from '../models'
// @ts-ignore
import type { WindowsResponse } from '../models'
/**
 * ComputerUseApi - axios parameter creator
 * @export
 */
export const ComputerUseApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Click the mouse button at the specified coordinates
     * @summary Click mouse button
     * @param {MouseClickRequest} request Mouse click request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    click: async (request: MouseClickRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('click', 'request', request)
      const localVarPath = `/computeruse/mouse/click`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Drag the mouse from start to end coordinates
     * @summary Drag mouse
     * @param {MouseDragRequest} request Mouse drag request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drag: async (request: MouseDragRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('drag', 'request', request)
      const localVarPath = `/computeruse/mouse/drag`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get the status of all computer use processes
     * @summary Get computer use process status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/process-status`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get the current status of the computer use system
     * @summary Get computer use status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseSystemStatus: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/status`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get information about all available displays
     * @summary Get display information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisplayInfo: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/display/info`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get the current mouse cursor position
     * @summary Get mouse position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMousePosition: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/mouse/position`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get errors for a specific computer use process
     * @summary Get process errors
     * @param {string} processName Process name to get errors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessErrors: async (processName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessErrors', 'processName', processName)
      const localVarPath = `/computeruse/process/{processName}/errors`.replace(
        `{${'processName'}}`,
        encodeURIComponent(String(processName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get logs for a specific computer use process
     * @summary Get process logs
     * @param {string} processName Process name to get logs for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessLogs: async (processName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessLogs', 'processName', processName)
      const localVarPath = `/computeruse/process/{processName}/logs`.replace(
        `{${'processName'}}`,
        encodeURIComponent(String(processName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Check if a specific computer use process is running
     * @summary Get specific process status
     * @param {string} processName Process name to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessStatus: async (processName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('getProcessStatus', 'processName', processName)
      const localVarPath = `/computeruse/process/{processName}/status`.replace(
        `{${'processName'}}`,
        encodeURIComponent(String(processName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get information about all open windows
     * @summary Get windows information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWindows: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/display/windows`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Move the mouse cursor to the specified coordinates
     * @summary Move mouse cursor
     * @param {MouseMoveRequest} request Mouse move request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveMouse: async (request: MouseMoveRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('moveMouse', 'request', request)
      const localVarPath = `/computeruse/mouse/move`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Press a hotkey combination (e.g., ctrl+c, cmd+v)
     * @summary Press hotkey
     * @param {KeyboardHotkeyRequest} request Hotkey press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressHotkey: async (request: KeyboardHotkeyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('pressHotkey', 'request', request)
      const localVarPath = `/computeruse/keyboard/hotkey`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {KeyboardPressRequest} request Key press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressKey: async (request: KeyboardPressRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('pressKey', 'request', request)
      const localVarPath = `/computeruse/keyboard/key`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Restart a specific computer use process
     * @summary Restart specific process
     * @param {string} processName Process name to restart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restartProcess: async (processName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'processName' is not null or undefined
      assertParamExists('restartProcess', 'processName', processName)
      const localVarPath = `/computeruse/process/{processName}/restart`.replace(
        `{${'processName'}}`,
        encodeURIComponent(String(processName)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Scroll the mouse wheel at the specified coordinates
     * @summary Scroll mouse wheel
     * @param {MouseScrollRequest} request Mouse scroll request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scroll: async (request: MouseScrollRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('scroll', 'request', request)
      const localVarPath = `/computeruse/mouse/scroll`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start all computer use processes and return their status
     * @summary Start computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startComputerUse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/start`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop all computer use processes and return their status
     * @summary Stop computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopComputerUse: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/stop`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a compressed screenshot of a specific region of the screen
     * @summary Take a compressed region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshot: async (
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'x' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshot', 'x', x)
      // verify required parameter 'y' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshot', 'y', y)
      // verify required parameter 'width' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshot', 'width', width)
      // verify required parameter 'height' is not null or undefined
      assertParamExists('takeCompressedRegionScreenshot', 'height', height)
      const localVarPath = `/computeruse/screenshot/region/compressed`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (x !== undefined) {
        localVarQueryParameter['x'] = x
      }

      if (y !== undefined) {
        localVarQueryParameter['y'] = y
      }

      if (width !== undefined) {
        localVarQueryParameter['width'] = width
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height
      }

      if (showCursor !== undefined) {
        localVarQueryParameter['showCursor'] = showCursor
      }

      if (format !== undefined) {
        localVarQueryParameter['format'] = format
      }

      if (quality !== undefined) {
        localVarQueryParameter['quality'] = quality
      }

      if (scale !== undefined) {
        localVarQueryParameter['scale'] = scale
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a compressed screenshot of the entire screen
     * @summary Take a compressed screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedScreenshot: async (
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/screenshot/compressed`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (showCursor !== undefined) {
        localVarQueryParameter['showCursor'] = showCursor
      }

      if (format !== undefined) {
        localVarQueryParameter['format'] = format
      }

      if (quality !== undefined) {
        localVarQueryParameter['quality'] = quality
      }

      if (scale !== undefined) {
        localVarQueryParameter['scale'] = scale
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a screenshot of a specific region of the screen
     * @summary Take a region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeRegionScreenshot: async (
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'x' is not null or undefined
      assertParamExists('takeRegionScreenshot', 'x', x)
      // verify required parameter 'y' is not null or undefined
      assertParamExists('takeRegionScreenshot', 'y', y)
      // verify required parameter 'width' is not null or undefined
      assertParamExists('takeRegionScreenshot', 'width', width)
      // verify required parameter 'height' is not null or undefined
      assertParamExists('takeRegionScreenshot', 'height', height)
      const localVarPath = `/computeruse/screenshot/region`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (x !== undefined) {
        localVarQueryParameter['x'] = x
      }

      if (y !== undefined) {
        localVarQueryParameter['y'] = y
      }

      if (width !== undefined) {
        localVarQueryParameter['width'] = width
      }

      if (height !== undefined) {
        localVarQueryParameter['height'] = height
      }

      if (showCursor !== undefined) {
        localVarQueryParameter['showCursor'] = showCursor
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Take a screenshot of the entire screen
     * @summary Take a screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeScreenshot: async (showCursor?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/computeruse/screenshot`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (showCursor !== undefined) {
        localVarQueryParameter['showCursor'] = showCursor
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Type text with optional delay between keystrokes
     * @summary Type text
     * @param {KeyboardTypeRequest} request Text typing request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeText: async (request: KeyboardTypeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('typeText', 'request', request)
      const localVarPath = `/computeruse/keyboard/type`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ComputerUseApi - functional programming interface
 * @export
 */
export const ComputerUseApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ComputerUseApiAxiosParamCreator(configuration)
  return {
    /**
     * Click the mouse button at the specified coordinates
     * @summary Click mouse button
     * @param {MouseClickRequest} request Mouse click request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async click(
      request: MouseClickRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseClickResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.click(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.click']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Drag the mouse from start to end coordinates
     * @summary Drag mouse
     * @param {MouseDragRequest} request Mouse drag request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drag(
      request: MouseDragRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MouseDragResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.drag(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.drag']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get the status of all computer use processes
     * @summary Get computer use process status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComputerUseStatus(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStatusResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComputerUseStatus(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getComputerUseStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get the current status of the computer use system
     * @summary Get computer use status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComputerUseSystemStatus(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStatusResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComputerUseSystemStatus(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getComputerUseSystemStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get information about all available displays
     * @summary Get display information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDisplayInfo(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DisplayInfoResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDisplayInfo(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getDisplayInfo']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get the current mouse cursor position
     * @summary Get mouse position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMousePosition(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MousePositionResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMousePosition(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getMousePosition']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get errors for a specific computer use process
     * @summary Get process errors
     * @param {string} processName Process name to get errors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProcessErrors(
      processName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessErrorsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessErrors(processName, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getProcessErrors']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get logs for a specific computer use process
     * @summary Get process logs
     * @param {string} processName Process name to get logs for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProcessLogs(
      processName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessLogsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessLogs(processName, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getProcessLogs']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Check if a specific computer use process is running
     * @summary Get specific process status
     * @param {string} processName Process name to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProcessStatus(
      processName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessStatusResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProcessStatus(processName, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getProcessStatus']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get information about all open windows
     * @summary Get windows information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getWindows(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WindowsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getWindows(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.getWindows']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Move the mouse cursor to the specified coordinates
     * @summary Move mouse cursor
     * @param {MouseMoveRequest} request Mouse move request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async moveMouse(
      request: MouseMoveRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MousePositionResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.moveMouse(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.moveMouse']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Press a hotkey combination (e.g., ctrl+c, cmd+v)
     * @summary Press hotkey
     * @param {KeyboardHotkeyRequest} request Hotkey press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pressHotkey(
      request: KeyboardHotkeyRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pressHotkey(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.pressHotkey']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {KeyboardPressRequest} request Key press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async pressKey(
      request: KeyboardPressRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.pressKey(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.pressKey']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Restart a specific computer use process
     * @summary Restart specific process
     * @param {string} processName Process name to restart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async restartProcess(
      processName: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcessRestartResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.restartProcess(processName, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.restartProcess']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Scroll the mouse wheel at the specified coordinates
     * @summary Scroll mouse wheel
     * @param {MouseScrollRequest} request Mouse scroll request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async scroll(
      request: MouseScrollRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScrollResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.scroll(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.scroll']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start all computer use processes and return their status
     * @summary Start computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async startComputerUse(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStartResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.startComputerUse(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.startComputerUse']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop all computer use processes and return their status
     * @summary Stop computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stopComputerUse(
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ComputerUseStopResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stopComputerUse(options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.stopComputerUse']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a compressed screenshot of a specific region of the screen
     * @summary Take a compressed region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async takeCompressedRegionScreenshot(
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedRegionScreenshot(
        x,
        y,
        width,
        height,
        showCursor,
        format,
        quality,
        scale,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.takeCompressedRegionScreenshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a compressed screenshot of the entire screen
     * @summary Take a compressed screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async takeCompressedScreenshot(
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeCompressedScreenshot(
        showCursor,
        format,
        quality,
        scale,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.takeCompressedScreenshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a screenshot of a specific region of the screen
     * @summary Take a region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async takeRegionScreenshot(
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeRegionScreenshot(
        x,
        y,
        width,
        height,
        showCursor,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.takeRegionScreenshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Take a screenshot of the entire screen
     * @summary Take a screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async takeScreenshot(
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenshotResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.takeScreenshot(showCursor, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.takeScreenshot']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Type text with optional delay between keystrokes
     * @summary Type text
     * @param {KeyboardTypeRequest} request Text typing request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async typeText(
      request: KeyboardTypeRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.typeText(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['ComputerUseApi.typeText']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * ComputerUseApi - factory interface
 * @export
 */
export const ComputerUseApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ComputerUseApiFp(configuration)
  return {
    /**
     * Click the mouse button at the specified coordinates
     * @summary Click mouse button
     * @param {MouseClickRequest} request Mouse click request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    click(request: MouseClickRequest, options?: RawAxiosRequestConfig): AxiosPromise<MouseClickResponse> {
      return localVarFp.click(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Drag the mouse from start to end coordinates
     * @summary Drag mouse
     * @param {MouseDragRequest} request Mouse drag request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drag(request: MouseDragRequest, options?: RawAxiosRequestConfig): AxiosPromise<MouseDragResponse> {
      return localVarFp.drag(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Get the status of all computer use processes
     * @summary Get computer use process status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseStatus(options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStatusResponse> {
      return localVarFp.getComputerUseStatus(options).then((request) => request(axios, basePath))
    },
    /**
     * Get the current status of the computer use system
     * @summary Get computer use status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComputerUseSystemStatus(options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStatusResponse> {
      return localVarFp.getComputerUseSystemStatus(options).then((request) => request(axios, basePath))
    },
    /**
     * Get information about all available displays
     * @summary Get display information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDisplayInfo(options?: RawAxiosRequestConfig): AxiosPromise<DisplayInfoResponse> {
      return localVarFp.getDisplayInfo(options).then((request) => request(axios, basePath))
    },
    /**
     * Get the current mouse cursor position
     * @summary Get mouse position
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMousePosition(options?: RawAxiosRequestConfig): AxiosPromise<MousePositionResponse> {
      return localVarFp.getMousePosition(options).then((request) => request(axios, basePath))
    },
    /**
     * Get errors for a specific computer use process
     * @summary Get process errors
     * @param {string} processName Process name to get errors for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessErrors(processName: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessErrorsResponse> {
      return localVarFp.getProcessErrors(processName, options).then((request) => request(axios, basePath))
    },
    /**
     * Get logs for a specific computer use process
     * @summary Get process logs
     * @param {string} processName Process name to get logs for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessLogs(processName: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessLogsResponse> {
      return localVarFp.getProcessLogs(processName, options).then((request) => request(axios, basePath))
    },
    /**
     * Check if a specific computer use process is running
     * @summary Get specific process status
     * @param {string} processName Process name to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProcessStatus(processName: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessStatusResponse> {
      return localVarFp.getProcessStatus(processName, options).then((request) => request(axios, basePath))
    },
    /**
     * Get information about all open windows
     * @summary Get windows information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWindows(options?: RawAxiosRequestConfig): AxiosPromise<WindowsResponse> {
      return localVarFp.getWindows(options).then((request) => request(axios, basePath))
    },
    /**
     * Move the mouse cursor to the specified coordinates
     * @summary Move mouse cursor
     * @param {MouseMoveRequest} request Mouse move request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    moveMouse(request: MouseMoveRequest, options?: RawAxiosRequestConfig): AxiosPromise<MousePositionResponse> {
      return localVarFp.moveMouse(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Press a hotkey combination (e.g., ctrl+c, cmd+v)
     * @summary Press hotkey
     * @param {KeyboardHotkeyRequest} request Hotkey press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressHotkey(request: KeyboardHotkeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.pressHotkey(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Press a key with optional modifiers
     * @summary Press key
     * @param {KeyboardPressRequest} request Key press request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pressKey(request: KeyboardPressRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.pressKey(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Restart a specific computer use process
     * @summary Restart specific process
     * @param {string} processName Process name to restart
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    restartProcess(processName: string, options?: RawAxiosRequestConfig): AxiosPromise<ProcessRestartResponse> {
      return localVarFp.restartProcess(processName, options).then((request) => request(axios, basePath))
    },
    /**
     * Scroll the mouse wheel at the specified coordinates
     * @summary Scroll mouse wheel
     * @param {MouseScrollRequest} request Mouse scroll request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    scroll(request: MouseScrollRequest, options?: RawAxiosRequestConfig): AxiosPromise<ScrollResponse> {
      return localVarFp.scroll(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Start all computer use processes and return their status
     * @summary Start computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startComputerUse(options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStartResponse> {
      return localVarFp.startComputerUse(options).then((request) => request(axios, basePath))
    },
    /**
     * Stop all computer use processes and return their status
     * @summary Stop computer use processes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stopComputerUse(options?: RawAxiosRequestConfig): AxiosPromise<ComputerUseStopResponse> {
      return localVarFp.stopComputerUse(options).then((request) => request(axios, basePath))
    },
    /**
     * Take a compressed screenshot of a specific region of the screen
     * @summary Take a compressed region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedRegionScreenshot(
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ScreenshotResponse> {
      return localVarFp
        .takeCompressedRegionScreenshot(x, y, width, height, showCursor, format, quality, scale, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a compressed screenshot of the entire screen
     * @summary Take a compressed screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {string} [format] Image format (png or jpeg)
     * @param {number} [quality] JPEG quality (1-100)
     * @param {number} [scale] Scale factor (0.1-1.0)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeCompressedScreenshot(
      showCursor?: boolean,
      format?: string,
      quality?: number,
      scale?: number,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ScreenshotResponse> {
      return localVarFp
        .takeCompressedScreenshot(showCursor, format, quality, scale, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a screenshot of a specific region of the screen
     * @summary Take a region screenshot
     * @param {number} x X coordinate of the region
     * @param {number} y Y coordinate of the region
     * @param {number} width Width of the region
     * @param {number} height Height of the region
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeRegionScreenshot(
      x: number,
      y: number,
      width: number,
      height: number,
      showCursor?: boolean,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ScreenshotResponse> {
      return localVarFp
        .takeRegionScreenshot(x, y, width, height, showCursor, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Take a screenshot of the entire screen
     * @summary Take a screenshot
     * @param {boolean} [showCursor] Whether to show cursor in screenshot
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    takeScreenshot(showCursor?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<ScreenshotResponse> {
      return localVarFp.takeScreenshot(showCursor, options).then((request) => request(axios, basePath))
    },
    /**
     * Type text with optional delay between keystrokes
     * @summary Type text
     * @param {KeyboardTypeRequest} request Text typing request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    typeText(request: KeyboardTypeRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
      return localVarFp.typeText(request, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * ComputerUseApi - object-oriented interface
 * @export
 * @class ComputerUseApi
 * @extends {BaseAPI}
 */
export class ComputerUseApi extends BaseAPI {
  /**
   * Click the mouse button at the specified coordinates
   * @summary Click mouse button
   * @param {MouseClickRequest} request Mouse click request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public click(request: MouseClickRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .click(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Drag the mouse from start to end coordinates
   * @summary Drag mouse
   * @param {MouseDragRequest} request Mouse drag request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public drag(request: MouseDragRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .drag(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get the status of all computer use processes
   * @summary Get computer use process status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getComputerUseStatus(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getComputerUseStatus(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get the current status of the computer use system
   * @summary Get computer use status
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getComputerUseSystemStatus(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getComputerUseSystemStatus(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get information about all available displays
   * @summary Get display information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getDisplayInfo(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getDisplayInfo(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get the current mouse cursor position
   * @summary Get mouse position
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getMousePosition(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getMousePosition(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get errors for a specific computer use process
   * @summary Get process errors
   * @param {string} processName Process name to get errors for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getProcessErrors(processName: string, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getProcessErrors(processName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get logs for a specific computer use process
   * @summary Get process logs
   * @param {string} processName Process name to get logs for
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getProcessLogs(processName: string, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getProcessLogs(processName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Check if a specific computer use process is running
   * @summary Get specific process status
   * @param {string} processName Process name to check
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getProcessStatus(processName: string, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getProcessStatus(processName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get information about all open windows
   * @summary Get windows information
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public getWindows(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .getWindows(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Move the mouse cursor to the specified coordinates
   * @summary Move mouse cursor
   * @param {MouseMoveRequest} request Mouse move request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public moveMouse(request: MouseMoveRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .moveMouse(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Press a hotkey combination (e.g., ctrl+c, cmd+v)
   * @summary Press hotkey
   * @param {KeyboardHotkeyRequest} request Hotkey press request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public pressHotkey(request: KeyboardHotkeyRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .pressHotkey(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Press a key with optional modifiers
   * @summary Press key
   * @param {KeyboardPressRequest} request Key press request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public pressKey(request: KeyboardPressRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .pressKey(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Restart a specific computer use process
   * @summary Restart specific process
   * @param {string} processName Process name to restart
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public restartProcess(processName: string, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .restartProcess(processName, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Scroll the mouse wheel at the specified coordinates
   * @summary Scroll mouse wheel
   * @param {MouseScrollRequest} request Mouse scroll request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public scroll(request: MouseScrollRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .scroll(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start all computer use processes and return their status
   * @summary Start computer use processes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public startComputerUse(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .startComputerUse(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop all computer use processes and return their status
   * @summary Stop computer use processes
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public stopComputerUse(options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .stopComputerUse(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a compressed screenshot of a specific region of the screen
   * @summary Take a compressed region screenshot
   * @param {number} x X coordinate of the region
   * @param {number} y Y coordinate of the region
   * @param {number} width Width of the region
   * @param {number} height Height of the region
   * @param {boolean} [showCursor] Whether to show cursor in screenshot
   * @param {string} [format] Image format (png or jpeg)
   * @param {number} [quality] JPEG quality (1-100)
   * @param {number} [scale] Scale factor (0.1-1.0)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public takeCompressedRegionScreenshot(
    x: number,
    y: number,
    width: number,
    height: number,
    showCursor?: boolean,
    format?: string,
    quality?: number,
    scale?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ComputerUseApiFp(this.configuration)
      .takeCompressedRegionScreenshot(x, y, width, height, showCursor, format, quality, scale, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a compressed screenshot of the entire screen
   * @summary Take a compressed screenshot
   * @param {boolean} [showCursor] Whether to show cursor in screenshot
   * @param {string} [format] Image format (png or jpeg)
   * @param {number} [quality] JPEG quality (1-100)
   * @param {number} [scale] Scale factor (0.1-1.0)
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public takeCompressedScreenshot(
    showCursor?: boolean,
    format?: string,
    quality?: number,
    scale?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ComputerUseApiFp(this.configuration)
      .takeCompressedScreenshot(showCursor, format, quality, scale, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a screenshot of a specific region of the screen
   * @summary Take a region screenshot
   * @param {number} x X coordinate of the region
   * @param {number} y Y coordinate of the region
   * @param {number} width Width of the region
   * @param {number} height Height of the region
   * @param {boolean} [showCursor] Whether to show cursor in screenshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public takeRegionScreenshot(
    x: number,
    y: number,
    width: number,
    height: number,
    showCursor?: boolean,
    options?: RawAxiosRequestConfig,
  ) {
    return ComputerUseApiFp(this.configuration)
      .takeRegionScreenshot(x, y, width, height, showCursor, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Take a screenshot of the entire screen
   * @summary Take a screenshot
   * @param {boolean} [showCursor] Whether to show cursor in screenshot
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public takeScreenshot(showCursor?: boolean, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .takeScreenshot(showCursor, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Type text with optional delay between keystrokes
   * @summary Type text
   * @param {KeyboardTypeRequest} request Text typing request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ComputerUseApi
   */
  public typeText(request: KeyboardTypeRequest, options?: RawAxiosRequestConfig) {
    return ComputerUseApiFp(this.configuration)
      .typeText(request, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
