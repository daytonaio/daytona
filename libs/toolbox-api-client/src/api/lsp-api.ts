/* tslint:disable */
/* eslint-disable */
/**
 * Daytona Daemon API
 * Daytona Daemon API
 *
 * The version of the OpenAPI document: v0.0.0-dev
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from '../configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base'
// @ts-ignore
import type { CompletionList } from '../models'
// @ts-ignore
import type { LspCompletionParams } from '../models'
// @ts-ignore
import type { LspDocumentRequest } from '../models'
// @ts-ignore
import type { LspServerRequest } from '../models'
// @ts-ignore
import type { LspSymbol } from '../models'
/**
 * LspApi - axios parameter creator
 * @export
 */
export const LspApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get code completion suggestions from the LSP server
     * @summary Get code completions
     * @param {LspCompletionParams} request Completion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completions: async (request: LspCompletionParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('completions', 'request', request)
      const localVarPath = `/lsp/completions`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Notify the LSP server that a document has been closed
     * @summary Notify document closed
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    didClose: async (request: LspDocumentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('didClose', 'request', request)
      const localVarPath = `/lsp/did-close`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Notify the LSP server that a document has been opened
     * @summary Notify document opened
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    didOpen: async (request: LspDocumentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('didOpen', 'request', request)
      const localVarPath = `/lsp/did-open`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Get symbols (functions, classes, etc.) from a document
     * @summary Get document symbols
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {string} uri Document URI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    documentSymbols: async (
      languageId: string,
      pathToProject: string,
      uri: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('documentSymbols', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('documentSymbols', 'pathToProject', pathToProject)
      // verify required parameter 'uri' is not null or undefined
      assertParamExists('documentSymbols', 'uri', uri)
      const localVarPath = `/lsp/document-symbols`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      if (uri !== undefined) {
        localVarQueryParameter['uri'] = uri
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Start a Language Server Protocol server for the specified language
     * @summary Start LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start: async (request: LspServerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('start', 'request', request)
      const localVarPath = `/lsp/start`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Stop a Language Server Protocol server
     * @summary Stop LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop: async (request: LspServerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'request' is not null or undefined
      assertParamExists('stop', 'request', request)
      const localVarPath = `/lsp/stop`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Search for symbols across the entire workspace
     * @summary Get workspace symbols
     * @param {string} query Search query
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceSymbols: async (
      query: string,
      languageId: string,
      pathToProject: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'query' is not null or undefined
      assertParamExists('workspaceSymbols', 'query', query)
      // verify required parameter 'languageId' is not null or undefined
      assertParamExists('workspaceSymbols', 'languageId', languageId)
      // verify required parameter 'pathToProject' is not null or undefined
      assertParamExists('workspaceSymbols', 'pathToProject', pathToProject)
      const localVarPath = `/lsp/workspacesymbols`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (query !== undefined) {
        localVarQueryParameter['query'] = query
      }

      if (languageId !== undefined) {
        localVarQueryParameter['languageId'] = languageId
      }

      if (pathToProject !== undefined) {
        localVarQueryParameter['pathToProject'] = pathToProject
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LspApi - functional programming interface
 * @export
 */
export const LspApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LspApiAxiosParamCreator(configuration)
  return {
    /**
     * Get code completion suggestions from the LSP server
     * @summary Get code completions
     * @param {LspCompletionParams} request Completion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async completions(
      request: LspCompletionParams,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompletionList>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.completions(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LspApi.completions']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Notify the LSP server that a document has been closed
     * @summary Notify document closed
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async didClose(
      request: LspDocumentRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.didClose(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['LspApi.didClose']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Notify the LSP server that a document has been opened
     * @summary Notify document opened
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async didOpen(
      request: LspDocumentRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.didOpen(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['LspApi.didOpen']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Get symbols (functions, classes, etc.) from a document
     * @summary Get document symbols
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {string} uri Document URI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async documentSymbols(
      languageId: string,
      pathToProject: string,
      uri: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.documentSymbols(languageId, pathToProject, uri, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LspApi.documentSymbols']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Start a Language Server Protocol server for the specified language
     * @summary Start LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async start(
      request: LspServerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.start(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['LspApi.start']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Stop a Language Server Protocol server
     * @summary Stop LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async stop(
      request: LspServerRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.stop(request, options)
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath = operationServerMap['LspApi.stop']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
    /**
     * Search for symbols across the entire workspace
     * @summary Get workspace symbols
     * @param {string} query Search query
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async workspaceSymbols(
      query: string,
      languageId: string,
      pathToProject: string,
      options?: RawAxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LspSymbol>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.workspaceSymbols(
        query,
        languageId,
        pathToProject,
        options,
      )
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0
      const localVarOperationServerBasePath =
        operationServerMap['LspApi.workspaceSymbols']?.[localVarOperationServerIndex]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath)
    },
  }
}

/**
 * LspApi - factory interface
 * @export
 */
export const LspApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = LspApiFp(configuration)
  return {
    /**
     * Get code completion suggestions from the LSP server
     * @summary Get code completions
     * @param {LspCompletionParams} request Completion request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completions(request: LspCompletionParams, options?: RawAxiosRequestConfig): AxiosPromise<CompletionList> {
      return localVarFp.completions(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Notify the LSP server that a document has been closed
     * @summary Notify document closed
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    didClose(request: LspDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.didClose(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Notify the LSP server that a document has been opened
     * @summary Notify document opened
     * @param {LspDocumentRequest} request Document request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    didOpen(request: LspDocumentRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.didOpen(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Get symbols (functions, classes, etc.) from a document
     * @summary Get document symbols
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {string} uri Document URI
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    documentSymbols(
      languageId: string,
      pathToProject: string,
      uri: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .documentSymbols(languageId, pathToProject, uri, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Start a Language Server Protocol server for the specified language
     * @summary Start LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    start(request: LspServerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.start(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Stop a Language Server Protocol server
     * @summary Stop LSP server
     * @param {LspServerRequest} request LSP server request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    stop(request: LspServerRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp.stop(request, options).then((request) => request(axios, basePath))
    },
    /**
     * Search for symbols across the entire workspace
     * @summary Get workspace symbols
     * @param {string} query Search query
     * @param {string} languageId Language ID (e.g., python, typescript)
     * @param {string} pathToProject Path to project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    workspaceSymbols(
      query: string,
      languageId: string,
      pathToProject: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LspSymbol>> {
      return localVarFp
        .workspaceSymbols(query, languageId, pathToProject, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * LspApi - object-oriented interface
 * @export
 * @class LspApi
 * @extends {BaseAPI}
 */
export class LspApi extends BaseAPI {
  /**
   * Get code completion suggestions from the LSP server
   * @summary Get code completions
   * @param {LspCompletionParams} request Completion request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public completions(request: LspCompletionParams, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .completions(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Notify the LSP server that a document has been closed
   * @summary Notify document closed
   * @param {LspDocumentRequest} request Document request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public didClose(request: LspDocumentRequest, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .didClose(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Notify the LSP server that a document has been opened
   * @summary Notify document opened
   * @param {LspDocumentRequest} request Document request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public didOpen(request: LspDocumentRequest, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .didOpen(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Get symbols (functions, classes, etc.) from a document
   * @summary Get document symbols
   * @param {string} languageId Language ID (e.g., python, typescript)
   * @param {string} pathToProject Path to project
   * @param {string} uri Document URI
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public documentSymbols(languageId: string, pathToProject: string, uri: string, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .documentSymbols(languageId, pathToProject, uri, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Start a Language Server Protocol server for the specified language
   * @summary Start LSP server
   * @param {LspServerRequest} request LSP server request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public start(request: LspServerRequest, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .start(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Stop a Language Server Protocol server
   * @summary Stop LSP server
   * @param {LspServerRequest} request LSP server request
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public stop(request: LspServerRequest, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .stop(request, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Search for symbols across the entire workspace
   * @summary Get workspace symbols
   * @param {string} query Search query
   * @param {string} languageId Language ID (e.g., python, typescript)
   * @param {string} pathToProject Path to project
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LspApi
   */
  public workspaceSymbols(query: string, languageId: string, pathToProject: string, options?: RawAxiosRequestConfig) {
    return LspApiFp(this.configuration)
      .workspaceSymbols(query, languageId, pathToProject, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
