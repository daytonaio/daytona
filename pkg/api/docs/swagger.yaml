basePath: /
definitions:
  AddTargetConfigDTO:
    properties:
      name:
        type: string
      options:
        type: string
      providerInfo:
        $ref: '#/definitions/TargetProviderInfo'
    required:
    - name
    - options
    - providerInfo
    type: object
  ApiKey:
    properties:
      keyHash:
        type: string
      name:
        description: Workspace or client name
        type: string
      type:
        $ref: '#/definitions/models.ApiKeyType'
    required:
    - keyHash
    - name
    - type
    type: object
  Build:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      containerConfig:
        $ref: '#/definitions/ContainerConfig'
      createdAt:
        type: string
      envVars:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      image:
        type: string
      prebuildId:
        type: string
      repository:
        $ref: '#/definitions/GitRepository'
      state:
        $ref: '#/definitions/models.BuildState'
      updatedAt:
        type: string
      user:
        type: string
    required:
    - containerConfig
    - createdAt
    - envVars
    - id
    - prebuildId
    - repository
    - state
    - updatedAt
    type: object
  BuildConfig:
    properties:
      cachedBuild:
        $ref: '#/definitions/CachedBuild'
      devcontainer:
        $ref: '#/definitions/DevcontainerConfig'
    type: object
  CachedBuild:
    properties:
      image:
        type: string
      user:
        type: string
    required:
    - image
    - user
    type: object
  CloneTarget:
    enum:
    - branch
    - commit
    type: string
    x-enum-varnames:
    - CloneTargetBranch
    - CloneTargetCommit
  ContainerConfig:
    properties:
      image:
        type: string
      user:
        type: string
    required:
    - image
    - user
    type: object
  ContainerRegistry:
    properties:
      password:
        type: string
      server:
        type: string
      username:
        type: string
    required:
    - password
    - server
    - username
    type: object
  CreateBuildDTO:
    properties:
      branch:
        type: string
      envVars:
        additionalProperties:
          type: string
        type: object
      prebuildId:
        type: string
      workspaceTemplateName:
        type: string
    required:
    - branch
    - envVars
    - workspaceTemplateName
    type: object
  CreatePrebuildDTO:
    properties:
      branch:
        type: string
      commitInterval:
        type: integer
      id:
        type: string
      retention:
        type: integer
      triggerFiles:
        items:
          type: string
        type: array
    required:
    - retention
    type: object
  CreateTargetDTO:
    properties:
      id:
        type: string
      name:
        type: string
      targetConfigName:
        type: string
    required:
    - id
    - name
    - targetConfigName
    type: object
  CreateWorkspaceDTO:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      envVars:
        additionalProperties:
          type: string
        type: object
      gitProviderConfigId:
        type: string
      id:
        type: string
      image:
        type: string
      name:
        type: string
      source:
        $ref: '#/definitions/CreateWorkspaceSourceDTO'
      targetId:
        type: string
      user:
        type: string
    required:
    - envVars
    - id
    - name
    - source
    - targetId
    type: object
  CreateWorkspaceSourceDTO:
    properties:
      repository:
        $ref: '#/definitions/GitRepository'
    required:
    - repository
    type: object
  CreateWorkspaceTemplateDTO:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      envVars:
        additionalProperties:
          type: string
        type: object
      gitProviderConfigId:
        type: string
      image:
        type: string
      name:
        type: string
      repositoryUrl:
        type: string
      user:
        type: string
    required:
    - envVars
    - name
    - repositoryUrl
    type: object
  DevcontainerConfig:
    properties:
      filePath:
        type: string
    required:
    - filePath
    type: object
  EnvironmentVariable:
    properties:
      key:
        type: string
      value:
        type: string
    required:
    - key
    - value
    type: object
  FRPSConfig:
    properties:
      domain:
        type: string
      port:
        type: integer
      protocol:
        type: string
    required:
    - domain
    - port
    - protocol
    type: object
  FileStatus:
    properties:
      extra:
        type: string
      name:
        type: string
      staging:
        $ref: '#/definitions/Status'
      worktree:
        $ref: '#/definitions/Status'
    required:
    - extra
    - name
    - staging
    - worktree
    type: object
  GetRepositoryContext:
    properties:
      branch:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      path:
        type: string
      prNumber:
        type: integer
      sha:
        type: string
      source:
        type: string
      url:
        type: string
    required:
    - url
    type: object
  GitBranch:
    properties:
      name:
        type: string
      sha:
        type: string
    required:
    - name
    - sha
    type: object
  GitNamespace:
    properties:
      id:
        type: string
      name:
        type: string
    required:
    - id
    - name
    type: object
  GitProvider:
    properties:
      alias:
        type: string
      baseApiUrl:
        type: string
      id:
        type: string
      providerId:
        type: string
      signingKey:
        type: string
      signingMethod:
        $ref: '#/definitions/SigningMethod'
      token:
        type: string
      username:
        type: string
    required:
    - alias
    - id
    - providerId
    - token
    - username
    type: object
  GitPullRequest:
    properties:
      branch:
        type: string
      name:
        type: string
      sha:
        type: string
      sourceRepoId:
        type: string
      sourceRepoName:
        type: string
      sourceRepoOwner:
        type: string
      sourceRepoUrl:
        type: string
    required:
    - branch
    - name
    - sha
    - sourceRepoId
    - sourceRepoName
    - sourceRepoOwner
    - sourceRepoUrl
    type: object
  GitRepository:
    properties:
      branch:
        type: string
      cloneTarget:
        $ref: '#/definitions/CloneTarget'
      id:
        type: string
      name:
        type: string
      owner:
        type: string
      path:
        type: string
      prNumber:
        type: integer
      sha:
        type: string
      source:
        type: string
      url:
        type: string
    required:
    - branch
    - id
    - name
    - owner
    - sha
    - source
    - url
    type: object
  GitStatus:
    properties:
      ahead:
        type: integer
      behind:
        type: integer
      branchPublished:
        type: boolean
      currentBranch:
        type: string
      fileStatus:
        items:
          $ref: '#/definitions/FileStatus'
        type: array
    required:
    - currentBranch
    - fileStatus
    type: object
  GitUser:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      username:
        type: string
    required:
    - email
    - id
    - name
    - username
    type: object
  InstallProviderRequest:
    properties:
      downloadUrls:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    required:
    - downloadUrls
    - name
    type: object
  Job:
    properties:
      action:
        $ref: '#/definitions/models.JobAction'
      createdAt:
        type: string
      error:
        type: string
      id:
        type: string
      resourceId:
        type: string
      resourceType:
        $ref: '#/definitions/ResourceType'
      state:
        $ref: '#/definitions/JobState'
      updatedAt:
        type: string
    required:
    - action
    - createdAt
    - id
    - resourceId
    - resourceType
    - state
    - updatedAt
    type: object
  JobState:
    enum:
    - pending
    - running
    - error
    - success
    type: string
    x-enum-varnames:
    - JobStatePending
    - JobStateRunning
    - JobStateError
    - JobStateSuccess
  LogFileConfig:
    properties:
      compress:
        type: boolean
      localTime:
        type: boolean
      maxAge:
        type: integer
      maxBackups:
        type: integer
      maxSize:
        type: integer
      path:
        type: string
    required:
    - maxAge
    - maxBackups
    - maxSize
    - path
    type: object
  NetworkKey:
    properties:
      key:
        type: string
    required:
    - key
    type: object
  PrebuildConfig:
    properties:
      branch:
        type: string
      commitInterval:
        type: integer
      id:
        type: string
      retention:
        type: integer
      triggerFiles:
        items:
          type: string
        type: array
    required:
    - branch
    - commitInterval
    - id
    - retention
    - triggerFiles
    type: object
  PrebuildDTO:
    properties:
      branch:
        type: string
      commitInterval:
        type: integer
      id:
        type: string
      retention:
        type: integer
      triggerFiles:
        items:
          type: string
        type: array
      workspaceTemplateName:
        type: string
    required:
    - branch
    - id
    - retention
    - workspaceTemplateName
    type: object
  Provider:
    properties:
      label:
        type: string
      name:
        type: string
      version:
        type: string
    required:
    - name
    - version
    type: object
  RepositoryUrl:
    properties:
      url:
        type: string
    required:
    - url
    type: object
  ResourceState:
    properties:
      error:
        type: string
      name:
        $ref: '#/definitions/models.ResourceStateName'
      updatedAt:
        type: string
    required:
    - name
    - updatedAt
    type: object
  ResourceType:
    enum:
    - workspace
    - target
    type: string
    x-enum-varnames:
    - ResourceTypeWorkspace
    - ResourceTypeTarget
  Sample:
    properties:
      description:
        type: string
      gitUrl:
        type: string
      name:
        type: string
    required:
    - description
    - gitUrl
    - name
    type: object
  ServerConfig:
    properties:
      apiPort:
        type: integer
      binariesPath:
        type: string
      buildImageNamespace:
        type: string
      builderImage:
        type: string
      builderRegistryServer:
        type: string
      defaultWorkspaceImage:
        type: string
      defaultWorkspaceUser:
        type: string
      frps:
        $ref: '#/definitions/FRPSConfig'
      headscalePort:
        type: integer
      id:
        type: string
      localBuilderRegistryImage:
        type: string
      localBuilderRegistryPort:
        type: integer
      logFile:
        $ref: '#/definitions/LogFileConfig'
      providersDir:
        type: string
      registryUrl:
        type: string
      samplesIndexUrl:
        type: string
      serverDownloadUrl:
        type: string
    required:
    - apiPort
    - binariesPath
    - builderImage
    - builderRegistryServer
    - defaultWorkspaceImage
    - defaultWorkspaceUser
    - headscalePort
    - id
    - localBuilderRegistryImage
    - localBuilderRegistryPort
    - logFile
    - providersDir
    - registryUrl
    - serverDownloadUrl
    type: object
  SetGitProviderConfig:
    properties:
      alias:
        type: string
      baseApiUrl:
        type: string
      id:
        type: string
      providerId:
        type: string
      signingKey:
        type: string
      signingMethod:
        $ref: '#/definitions/SigningMethod'
      token:
        type: string
      username:
        type: string
    required:
    - providerId
    - token
    type: object
  SetTargetMetadata:
    properties:
      uptime:
        type: integer
    required:
    - uptime
    type: object
  SetWorkspaceMetadata:
    properties:
      gitStatus:
        $ref: '#/definitions/GitStatus'
      uptime:
        type: integer
    required:
    - uptime
    type: object
  SigningMethod:
    enum:
    - ssh
    - gpg
    type: string
    x-enum-varnames:
    - SigningMethodSSH
    - SigningMethodGPG
  Status:
    enum:
    - Unmodified
    - Untracked
    - Modified
    - Added
    - Deleted
    - Renamed
    - Copied
    - Updated but unmerged
    type: string
    x-enum-varnames:
    - Unmodified
    - Untracked
    - Modified
    - Added
    - Deleted
    - Renamed
    - Copied
    - UpdatedButUnmerged
  Target:
    properties:
      default:
        type: boolean
      envVars:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      lastJob:
        $ref: '#/definitions/Job'
      metadata:
        $ref: '#/definitions/TargetMetadata'
      name:
        type: string
      targetConfig:
        $ref: '#/definitions/TargetConfig'
      targetConfigId:
        type: string
      workspaces:
        items:
          $ref: '#/definitions/Workspace'
        type: array
    required:
    - default
    - envVars
    - id
    - name
    - targetConfig
    - targetConfigId
    type: object
  TargetConfig:
    properties:
      deleted:
        type: boolean
      id:
        type: string
      name:
        type: string
      options:
        description: JSON encoded map of options
        type: string
      providerInfo:
        $ref: '#/definitions/TargetProviderInfo'
    required:
    - deleted
    - id
    - name
    - options
    - providerInfo
    type: object
  TargetConfigManifest:
    additionalProperties:
      $ref: '#/definitions/TargetConfigProperty'
    type: object
  TargetConfigProperty:
    properties:
      defaultValue:
        description: |-
          DefaultValue is converted into the appropriate type based on the Type
          If the property is a FilePath, the DefaultValue is a path to a directory
        type: string
      description:
        description: Brief description of the property
        type: string
      disabledPredicate:
        description: |-
          A regex string matched with the name of the target config to determine if the property should be disabled
          If the regex matches the target config name, the property will be disabled
          E.g. "^local$" will disable the property for the local target
        type: string
      inputMasked:
        type: boolean
      options:
        description: Options is only used if the Type is TargetConfigPropertyTypeOption
        items:
          type: string
        type: array
      suggestions:
        description: Suggestions is an optional list of auto-complete values to assist
          the user while filling the field
        items:
          type: string
        type: array
      type:
        $ref: '#/definitions/provider.TargetConfigPropertyType'
    type: object
  TargetDTO:
    properties:
      default:
        type: boolean
      envVars:
        additionalProperties:
          type: string
        type: object
      id:
        type: string
      info:
        $ref: '#/definitions/TargetInfo'
      lastJob:
        $ref: '#/definitions/Job'
      metadata:
        $ref: '#/definitions/TargetMetadata'
      name:
        type: string
      state:
        $ref: '#/definitions/ResourceState'
      targetConfig:
        $ref: '#/definitions/TargetConfig'
      targetConfigId:
        type: string
      workspaces:
        items:
          $ref: '#/definitions/Workspace'
        type: array
    required:
    - default
    - envVars
    - id
    - name
    - state
    - targetConfig
    - targetConfigId
    type: object
  TargetInfo:
    properties:
      name:
        type: string
      providerMetadata:
        type: string
    required:
    - name
    type: object
  TargetMetadata:
    properties:
      targetId:
        type: string
      updatedAt:
        type: string
      uptime:
        type: integer
    required:
    - targetId
    - updatedAt
    - uptime
    type: object
  TargetProviderInfo:
    properties:
      label:
        type: string
      name:
        type: string
      version:
        type: string
    required:
    - name
    - version
    type: object
  Workspace:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      envVars:
        additionalProperties:
          type: string
        type: object
      gitProviderConfigId:
        type: string
      id:
        type: string
      image:
        type: string
      lastJob:
        $ref: '#/definitions/Job'
      metadata:
        $ref: '#/definitions/WorkspaceMetadata'
      name:
        type: string
      repository:
        $ref: '#/definitions/GitRepository'
      target:
        $ref: '#/definitions/Target'
      targetId:
        type: string
      user:
        type: string
    required:
    - envVars
    - id
    - image
    - name
    - repository
    - target
    - targetId
    - user
    type: object
  WorkspaceDTO:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      envVars:
        additionalProperties:
          type: string
        type: object
      gitProviderConfigId:
        type: string
      id:
        type: string
      image:
        type: string
      info:
        $ref: '#/definitions/WorkspaceInfo'
      lastJob:
        $ref: '#/definitions/Job'
      metadata:
        $ref: '#/definitions/WorkspaceMetadata'
      name:
        type: string
      repository:
        $ref: '#/definitions/GitRepository'
      state:
        $ref: '#/definitions/ResourceState'
      target:
        $ref: '#/definitions/Target'
      targetId:
        type: string
      user:
        type: string
    required:
    - envVars
    - id
    - image
    - name
    - repository
    - state
    - target
    - targetId
    - user
    type: object
  WorkspaceInfo:
    properties:
      created:
        type: string
      isRunning:
        type: boolean
      name:
        type: string
      providerMetadata:
        type: string
      targetId:
        type: string
    required:
    - created
    - isRunning
    - name
    - targetId
    type: object
  WorkspaceMetadata:
    properties:
      gitStatus:
        $ref: '#/definitions/GitStatus'
      updatedAt:
        type: string
      uptime:
        type: integer
      workspaceId:
        type: string
    required:
    - gitStatus
    - updatedAt
    - uptime
    - workspaceId
    type: object
  WorkspaceTemplate:
    properties:
      buildConfig:
        $ref: '#/definitions/BuildConfig'
      default:
        type: boolean
      envVars:
        additionalProperties:
          type: string
        type: object
      gitProviderConfigId:
        type: string
      image:
        type: string
      name:
        type: string
      prebuilds:
        items:
          $ref: '#/definitions/PrebuildConfig'
        type: array
      repositoryUrl:
        type: string
      user:
        type: string
    required:
    - default
    - envVars
    - image
    - name
    - repositoryUrl
    - user
    type: object
  models.ApiKeyType:
    enum:
    - client
    - workspace
    - target
    type: string
    x-enum-varnames:
    - ApiKeyTypeClient
    - ApiKeyTypeWorkspace
    - ApiKeyTypeTarget
  models.BuildState:
    enum:
    - pending-run
    - running
    - error
    - success
    - published
    - pending-delete
    - pending-forced-delete
    - deleting
    type: string
    x-enum-varnames:
    - BuildStatePendingRun
    - BuildStateRunning
    - BuildStateError
    - BuildStateSuccess
    - BuildStatePublished
    - BuildStatePendingDelete
    - BuildStatePendingForcedDelete
    - BuildStateDeleting
  models.JobAction:
    enum:
    - create
    - start
    - stop
    - restart
    - delete
    - force-delete
    type: string
    x-enum-varnames:
    - JobActionCreate
    - JobActionStart
    - JobActionStop
    - JobActionRestart
    - JobActionDelete
    - JobActionForceDelete
  models.ResourceStateName:
    enum:
    - undefined
    - pending-create
    - creating
    - pending-start
    - starting
    - started
    - pending-stop
    - stopping
    - stopped
    - pending-restart
    - error
    - unresponsive
    - pending-delete
    - pending-forced-delete
    - deleting
    - deleted
    type: string
    x-enum-varnames:
    - ResourceStateNameUndefined
    - ResourceStateNamePendingCreate
    - ResourceStateNameCreating
    - ResourceStateNamePendingStart
    - ResourceStateNameStarting
    - ResourceStateNameStarted
    - ResourceStateNamePendingStop
    - ResourceStateNameStopping
    - ResourceStateNameStopped
    - ResourceStateNamePendingRestart
    - ResourceStateNameError
    - ResourceStateNameUnresponsive
    - ResourceStateNamePendingDelete
    - ResourceStateNamePendingForcedDelete
    - ResourceStateNameDeleting
    - ResourceStateNameDeleted
  provider.TargetConfigPropertyType:
    enum:
    - string
    - option
    - boolean
    - int
    - float
    - file-path
    type: string
    x-enum-varnames:
    - TargetConfigPropertyTypeString
    - TargetConfigPropertyTypeOption
    - TargetConfigPropertyTypeBoolean
    - TargetConfigPropertyTypeInt
    - TargetConfigPropertyTypeFloat
    - TargetConfigPropertyTypeFilePath
host: localhost:3986
info:
  contact: {}
  description: Daytona Server API
  title: Daytona Server API
  version: v0.0.0-dev
paths:
  /apikey:
    get:
      description: List API keys
      operationId: ListClientApiKeys
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ApiKey'
            type: array
      summary: List API keys
      tags:
      - apiKey
  /apikey/{apiKeyName}:
    delete:
      description: Revoke API key
      operationId: RevokeApiKey
      parameters:
      - description: API key name
        in: path
        name: apiKeyName
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Revoke API key
      tags:
      - apiKey
    post:
      description: Generate an API key
      operationId: GenerateApiKey
      parameters:
      - description: API key name
        in: path
        name: apiKeyName
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Generate an API key
      tags:
      - apiKey
  /build:
    delete:
      description: Delete ALL builds
      operationId: DeleteAllBuilds
      parameters:
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete ALL builds
      tags:
      - build
    get:
      description: List builds
      operationId: ListBuilds
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Build'
            type: array
      summary: List builds
      tags:
      - build
    post:
      consumes:
      - application/json
      description: Create a build
      operationId: CreateBuild
      parameters:
      - description: Create Build DTO
        in: body
        name: createBuildDto
        required: true
        schema:
          $ref: '#/definitions/CreateBuildDTO'
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Create a build
      tags:
      - build
  /build/{buildId}:
    delete:
      description: Delete build
      operationId: DeleteBuild
      parameters:
      - description: Build ID
        in: path
        name: buildId
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete build
      tags:
      - build
    get:
      consumes:
      - application/json
      description: Get build data
      operationId: GetBuild
      parameters:
      - description: Build ID
        in: path
        name: buildId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Build'
      summary: Get build data
      tags:
      - build
  /build/prebuild/{prebuildId}:
    delete:
      description: Delete builds
      operationId: DeleteBuildsFromPrebuild
      parameters:
      - description: Prebuild ID
        in: path
        name: prebuildId
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete builds
      tags:
      - build
  /container-registry:
    get:
      description: List container registries
      operationId: ListContainerRegistries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ContainerRegistry'
            type: array
      summary: List container registries
      tags:
      - container-registry
  /container-registry/{server}:
    delete:
      description: Remove a container registry credentials
      operationId: RemoveContainerRegistry
      parameters:
      - description: Container Registry server name
        in: path
        name: server
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Remove a container registry credentials
      tags:
      - container-registry
    get:
      description: Get container registry credentials
      operationId: GetContainerRegistry
      parameters:
      - description: Container Registry server name
        in: path
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ContainerRegistry'
      summary: Get container registry credentials
      tags:
      - container-registry
    put:
      description: Set container registry credentials
      operationId: SetContainerRegistry
      parameters:
      - description: Container Registry server name
        in: path
        name: server
        required: true
        type: string
      - description: Container Registry credentials to set
        in: body
        name: containerRegistry
        required: true
        schema:
          $ref: '#/definitions/ContainerRegistry'
      responses:
        "201":
          description: Created
      summary: Set container registry credentials
      tags:
      - container-registry
  /env:
    get:
      description: List environment variables
      operationId: ListEnvironmentVariables
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/EnvironmentVariable'
            type: array
      summary: List environment variables
      tags:
      - envVar
    put:
      consumes:
      - application/json
      description: Set environment variable
      operationId: SetEnvironmentVariable
      parameters:
      - description: Environment Variable
        in: body
        name: environmentVariable
        required: true
        schema:
          $ref: '#/definitions/EnvironmentVariable'
      responses:
        "201":
          description: Created
      summary: Set environment variable
      tags:
      - envVar
  /env/{key}:
    delete:
      description: Delete environment variable
      operationId: DeleteEnvironmentVariable
      parameters:
      - description: Environment Variable Key
        in: path
        name: key
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Delete environment variable
      tags:
      - envVar
  /gitprovider:
    get:
      description: List Git providers
      operationId: ListGitProviders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitProvider'
            type: array
      summary: List Git providers
      tags:
      - gitProvider
    put:
      description: Set Git provider
      operationId: SetGitProvider
      parameters:
      - description: Git provider
        in: body
        name: gitProviderConfig
        required: true
        schema:
          $ref: '#/definitions/SetGitProviderConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Set Git provider
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}:
    delete:
      description: Remove Git provider
      operationId: RemoveGitProvider
      parameters:
      - description: Git provider
        in: path
        name: gitProviderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Remove Git provider
      tags:
      - gitProvider
    get:
      description: Get Git provider
      operationId: GetGitProvider
      parameters:
      - description: ID
        in: path
        name: gitProviderId
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GitProvider'
      summary: Get Git provider
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}/{namespaceId}/{repositoryId}/branches:
    get:
      description: Get Git repository branches
      operationId: GetRepoBranches
      parameters:
      - description: Git provider
        in: path
        name: gitProviderId
        required: true
        type: string
      - description: Namespace
        in: path
        name: namespaceId
        required: true
        type: string
      - description: Repository
        in: path
        name: repositoryId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitBranch'
            type: array
      summary: Get Git repository branches
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}/{namespaceId}/{repositoryId}/pull-requests:
    get:
      description: Get Git repository PRs
      operationId: GetRepoPRs
      parameters:
      - description: Git provider
        in: path
        name: gitProviderId
        required: true
        type: string
      - description: Namespace
        in: path
        name: namespaceId
        required: true
        type: string
      - description: Repository
        in: path
        name: repositoryId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitPullRequest'
            type: array
      summary: Get Git repository PRs
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}/{namespaceId}/repositories:
    get:
      description: Get Git repositories
      operationId: GetRepositories
      parameters:
      - description: Git provider
        in: path
        name: gitProviderId
        required: true
        type: string
      - description: Namespace
        in: path
        name: namespaceId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitRepository'
            type: array
      summary: Get Git repositories
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}/namespaces:
    get:
      description: Get Git namespaces
      operationId: GetNamespaces
      parameters:
      - description: Git provider
        in: path
        name: gitProviderId
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitNamespace'
            type: array
      summary: Get Git namespaces
      tags:
      - gitProvider
  /gitprovider/{gitProviderId}/user:
    get:
      description: Get Git context
      operationId: GetGitUser
      parameters:
      - description: Git Provider Id
        in: path
        name: gitProviderId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GitUser'
      summary: Get Git context
      tags:
      - gitProvider
  /gitprovider/context:
    post:
      description: Get Git context
      operationId: GetGitContext
      parameters:
      - description: Get repository context
        in: body
        name: repository
        required: true
        schema:
          $ref: '#/definitions/GetRepositoryContext'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GitRepository'
      summary: Get Git context
      tags:
      - gitProvider
  /gitprovider/context/url:
    post:
      description: Get URL from Git repository
      operationId: GetUrlFromRepository
      parameters:
      - description: Git repository
        in: body
        name: repository
        required: true
        schema:
          $ref: '#/definitions/GitRepository'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RepositoryUrl'
      summary: Get URL from Git repository
      tags:
      - gitProvider
  /gitprovider/for-url/{url}:
    get:
      description: List Git providers for url
      operationId: ListGitProvidersForUrl
      parameters:
      - description: Url
        in: path
        name: url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/GitProvider'
            type: array
      summary: List Git providers for url
      tags:
      - gitProvider
  /gitprovider/id-for-url/{url}:
    get:
      description: Get Git provider ID
      operationId: GetGitProviderIdForUrl
      parameters:
      - description: Url
        in: path
        name: url
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Get Git provider ID
      tags:
      - gitProvider
  /health:
    get:
      description: Health check
      operationId: HealthCheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Health check
  /job:
    get:
      description: List jobs
      operationId: ListJobs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Job'
            type: array
      summary: List jobs
      tags:
      - job
  /provider:
    get:
      description: List providers
      operationId: ListProviders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Provider'
            type: array
      summary: List providers
      tags:
      - provider
  /provider/{provider}/target-config-manifest:
    get:
      description: Get provider target config manifest
      operationId: GetTargetConfigManifest
      parameters:
      - description: Provider name
        in: path
        name: provider
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TargetConfigManifest'
      summary: Get provider target config manifest
      tags:
      - provider
  /provider/{provider}/uninstall:
    post:
      consumes:
      - application/json
      description: Uninstall a provider
      operationId: UninstallProvider
      parameters:
      - description: Provider to uninstall
        in: path
        name: provider
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Uninstall a provider
      tags:
      - provider
  /provider/install:
    post:
      consumes:
      - application/json
      description: Install a provider
      operationId: InstallProvider
      parameters:
      - description: Provider to install
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/InstallProviderRequest'
      responses:
        "200":
          description: OK
      summary: Install a provider
      tags:
      - provider
  /sample:
    get:
      description: List samples
      operationId: ListSamples
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/Sample'
            type: array
      summary: List samples
      tags:
      - sample
  /server/config:
    get:
      description: Get the server configuration
      operationId: GetConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ServerConfig'
      summary: Get the server configuration
      tags:
      - server
    post:
      consumes:
      - application/json
      description: Set the server configuration
      operationId: SetConfig
      parameters:
      - description: Server configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/ServerConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ServerConfig'
      summary: Set the server configuration
      tags:
      - server
  /server/logs:
    get:
      description: List server log files
      operationId: GetServerLogFiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: List server log files
      tags:
      - server
  /server/network-key:
    post:
      description: Generate a new authentication key
      operationId: GenerateNetworkKey
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NetworkKey'
      summary: Generate a new authentication key
      tags:
      - server
  /target:
    get:
      description: List targets
      operationId: ListTargets
      parameters:
      - description: Verbose
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/TargetDTO'
            type: array
      summary: List targets
      tags:
      - target
    post:
      description: Create a target
      operationId: CreateTarget
      parameters:
      - description: Create target
        in: body
        name: target
        required: true
        schema:
          $ref: '#/definitions/CreateTargetDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Target'
      summary: Create a target
      tags:
      - target
  /target-config:
    get:
      description: List target configs
      operationId: ListTargetConfigs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/TargetConfig'
            type: array
      summary: List target configs
      tags:
      - target-config
    put:
      description: Add a target config
      operationId: AddTargetConfig
      parameters:
      - description: Target config to add
        in: body
        name: targetConfig
        required: true
        schema:
          $ref: '#/definitions/AddTargetConfigDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TargetConfig'
      summary: Add a target config
      tags:
      - target-config
  /target-config/{configId}:
    delete:
      description: Remove a target config
      operationId: RemoveTargetConfig
      parameters:
      - description: Target Config Id
        in: path
        name: configId
        required: true
        type: string
      responses:
        "204":
          description: No Content
      summary: Remove a target config
      tags:
      - target-config
  /target/{targetId}:
    delete:
      description: Remove target
      operationId: RemoveTarget
      parameters:
      - description: Target ID
        in: path
        name: targetId
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "200":
          description: OK
      summary: Remove target
      tags:
      - target
    get:
      description: Get target info
      operationId: GetTarget
      parameters:
      - description: Target ID or Name
        in: path
        name: targetId
        required: true
        type: string
      - description: Verbose
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TargetDTO'
      summary: Get target info
      tags:
      - target
  /target/{targetId}/metadata:
    post:
      description: Set target metadata
      operationId: SetTargetMetadata
      parameters:
      - description: Target ID
        in: path
        name: targetId
        required: true
        type: string
      - description: Set Metadata
        in: body
        name: setMetadata
        required: true
        schema:
          $ref: '#/definitions/SetTargetMetadata'
      responses:
        "200":
          description: OK
      summary: Set target metadata
      tags:
      - target
  /target/{targetId}/set-default:
    patch:
      description: Set target to be used by default
      operationId: SetDefaultTarget
      parameters:
      - description: Target ID or name
        in: path
        name: targetId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Set target to be used by default
      tags:
      - target
  /target/{targetId}/start:
    post:
      description: Start target
      operationId: StartTarget
      parameters:
      - description: Target ID or Name
        in: path
        name: targetId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Start target
      tags:
      - target
  /target/{targetId}/stop:
    post:
      description: Stop target
      operationId: StopTarget
      parameters:
      - description: Target ID or Name
        in: path
        name: targetId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Stop target
      tags:
      - target
  /workspace:
    get:
      description: List workspaces
      operationId: ListWorkspaces
      parameters:
      - description: Verbose
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/WorkspaceDTO'
            type: array
      summary: List workspaces
      tags:
      - workspace
    post:
      description: Create a workspace
      operationId: CreateWorkspace
      parameters:
      - description: Create workspace
        in: body
        name: workspace
        required: true
        schema:
          $ref: '#/definitions/CreateWorkspaceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkspaceDTO'
      summary: Create a workspace
      tags:
      - workspace
  /workspace-template:
    get:
      description: List workspace templates
      operationId: ListWorkspaceTemplates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/WorkspaceTemplate'
            type: array
      summary: List workspace templates
      tags:
      - workspace-template
    put:
      consumes:
      - application/json
      description: Set workspace template data
      operationId: SetWorkspaceTemplate
      parameters:
      - description: Workspace template
        in: body
        name: workspaceTemplate
        required: true
        schema:
          $ref: '#/definitions/CreateWorkspaceTemplateDTO'
      responses:
        "201":
          description: Created
      summary: Set workspace template data
      tags:
      - workspace-template
  /workspace-template/{templateName}:
    delete:
      description: Delete workspace template data
      operationId: DeleteWorkspaceTemplate
      parameters:
      - description: Template name
        in: path
        name: templateName
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete workspace template data
      tags:
      - workspace-template
    get:
      consumes:
      - application/json
      description: Get workspace template data
      operationId: GetWorkspaceTemplate
      parameters:
      - description: Template name
        in: path
        name: templateName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkspaceTemplate'
      summary: Get workspace template data
      tags:
      - workspace-template
  /workspace-template/{templateName}/prebuild:
    get:
      consumes:
      - application/json
      description: List prebuilds for workspace template
      operationId: ListPrebuildsForWorkspaceTemplate
      parameters:
      - description: Template name
        in: path
        name: templateName
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/PrebuildDTO'
            type: array
      summary: List prebuilds for workspace template
      tags:
      - prebuild
    put:
      consumes:
      - application/json
      description: Set prebuild
      operationId: SetPrebuild
      parameters:
      - description: Template name
        in: path
        name: templateName
        required: true
        type: string
      - description: Prebuild
        in: body
        name: prebuild
        required: true
        schema:
          $ref: '#/definitions/CreatePrebuildDTO'
      responses:
        "201":
          description: Created
          schema:
            type: string
      summary: Set prebuild
      tags:
      - prebuild
  /workspace-template/{templateName}/prebuild/{prebuildId}:
    delete:
      consumes:
      - application/json
      description: Delete prebuild
      operationId: DeletePrebuild
      parameters:
      - description: Workspace template name
        in: path
        name: templateName
        required: true
        type: string
      - description: Prebuild ID
        in: path
        name: prebuildId
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "204":
          description: No Content
      summary: Delete prebuild
      tags:
      - prebuild
    get:
      consumes:
      - application/json
      description: Get prebuild
      operationId: GetPrebuild
      parameters:
      - description: Workspace template name
        in: path
        name: templateName
        required: true
        type: string
      - description: Prebuild ID
        in: path
        name: prebuildId
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PrebuildDTO'
      summary: Get prebuild
      tags:
      - prebuild
  /workspace-template/{templateName}/set-default:
    patch:
      description: Set workspace template to default
      operationId: SetDefaultWorkspaceTemplate
      parameters:
      - description: Template name
        in: path
        name: templateName
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Set workspace template to default
      tags:
      - workspace-template
  /workspace-template/default/{gitUrl}:
    get:
      description: Get workspace templates by git url
      operationId: GetDefaultWorkspaceTemplate
      parameters:
      - description: Git URL
        in: path
        name: gitUrl
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkspaceTemplate'
      summary: Get workspace templates by git url
      tags:
      - workspace-template
  /workspace-template/prebuild:
    get:
      consumes:
      - application/json
      description: List prebuilds
      operationId: ListPrebuilds
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/PrebuildDTO'
            type: array
      summary: List prebuilds
      tags:
      - prebuild
  /workspace-template/prebuild/process-git-event:
    post:
      description: ProcessGitEvent
      operationId: ProcessGitEvent
      parameters:
      - description: Webhook event
        in: body
        name: body
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
      summary: ProcessGitEvent
      tags:
      - prebuild
  /workspace/{workspaceId}:
    delete:
      description: Remove workspace
      operationId: RemoveWorkspace
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      - description: Force
        in: query
        name: force
        type: boolean
      responses:
        "200":
          description: OK
      summary: Remove workspace
      tags:
      - workspace
    get:
      description: Get workspace info
      operationId: GetWorkspace
      parameters:
      - description: Workspace ID or Name
        in: path
        name: workspaceId
        required: true
        type: string
      - description: Verbose
        in: query
        name: verbose
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkspaceDTO'
      summary: Get workspace info
      tags:
      - workspace
  /workspace/{workspaceId}/metadata:
    post:
      description: Set workspace metadata
      operationId: SetWorkspaceMetadata
      parameters:
      - description: Workspace ID
        in: path
        name: workspaceId
        required: true
        type: string
      - description: Set Metadata
        in: body
        name: setMetadata
        required: true
        schema:
          $ref: '#/definitions/SetWorkspaceMetadata'
      responses:
        "200":
          description: OK
      summary: Set workspace metadata
      tags:
      - workspace
  /workspace/{workspaceId}/start:
    post:
      description: Start workspace
      operationId: StartWorkspace
      parameters:
      - description: Workspace ID or Name
        in: path
        name: workspaceId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Start workspace
      tags:
      - workspace
  /workspace/{workspaceId}/stop:
    post:
      description: Stop workspace
      operationId: StopWorkspace
      parameters:
      - description: Workspace ID or Name
        in: path
        name: workspaceId
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Stop workspace
      tags:
      - workspace
schemes:
- http
security:
- Bearer: []
securityDefinitions:
  Bearer:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
