/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ApiKeyViewDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKeyViewDTO{}

// ApiKeyViewDTO struct for ApiKeyViewDTO
type ApiKeyViewDTO struct {
	Current bool             `json:"current"`
	Name    string           `json:"name"`
	Type    ModelsApiKeyType `json:"type"`
}

type _ApiKeyViewDTO ApiKeyViewDTO

// NewApiKeyViewDTO instantiates a new ApiKeyViewDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeyViewDTO(current bool, name string, type_ ModelsApiKeyType) *ApiKeyViewDTO {
	this := ApiKeyViewDTO{}
	this.Current = current
	this.Name = name
	this.Type = type_
	return &this
}

// NewApiKeyViewDTOWithDefaults instantiates a new ApiKeyViewDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeyViewDTOWithDefaults() *ApiKeyViewDTO {
	this := ApiKeyViewDTO{}
	return &this
}

// GetCurrent returns the Current field value
func (o *ApiKeyViewDTO) GetCurrent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *ApiKeyViewDTO) GetCurrentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *ApiKeyViewDTO) SetCurrent(v bool) {
	o.Current = v
}

// GetName returns the Name field value
func (o *ApiKeyViewDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApiKeyViewDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApiKeyViewDTO) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ApiKeyViewDTO) GetType() ModelsApiKeyType {
	if o == nil {
		var ret ModelsApiKeyType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApiKeyViewDTO) GetTypeOk() (*ModelsApiKeyType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApiKeyViewDTO) SetType(v ModelsApiKeyType) {
	o.Type = v
}

func (o ApiKeyViewDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKeyViewDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current"] = o.Current
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ApiKeyViewDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"current",
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKeyViewDTO := _ApiKeyViewDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiKeyViewDTO)

	if err != nil {
		return err
	}

	*o = ApiKeyViewDTO(varApiKeyViewDTO)

	return err
}

type NullableApiKeyViewDTO struct {
	value *ApiKeyViewDTO
	isSet bool
}

func (v NullableApiKeyViewDTO) Get() *ApiKeyViewDTO {
	return v.value
}

func (v *NullableApiKeyViewDTO) Set(val *ApiKeyViewDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyViewDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyViewDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyViewDTO(val *ApiKeyViewDTO) *NullableApiKeyViewDTO {
	return &NullableApiKeyViewDTO{value: val, isSet: true}
}

func (v NullableApiKeyViewDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyViewDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
