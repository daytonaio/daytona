/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BuildConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildConfig{}

// BuildConfig struct for BuildConfig
type BuildConfig struct {
	CachedBuild  *CachedBuild        `json:"cachedBuild,omitempty"`
	Devcontainer *DevcontainerConfig `json:"devcontainer,omitempty"`
}

// NewBuildConfig instantiates a new BuildConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildConfig() *BuildConfig {
	this := BuildConfig{}
	return &this
}

// NewBuildConfigWithDefaults instantiates a new BuildConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildConfigWithDefaults() *BuildConfig {
	this := BuildConfig{}
	return &this
}

// GetCachedBuild returns the CachedBuild field value if set, zero value otherwise.
func (o *BuildConfig) GetCachedBuild() CachedBuild {
	if o == nil || IsNil(o.CachedBuild) {
		var ret CachedBuild
		return ret
	}
	return *o.CachedBuild
}

// GetCachedBuildOk returns a tuple with the CachedBuild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildConfig) GetCachedBuildOk() (*CachedBuild, bool) {
	if o == nil || IsNil(o.CachedBuild) {
		return nil, false
	}
	return o.CachedBuild, true
}

// HasCachedBuild returns a boolean if a field has been set.
func (o *BuildConfig) HasCachedBuild() bool {
	if o != nil && !IsNil(o.CachedBuild) {
		return true
	}

	return false
}

// SetCachedBuild gets a reference to the given CachedBuild and assigns it to the CachedBuild field.
func (o *BuildConfig) SetCachedBuild(v CachedBuild) {
	o.CachedBuild = &v
}

// GetDevcontainer returns the Devcontainer field value if set, zero value otherwise.
func (o *BuildConfig) GetDevcontainer() DevcontainerConfig {
	if o == nil || IsNil(o.Devcontainer) {
		var ret DevcontainerConfig
		return ret
	}
	return *o.Devcontainer
}

// GetDevcontainerOk returns a tuple with the Devcontainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildConfig) GetDevcontainerOk() (*DevcontainerConfig, bool) {
	if o == nil || IsNil(o.Devcontainer) {
		return nil, false
	}
	return o.Devcontainer, true
}

// HasDevcontainer returns a boolean if a field has been set.
func (o *BuildConfig) HasDevcontainer() bool {
	if o != nil && !IsNil(o.Devcontainer) {
		return true
	}

	return false
}

// SetDevcontainer gets a reference to the given DevcontainerConfig and assigns it to the Devcontainer field.
func (o *BuildConfig) SetDevcontainer(v DevcontainerConfig) {
	o.Devcontainer = &v
}

func (o BuildConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CachedBuild) {
		toSerialize["cachedBuild"] = o.CachedBuild
	}
	if !IsNil(o.Devcontainer) {
		toSerialize["devcontainer"] = o.Devcontainer
	}
	return toSerialize, nil
}

type NullableBuildConfig struct {
	value *BuildConfig
	isSet bool
}

func (v NullableBuildConfig) Get() *BuildConfig {
	return v.value
}

func (v *NullableBuildConfig) Set(val *BuildConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildConfig(val *BuildConfig) *NullableBuildConfig {
	return &NullableBuildConfig{value: val, isSet: true}
}

func (v NullableBuildConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
