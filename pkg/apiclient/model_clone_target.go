/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// CloneTarget the model 'CloneTarget'
type CloneTarget string

// List of CloneTarget
const (
	CloneTargetBranch CloneTarget = "branch"
	CloneTargetCommit CloneTarget = "commit"
)

// All allowed values of CloneTarget enum
var AllowedCloneTargetEnumValues = []CloneTarget{
	"branch",
	"commit",
}

func (v *CloneTarget) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloneTarget(value)
	for _, existing := range AllowedCloneTargetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloneTarget", value)
}

// NewCloneTargetFromValue returns a pointer to a valid CloneTarget
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloneTargetFromValue(v string) (*CloneTarget, error) {
	ev := CloneTarget(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloneTarget: valid values are %v", v, AllowedCloneTargetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloneTarget) IsValid() bool {
	for _, existing := range AllowedCloneTargetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloneTarget value
func (v CloneTarget) Ptr() *CloneTarget {
	return &v
}

type NullableCloneTarget struct {
	value *CloneTarget
	isSet bool
}

func (v NullableCloneTarget) Get() *CloneTarget {
	return v.value
}

func (v *NullableCloneTarget) Set(val *CloneTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneTarget(val *CloneTarget) *NullableCloneTarget {
	return &NullableCloneTarget{value: val, isSet: true}
}

func (v NullableCloneTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
