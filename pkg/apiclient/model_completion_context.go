/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompletionContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionContext{}

// CompletionContext struct for CompletionContext
type CompletionContext struct {
	TriggerCharacter *string `json:"triggerCharacter,omitempty"`
	TriggerKind      int32   `json:"triggerKind"`
}

type _CompletionContext CompletionContext

// NewCompletionContext instantiates a new CompletionContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionContext(triggerKind int32) *CompletionContext {
	this := CompletionContext{}
	this.TriggerKind = triggerKind
	return &this
}

// NewCompletionContextWithDefaults instantiates a new CompletionContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionContextWithDefaults() *CompletionContext {
	this := CompletionContext{}
	return &this
}

// GetTriggerCharacter returns the TriggerCharacter field value if set, zero value otherwise.
func (o *CompletionContext) GetTriggerCharacter() string {
	if o == nil || IsNil(o.TriggerCharacter) {
		var ret string
		return ret
	}
	return *o.TriggerCharacter
}

// GetTriggerCharacterOk returns a tuple with the TriggerCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionContext) GetTriggerCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.TriggerCharacter) {
		return nil, false
	}
	return o.TriggerCharacter, true
}

// HasTriggerCharacter returns a boolean if a field has been set.
func (o *CompletionContext) HasTriggerCharacter() bool {
	if o != nil && !IsNil(o.TriggerCharacter) {
		return true
	}

	return false
}

// SetTriggerCharacter gets a reference to the given string and assigns it to the TriggerCharacter field.
func (o *CompletionContext) SetTriggerCharacter(v string) {
	o.TriggerCharacter = &v
}

// GetTriggerKind returns the TriggerKind field value
func (o *CompletionContext) GetTriggerKind() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TriggerKind
}

// GetTriggerKindOk returns a tuple with the TriggerKind field value
// and a boolean to check if the value has been set.
func (o *CompletionContext) GetTriggerKindOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerKind, true
}

// SetTriggerKind sets field value
func (o *CompletionContext) SetTriggerKind(v int32) {
	o.TriggerKind = v
}

func (o CompletionContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TriggerCharacter) {
		toSerialize["triggerCharacter"] = o.TriggerCharacter
	}
	toSerialize["triggerKind"] = o.TriggerKind
	return toSerialize, nil
}

func (o *CompletionContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggerKind",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionContext := _CompletionContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletionContext)

	if err != nil {
		return err
	}

	*o = CompletionContext(varCompletionContext)

	return err
}

type NullableCompletionContext struct {
	value *CompletionContext
	isSet bool
}

func (v NullableCompletionContext) Get() *CompletionContext {
	return v.value
}

func (v *NullableCompletionContext) Set(val *CompletionContext) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionContext) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionContext(val *CompletionContext) *NullableCompletionContext {
	return &NullableCompletionContext{value: val, isSet: true}
}

func (v NullableCompletionContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
