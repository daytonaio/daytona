/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CompletionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionList{}

// CompletionList struct for CompletionList
type CompletionList struct {
	IsIncomplete bool             `json:"isIncomplete"`
	Items        []CompletionItem `json:"items"`
}

type _CompletionList CompletionList

// NewCompletionList instantiates a new CompletionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionList(isIncomplete bool, items []CompletionItem) *CompletionList {
	this := CompletionList{}
	this.IsIncomplete = isIncomplete
	this.Items = items
	return &this
}

// NewCompletionListWithDefaults instantiates a new CompletionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionListWithDefaults() *CompletionList {
	this := CompletionList{}
	return &this
}

// GetIsIncomplete returns the IsIncomplete field value
func (o *CompletionList) GetIsIncomplete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsIncomplete
}

// GetIsIncompleteOk returns a tuple with the IsIncomplete field value
// and a boolean to check if the value has been set.
func (o *CompletionList) GetIsIncompleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsIncomplete, true
}

// SetIsIncomplete sets field value
func (o *CompletionList) SetIsIncomplete(v bool) {
	o.IsIncomplete = v
}

// GetItems returns the Items field value
func (o *CompletionList) GetItems() []CompletionItem {
	if o == nil {
		var ret []CompletionItem
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *CompletionList) GetItemsOk() ([]CompletionItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *CompletionList) SetItems(v []CompletionItem) {
	o.Items = v
}

func (o CompletionList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isIncomplete"] = o.IsIncomplete
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *CompletionList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isIncomplete",
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionList := _CompletionList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletionList)

	if err != nil {
		return err
	}

	*o = CompletionList(varCompletionList)

	return err
}

type NullableCompletionList struct {
	value *CompletionList
	isSet bool
}

func (v NullableCompletionList) Get() *CompletionList {
	return v.value
}

func (v *NullableCompletionList) Set(val *CompletionList) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionList) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionList(val *CompletionList) *NullableCompletionList {
	return &NullableCompletionList{value: val, isSet: true}
}

func (v NullableCompletionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
