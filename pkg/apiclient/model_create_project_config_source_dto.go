/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the CreateProjectConfigSourceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProjectConfigSourceDTO{}

// CreateProjectConfigSourceDTO struct for CreateProjectConfigSourceDTO
type CreateProjectConfigSourceDTO struct {
	Repository *GitRepository `json:"repository,omitempty"`
}

// NewCreateProjectConfigSourceDTO instantiates a new CreateProjectConfigSourceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProjectConfigSourceDTO() *CreateProjectConfigSourceDTO {
	this := CreateProjectConfigSourceDTO{}
	return &this
}

// NewCreateProjectConfigSourceDTOWithDefaults instantiates a new CreateProjectConfigSourceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProjectConfigSourceDTOWithDefaults() *CreateProjectConfigSourceDTO {
	this := CreateProjectConfigSourceDTO{}
	return &this
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *CreateProjectConfigSourceDTO) GetRepository() GitRepository {
	if o == nil || IsNil(o.Repository) {
		var ret GitRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateProjectConfigSourceDTO) GetRepositoryOk() (*GitRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *CreateProjectConfigSourceDTO) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given GitRepository and assigns it to the Repository field.
func (o *CreateProjectConfigSourceDTO) SetRepository(v GitRepository) {
	o.Repository = &v
}

func (o CreateProjectConfigSourceDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProjectConfigSourceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableCreateProjectConfigSourceDTO struct {
	value *CreateProjectConfigSourceDTO
	isSet bool
}

func (v NullableCreateProjectConfigSourceDTO) Get() *CreateProjectConfigSourceDTO {
	return v.value
}

func (v *NullableCreateProjectConfigSourceDTO) Set(val *CreateProjectConfigSourceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProjectConfigSourceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProjectConfigSourceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProjectConfigSourceDTO(val *CreateProjectConfigSourceDTO) *NullableCreateProjectConfigSourceDTO {
	return &NullableCreateProjectConfigSourceDTO{value: val, isSet: true}
}

func (v NullableCreateProjectConfigSourceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProjectConfigSourceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
