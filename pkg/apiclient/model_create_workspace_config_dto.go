/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateWorkspaceConfigDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWorkspaceConfigDTO{}

// CreateWorkspaceConfigDTO struct for CreateWorkspaceConfigDTO
type CreateWorkspaceConfigDTO struct {
	BuildConfig         *BuildConfig      `json:"buildConfig,omitempty"`
	EnvVars             map[string]string `json:"envVars"`
	GitProviderConfigId *string           `json:"gitProviderConfigId,omitempty"`
	Image               *string           `json:"image,omitempty"`
	Name                string            `json:"name"`
	RepositoryUrl       string            `json:"repositoryUrl"`
	User                *string           `json:"user,omitempty"`
}

type _CreateWorkspaceConfigDTO CreateWorkspaceConfigDTO

// NewCreateWorkspaceConfigDTO instantiates a new CreateWorkspaceConfigDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWorkspaceConfigDTO(envVars map[string]string, name string, repositoryUrl string) *CreateWorkspaceConfigDTO {
	this := CreateWorkspaceConfigDTO{}
	this.EnvVars = envVars
	this.Name = name
	this.RepositoryUrl = repositoryUrl
	return &this
}

// NewCreateWorkspaceConfigDTOWithDefaults instantiates a new CreateWorkspaceConfigDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWorkspaceConfigDTOWithDefaults() *CreateWorkspaceConfigDTO {
	this := CreateWorkspaceConfigDTO{}
	return &this
}

// GetBuildConfig returns the BuildConfig field value if set, zero value otherwise.
func (o *CreateWorkspaceConfigDTO) GetBuildConfig() BuildConfig {
	if o == nil || IsNil(o.BuildConfig) {
		var ret BuildConfig
		return ret
	}
	return *o.BuildConfig
}

// GetBuildConfigOk returns a tuple with the BuildConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetBuildConfigOk() (*BuildConfig, bool) {
	if o == nil || IsNil(o.BuildConfig) {
		return nil, false
	}
	return o.BuildConfig, true
}

// HasBuildConfig returns a boolean if a field has been set.
func (o *CreateWorkspaceConfigDTO) HasBuildConfig() bool {
	if o != nil && !IsNil(o.BuildConfig) {
		return true
	}

	return false
}

// SetBuildConfig gets a reference to the given BuildConfig and assigns it to the BuildConfig field.
func (o *CreateWorkspaceConfigDTO) SetBuildConfig(v BuildConfig) {
	o.BuildConfig = &v
}

// GetEnvVars returns the EnvVars field value
func (o *CreateWorkspaceConfigDTO) GetEnvVars() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetEnvVarsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvVars, true
}

// SetEnvVars sets field value
func (o *CreateWorkspaceConfigDTO) SetEnvVars(v map[string]string) {
	o.EnvVars = v
}

// GetGitProviderConfigId returns the GitProviderConfigId field value if set, zero value otherwise.
func (o *CreateWorkspaceConfigDTO) GetGitProviderConfigId() string {
	if o == nil || IsNil(o.GitProviderConfigId) {
		var ret string
		return ret
	}
	return *o.GitProviderConfigId
}

// GetGitProviderConfigIdOk returns a tuple with the GitProviderConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetGitProviderConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.GitProviderConfigId) {
		return nil, false
	}
	return o.GitProviderConfigId, true
}

// HasGitProviderConfigId returns a boolean if a field has been set.
func (o *CreateWorkspaceConfigDTO) HasGitProviderConfigId() bool {
	if o != nil && !IsNil(o.GitProviderConfigId) {
		return true
	}

	return false
}

// SetGitProviderConfigId gets a reference to the given string and assigns it to the GitProviderConfigId field.
func (o *CreateWorkspaceConfigDTO) SetGitProviderConfigId(v string) {
	o.GitProviderConfigId = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CreateWorkspaceConfigDTO) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CreateWorkspaceConfigDTO) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CreateWorkspaceConfigDTO) SetImage(v string) {
	o.Image = &v
}

// GetName returns the Name field value
func (o *CreateWorkspaceConfigDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateWorkspaceConfigDTO) SetName(v string) {
	o.Name = v
}

// GetRepositoryUrl returns the RepositoryUrl field value
func (o *CreateWorkspaceConfigDTO) GetRepositoryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepositoryUrl
}

// GetRepositoryUrlOk returns a tuple with the RepositoryUrl field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetRepositoryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepositoryUrl, true
}

// SetRepositoryUrl sets field value
func (o *CreateWorkspaceConfigDTO) SetRepositoryUrl(v string) {
	o.RepositoryUrl = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CreateWorkspaceConfigDTO) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceConfigDTO) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CreateWorkspaceConfigDTO) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CreateWorkspaceConfigDTO) SetUser(v string) {
	o.User = &v
}

func (o CreateWorkspaceConfigDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWorkspaceConfigDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildConfig) {
		toSerialize["buildConfig"] = o.BuildConfig
	}
	toSerialize["envVars"] = o.EnvVars
	if !IsNil(o.GitProviderConfigId) {
		toSerialize["gitProviderConfigId"] = o.GitProviderConfigId
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	toSerialize["name"] = o.Name
	toSerialize["repositoryUrl"] = o.RepositoryUrl
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *CreateWorkspaceConfigDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"envVars",
		"name",
		"repositoryUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWorkspaceConfigDTO := _CreateWorkspaceConfigDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWorkspaceConfigDTO)

	if err != nil {
		return err
	}

	*o = CreateWorkspaceConfigDTO(varCreateWorkspaceConfigDTO)

	return err
}

type NullableCreateWorkspaceConfigDTO struct {
	value *CreateWorkspaceConfigDTO
	isSet bool
}

func (v NullableCreateWorkspaceConfigDTO) Get() *CreateWorkspaceConfigDTO {
	return v.value
}

func (v *NullableCreateWorkspaceConfigDTO) Set(val *CreateWorkspaceConfigDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWorkspaceConfigDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWorkspaceConfigDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWorkspaceConfigDTO(val *CreateWorkspaceConfigDTO) *NullableCreateWorkspaceConfigDTO {
	return &NullableCreateWorkspaceConfigDTO{value: val, isSet: true}
}

func (v NullableCreateWorkspaceConfigDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWorkspaceConfigDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
