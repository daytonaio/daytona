/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateWorkspaceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateWorkspaceDTO{}

// CreateWorkspaceDTO struct for CreateWorkspaceDTO
type CreateWorkspaceDTO struct {
	BuildConfig         *BuildConfig             `json:"buildConfig,omitempty"`
	EnvVars             map[string]string        `json:"envVars"`
	GitProviderConfigId *string                  `json:"gitProviderConfigId,omitempty"`
	Id                  string                   `json:"id"`
	Image               *string                  `json:"image,omitempty"`
	Name                string                   `json:"name"`
	Source              CreateWorkspaceSourceDTO `json:"source"`
	TargetId            string                   `json:"targetId"`
	User                *string                  `json:"user,omitempty"`
}

type _CreateWorkspaceDTO CreateWorkspaceDTO

// NewCreateWorkspaceDTO instantiates a new CreateWorkspaceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateWorkspaceDTO(envVars map[string]string, id string, name string, source CreateWorkspaceSourceDTO, targetId string) *CreateWorkspaceDTO {
	this := CreateWorkspaceDTO{}
	this.EnvVars = envVars
	this.Id = id
	this.Name = name
	this.Source = source
	this.TargetId = targetId
	return &this
}

// NewCreateWorkspaceDTOWithDefaults instantiates a new CreateWorkspaceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateWorkspaceDTOWithDefaults() *CreateWorkspaceDTO {
	this := CreateWorkspaceDTO{}
	return &this
}

// GetBuildConfig returns the BuildConfig field value if set, zero value otherwise.
func (o *CreateWorkspaceDTO) GetBuildConfig() BuildConfig {
	if o == nil || IsNil(o.BuildConfig) {
		var ret BuildConfig
		return ret
	}
	return *o.BuildConfig
}

// GetBuildConfigOk returns a tuple with the BuildConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetBuildConfigOk() (*BuildConfig, bool) {
	if o == nil || IsNil(o.BuildConfig) {
		return nil, false
	}
	return o.BuildConfig, true
}

// HasBuildConfig returns a boolean if a field has been set.
func (o *CreateWorkspaceDTO) HasBuildConfig() bool {
	if o != nil && !IsNil(o.BuildConfig) {
		return true
	}

	return false
}

// SetBuildConfig gets a reference to the given BuildConfig and assigns it to the BuildConfig field.
func (o *CreateWorkspaceDTO) SetBuildConfig(v BuildConfig) {
	o.BuildConfig = &v
}

// GetEnvVars returns the EnvVars field value
func (o *CreateWorkspaceDTO) GetEnvVars() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetEnvVarsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvVars, true
}

// SetEnvVars sets field value
func (o *CreateWorkspaceDTO) SetEnvVars(v map[string]string) {
	o.EnvVars = v
}

// GetGitProviderConfigId returns the GitProviderConfigId field value if set, zero value otherwise.
func (o *CreateWorkspaceDTO) GetGitProviderConfigId() string {
	if o == nil || IsNil(o.GitProviderConfigId) {
		var ret string
		return ret
	}
	return *o.GitProviderConfigId
}

// GetGitProviderConfigIdOk returns a tuple with the GitProviderConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetGitProviderConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.GitProviderConfigId) {
		return nil, false
	}
	return o.GitProviderConfigId, true
}

// HasGitProviderConfigId returns a boolean if a field has been set.
func (o *CreateWorkspaceDTO) HasGitProviderConfigId() bool {
	if o != nil && !IsNil(o.GitProviderConfigId) {
		return true
	}

	return false
}

// SetGitProviderConfigId gets a reference to the given string and assigns it to the GitProviderConfigId field.
func (o *CreateWorkspaceDTO) SetGitProviderConfigId(v string) {
	o.GitProviderConfigId = &v
}

// GetId returns the Id field value
func (o *CreateWorkspaceDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CreateWorkspaceDTO) SetId(v string) {
	o.Id = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CreateWorkspaceDTO) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CreateWorkspaceDTO) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CreateWorkspaceDTO) SetImage(v string) {
	o.Image = &v
}

// GetName returns the Name field value
func (o *CreateWorkspaceDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateWorkspaceDTO) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *CreateWorkspaceDTO) GetSource() CreateWorkspaceSourceDTO {
	if o == nil {
		var ret CreateWorkspaceSourceDTO
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetSourceOk() (*CreateWorkspaceSourceDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CreateWorkspaceDTO) SetSource(v CreateWorkspaceSourceDTO) {
	o.Source = v
}

// GetTargetId returns the TargetId field value
func (o *CreateWorkspaceDTO) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *CreateWorkspaceDTO) SetTargetId(v string) {
	o.TargetId = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *CreateWorkspaceDTO) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateWorkspaceDTO) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *CreateWorkspaceDTO) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *CreateWorkspaceDTO) SetUser(v string) {
	o.User = &v
}

func (o CreateWorkspaceDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateWorkspaceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BuildConfig) {
		toSerialize["buildConfig"] = o.BuildConfig
	}
	toSerialize["envVars"] = o.EnvVars
	if !IsNil(o.GitProviderConfigId) {
		toSerialize["gitProviderConfigId"] = o.GitProviderConfigId
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	toSerialize["name"] = o.Name
	toSerialize["source"] = o.Source
	toSerialize["targetId"] = o.TargetId
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

func (o *CreateWorkspaceDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"envVars",
		"id",
		"name",
		"source",
		"targetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateWorkspaceDTO := _CreateWorkspaceDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateWorkspaceDTO)

	if err != nil {
		return err
	}

	*o = CreateWorkspaceDTO(varCreateWorkspaceDTO)

	return err
}

type NullableCreateWorkspaceDTO struct {
	value *CreateWorkspaceDTO
	isSet bool
}

func (v NullableCreateWorkspaceDTO) Get() *CreateWorkspaceDTO {
	return v.value
}

func (v *NullableCreateWorkspaceDTO) Set(val *CreateWorkspaceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateWorkspaceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateWorkspaceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateWorkspaceDTO(val *CreateWorkspaceDTO) *NullableCreateWorkspaceDTO {
	return &NullableCreateWorkspaceDTO{value: val, isSet: true}
}

func (v NullableCreateWorkspaceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateWorkspaceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
