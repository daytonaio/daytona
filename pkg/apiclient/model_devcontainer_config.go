/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the DevcontainerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevcontainerConfig{}

// DevcontainerConfig struct for DevcontainerConfig
type DevcontainerConfig struct {
	FilePath *string `json:"filePath,omitempty"`
}

// NewDevcontainerConfig instantiates a new DevcontainerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevcontainerConfig() *DevcontainerConfig {
	this := DevcontainerConfig{}
	return &this
}

// NewDevcontainerConfigWithDefaults instantiates a new DevcontainerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevcontainerConfigWithDefaults() *DevcontainerConfig {
	this := DevcontainerConfig{}
	return &this
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *DevcontainerConfig) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevcontainerConfig) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *DevcontainerConfig) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *DevcontainerConfig) SetFilePath(v string) {
	o.FilePath = &v
}

func (o DevcontainerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevcontainerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	return toSerialize, nil
}

type NullableDevcontainerConfig struct {
	value *DevcontainerConfig
	isSet bool
}

func (v NullableDevcontainerConfig) Get() *DevcontainerConfig {
	return v.value
}

func (v *NullableDevcontainerConfig) Set(val *DevcontainerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDevcontainerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDevcontainerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevcontainerConfig(val *DevcontainerConfig) *NullableDevcontainerConfig {
	return &NullableDevcontainerConfig{value: val, isSet: true}
}

func (v NullableDevcontainerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevcontainerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
