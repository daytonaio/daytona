/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ExistingConfigDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExistingConfigDTO{}

// ExistingConfigDTO struct for ExistingConfigDTO
type ExistingConfigDTO struct {
	Branch      *string `json:"branch,omitempty"`
	ConfigName  *string `json:"configName,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
}

// NewExistingConfigDTO instantiates a new ExistingConfigDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistingConfigDTO() *ExistingConfigDTO {
	this := ExistingConfigDTO{}
	return &this
}

// NewExistingConfigDTOWithDefaults instantiates a new ExistingConfigDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistingConfigDTOWithDefaults() *ExistingConfigDTO {
	this := ExistingConfigDTO{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *ExistingConfigDTO) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExistingConfigDTO) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *ExistingConfigDTO) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *ExistingConfigDTO) SetBranch(v string) {
	o.Branch = &v
}

// GetConfigName returns the ConfigName field value if set, zero value otherwise.
func (o *ExistingConfigDTO) GetConfigName() string {
	if o == nil || IsNil(o.ConfigName) {
		var ret string
		return ret
	}
	return *o.ConfigName
}

// GetConfigNameOk returns a tuple with the ConfigName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExistingConfigDTO) GetConfigNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigName) {
		return nil, false
	}
	return o.ConfigName, true
}

// HasConfigName returns a boolean if a field has been set.
func (o *ExistingConfigDTO) HasConfigName() bool {
	if o != nil && !IsNil(o.ConfigName) {
		return true
	}

	return false
}

// SetConfigName gets a reference to the given string and assigns it to the ConfigName field.
func (o *ExistingConfigDTO) SetConfigName(v string) {
	o.ConfigName = &v
}

// GetProjectName returns the ProjectName field value if set, zero value otherwise.
func (o *ExistingConfigDTO) GetProjectName() string {
	if o == nil || IsNil(o.ProjectName) {
		var ret string
		return ret
	}
	return *o.ProjectName
}

// GetProjectNameOk returns a tuple with the ProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExistingConfigDTO) GetProjectNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectName) {
		return nil, false
	}
	return o.ProjectName, true
}

// HasProjectName returns a boolean if a field has been set.
func (o *ExistingConfigDTO) HasProjectName() bool {
	if o != nil && !IsNil(o.ProjectName) {
		return true
	}

	return false
}

// SetProjectName gets a reference to the given string and assigns it to the ProjectName field.
func (o *ExistingConfigDTO) SetProjectName(v string) {
	o.ProjectName = &v
}

func (o ExistingConfigDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExistingConfigDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.ConfigName) {
		toSerialize["configName"] = o.ConfigName
	}
	if !IsNil(o.ProjectName) {
		toSerialize["projectName"] = o.ProjectName
	}
	return toSerialize, nil
}

type NullableExistingConfigDTO struct {
	value *ExistingConfigDTO
	isSet bool
}

func (v NullableExistingConfigDTO) Get() *ExistingConfigDTO {
	return v.value
}

func (v *NullableExistingConfigDTO) Set(val *ExistingConfigDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableExistingConfigDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableExistingConfigDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistingConfigDTO(val *ExistingConfigDTO) *NullableExistingConfigDTO {
	return &NullableExistingConfigDTO{value: val, isSet: true}
}

func (v NullableExistingConfigDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistingConfigDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
