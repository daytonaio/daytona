/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the FileStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileStatus{}

// FileStatus struct for FileStatus
type FileStatus struct {
	Extra    string `json:"extra"`
	Name     string `json:"name"`
	Staging  Status `json:"staging"`
	Worktree Status `json:"worktree"`
}

type _FileStatus FileStatus

// NewFileStatus instantiates a new FileStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStatus(extra string, name string, staging Status, worktree Status) *FileStatus {
	this := FileStatus{}
	this.Extra = extra
	this.Name = name
	this.Staging = staging
	this.Worktree = worktree
	return &this
}

// NewFileStatusWithDefaults instantiates a new FileStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatusWithDefaults() *FileStatus {
	this := FileStatus{}
	return &this
}

// GetExtra returns the Extra field value
func (o *FileStatus) GetExtra() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extra
}

// GetExtraOk returns a tuple with the Extra field value
// and a boolean to check if the value has been set.
func (o *FileStatus) GetExtraOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extra, true
}

// SetExtra sets field value
func (o *FileStatus) SetExtra(v string) {
	o.Extra = v
}

// GetName returns the Name field value
func (o *FileStatus) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FileStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FileStatus) SetName(v string) {
	o.Name = v
}

// GetStaging returns the Staging field value
func (o *FileStatus) GetStaging() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Staging
}

// GetStagingOk returns a tuple with the Staging field value
// and a boolean to check if the value has been set.
func (o *FileStatus) GetStagingOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Staging, true
}

// SetStaging sets field value
func (o *FileStatus) SetStaging(v Status) {
	o.Staging = v
}

// GetWorktree returns the Worktree field value
func (o *FileStatus) GetWorktree() Status {
	if o == nil {
		var ret Status
		return ret
	}

	return o.Worktree
}

// GetWorktreeOk returns a tuple with the Worktree field value
// and a boolean to check if the value has been set.
func (o *FileStatus) GetWorktreeOk() (*Status, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Worktree, true
}

// SetWorktree sets field value
func (o *FileStatus) SetWorktree(v Status) {
	o.Worktree = v
}

func (o FileStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["extra"] = o.Extra
	toSerialize["name"] = o.Name
	toSerialize["staging"] = o.Staging
	toSerialize["worktree"] = o.Worktree
	return toSerialize, nil
}

func (o *FileStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"extra",
		"name",
		"staging",
		"worktree",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileStatus := _FileStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileStatus)

	if err != nil {
		return err
	}

	*o = FileStatus(varFileStatus)

	return err
}

type NullableFileStatus struct {
	value *FileStatus
	isSet bool
}

func (v NullableFileStatus) Get() *FileStatus {
	return v.value
}

func (v *NullableFileStatus) Set(val *FileStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatus(val *FileStatus) *NullableFileStatus {
	return &NullableFileStatus{value: val, isSet: true}
}

func (v NullableFileStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
