/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the FileStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileStatus{}

// FileStatus struct for FileStatus
type FileStatus struct {
	Extra    *string `json:"extra,omitempty"`
	Name     *string `json:"name,omitempty"`
	Staging  *Status `json:"staging,omitempty"`
	Worktree *Status `json:"worktree,omitempty"`
}

// NewFileStatus instantiates a new FileStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStatus() *FileStatus {
	this := FileStatus{}
	return &this
}

// NewFileStatusWithDefaults instantiates a new FileStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatusWithDefaults() *FileStatus {
	this := FileStatus{}
	return &this
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *FileStatus) GetExtra() string {
	if o == nil || IsNil(o.Extra) {
		var ret string
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStatus) GetExtraOk() (*string, bool) {
	if o == nil || IsNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *FileStatus) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given string and assigns it to the Extra field.
func (o *FileStatus) SetExtra(v string) {
	o.Extra = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileStatus) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStatus) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileStatus) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileStatus) SetName(v string) {
	o.Name = &v
}

// GetStaging returns the Staging field value if set, zero value otherwise.
func (o *FileStatus) GetStaging() Status {
	if o == nil || IsNil(o.Staging) {
		var ret Status
		return ret
	}
	return *o.Staging
}

// GetStagingOk returns a tuple with the Staging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStatus) GetStagingOk() (*Status, bool) {
	if o == nil || IsNil(o.Staging) {
		return nil, false
	}
	return o.Staging, true
}

// HasStaging returns a boolean if a field has been set.
func (o *FileStatus) HasStaging() bool {
	if o != nil && !IsNil(o.Staging) {
		return true
	}

	return false
}

// SetStaging gets a reference to the given Status and assigns it to the Staging field.
func (o *FileStatus) SetStaging(v Status) {
	o.Staging = &v
}

// GetWorktree returns the Worktree field value if set, zero value otherwise.
func (o *FileStatus) GetWorktree() Status {
	if o == nil || IsNil(o.Worktree) {
		var ret Status
		return ret
	}
	return *o.Worktree
}

// GetWorktreeOk returns a tuple with the Worktree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStatus) GetWorktreeOk() (*Status, bool) {
	if o == nil || IsNil(o.Worktree) {
		return nil, false
	}
	return o.Worktree, true
}

// HasWorktree returns a boolean if a field has been set.
func (o *FileStatus) HasWorktree() bool {
	if o != nil && !IsNil(o.Worktree) {
		return true
	}

	return false
}

// SetWorktree gets a reference to the given Status and assigns it to the Worktree field.
func (o *FileStatus) SetWorktree(v Status) {
	o.Worktree = &v
}

func (o FileStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Staging) {
		toSerialize["staging"] = o.Staging
	}
	if !IsNil(o.Worktree) {
		toSerialize["worktree"] = o.Worktree
	}
	return toSerialize, nil
}

type NullableFileStatus struct {
	value *FileStatus
	isSet bool
}

func (v NullableFileStatus) Get() *FileStatus {
	return v.value
}

func (v *NullableFileStatus) Set(val *FileStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStatus(val *FileStatus) *NullableFileStatus {
	return &NullableFileStatus{value: val, isSet: true}
}

func (v NullableFileStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
