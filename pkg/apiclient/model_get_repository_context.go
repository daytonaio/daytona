/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetRepositoryContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetRepositoryContext{}

// GetRepositoryContext struct for GetRepositoryContext
type GetRepositoryContext struct {
	Branch   *string `json:"branch,omitempty"`
	Id       *string `json:"id,omitempty"`
	Name     *string `json:"name,omitempty"`
	Owner    *string `json:"owner,omitempty"`
	Path     *string `json:"path,omitempty"`
	PrNumber *int32  `json:"prNumber,omitempty"`
	Sha      *string `json:"sha,omitempty"`
	Source   *string `json:"source,omitempty"`
	Url      string  `json:"url"`
}

type _GetRepositoryContext GetRepositoryContext

// NewGetRepositoryContext instantiates a new GetRepositoryContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRepositoryContext(url string) *GetRepositoryContext {
	this := GetRepositoryContext{}
	this.Url = url
	return &this
}

// NewGetRepositoryContextWithDefaults instantiates a new GetRepositoryContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRepositoryContextWithDefaults() *GetRepositoryContext {
	this := GetRepositoryContext{}
	return &this
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetBranch() string {
	if o == nil || IsNil(o.Branch) {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetBranchOk() (*string, bool) {
	if o == nil || IsNil(o.Branch) {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasBranch() bool {
	if o != nil && !IsNil(o.Branch) {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *GetRepositoryContext) SetBranch(v string) {
	o.Branch = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GetRepositoryContext) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetRepositoryContext) SetName(v string) {
	o.Name = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *GetRepositoryContext) SetOwner(v string) {
	o.Owner = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GetRepositoryContext) SetPath(v string) {
	o.Path = &v
}

// GetPrNumber returns the PrNumber field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetPrNumber() int32 {
	if o == nil || IsNil(o.PrNumber) {
		var ret int32
		return ret
	}
	return *o.PrNumber
}

// GetPrNumberOk returns a tuple with the PrNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetPrNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.PrNumber) {
		return nil, false
	}
	return o.PrNumber, true
}

// HasPrNumber returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasPrNumber() bool {
	if o != nil && !IsNil(o.PrNumber) {
		return true
	}

	return false
}

// SetPrNumber gets a reference to the given int32 and assigns it to the PrNumber field.
func (o *GetRepositoryContext) SetPrNumber(v int32) {
	o.PrNumber = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GetRepositoryContext) SetSha(v string) {
	o.Sha = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *GetRepositoryContext) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *GetRepositoryContext) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *GetRepositoryContext) SetSource(v string) {
	o.Source = &v
}

// GetUrl returns the Url field value
func (o *GetRepositoryContext) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *GetRepositoryContext) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *GetRepositoryContext) SetUrl(v string) {
	o.Url = v
}

func (o GetRepositoryContext) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetRepositoryContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Branch) {
		toSerialize["branch"] = o.Branch
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.PrNumber) {
		toSerialize["prNumber"] = o.PrNumber
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

func (o *GetRepositoryContext) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetRepositoryContext := _GetRepositoryContext{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetRepositoryContext)

	if err != nil {
		return err
	}

	*o = GetRepositoryContext(varGetRepositoryContext)

	return err
}

type NullableGetRepositoryContext struct {
	value *GetRepositoryContext
	isSet bool
}

func (v NullableGetRepositoryContext) Get() *GetRepositoryContext {
	return v.value
}

func (v *NullableGetRepositoryContext) Set(val *GetRepositoryContext) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRepositoryContext) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRepositoryContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRepositoryContext(val *GetRepositoryContext) *NullableGetRepositoryContext {
	return &NullableGetRepositoryContext{value: val, isSet: true}
}

func (v NullableGetRepositoryContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRepositoryContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
