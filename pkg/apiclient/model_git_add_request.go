/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitAddRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitAddRequest{}

// GitAddRequest struct for GitAddRequest
type GitAddRequest struct {
	// files to add (use . for all files)
	Files []string `json:"files"`
	Path  string   `json:"path"`
}

type _GitAddRequest GitAddRequest

// NewGitAddRequest instantiates a new GitAddRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitAddRequest(files []string, path string) *GitAddRequest {
	this := GitAddRequest{}
	this.Files = files
	this.Path = path
	return &this
}

// NewGitAddRequestWithDefaults instantiates a new GitAddRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitAddRequestWithDefaults() *GitAddRequest {
	this := GitAddRequest{}
	return &this
}

// GetFiles returns the Files field value
func (o *GitAddRequest) GetFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *GitAddRequest) GetFilesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *GitAddRequest) SetFiles(v []string) {
	o.Files = v
}

// GetPath returns the Path field value
func (o *GitAddRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitAddRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitAddRequest) SetPath(v string) {
	o.Path = v
}

func (o GitAddRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitAddRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["files"] = o.Files
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *GitAddRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"files",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitAddRequest := _GitAddRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitAddRequest)

	if err != nil {
		return err
	}

	*o = GitAddRequest(varGitAddRequest)

	return err
}

type NullableGitAddRequest struct {
	value *GitAddRequest
	isSet bool
}

func (v NullableGitAddRequest) Get() *GitAddRequest {
	return v.value
}

func (v *NullableGitAddRequest) Set(val *GitAddRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitAddRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitAddRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitAddRequest(val *GitAddRequest) *NullableGitAddRequest {
	return &NullableGitAddRequest{value: val, isSet: true}
}

func (v NullableGitAddRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitAddRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
