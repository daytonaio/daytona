/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitBranch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitBranch{}

// GitBranch struct for GitBranch
type GitBranch struct {
	Name string `json:"name"`
	Sha  string `json:"sha"`
}

type _GitBranch GitBranch

// NewGitBranch instantiates a new GitBranch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBranch(name string, sha string) *GitBranch {
	this := GitBranch{}
	this.Name = name
	this.Sha = sha
	return &this
}

// NewGitBranchWithDefaults instantiates a new GitBranch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBranchWithDefaults() *GitBranch {
	this := GitBranch{}
	return &this
}

// GetName returns the Name field value
func (o *GitBranch) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitBranch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitBranch) SetName(v string) {
	o.Name = v
}

// GetSha returns the Sha field value
func (o *GitBranch) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitBranch) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitBranch) SetSha(v string) {
	o.Sha = v
}

func (o GitBranch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBranch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["sha"] = o.Sha
	return toSerialize, nil
}

func (o *GitBranch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"sha",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitBranch := _GitBranch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitBranch)

	if err != nil {
		return err
	}

	*o = GitBranch(varGitBranch)

	return err
}

type NullableGitBranch struct {
	value *GitBranch
	isSet bool
}

func (v NullableGitBranch) Get() *GitBranch {
	return v.value
}

func (v *NullableGitBranch) Set(val *GitBranch) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBranch) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBranch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBranch(val *GitBranch) *NullableGitBranch {
	return &NullableGitBranch{value: val, isSet: true}
}

func (v NullableGitBranch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBranch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
