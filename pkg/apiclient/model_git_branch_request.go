/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitBranchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitBranchRequest{}

// GitBranchRequest struct for GitBranchRequest
type GitBranchRequest struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

type _GitBranchRequest GitBranchRequest

// NewGitBranchRequest instantiates a new GitBranchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitBranchRequest(name string, path string) *GitBranchRequest {
	this := GitBranchRequest{}
	this.Name = name
	this.Path = path
	return &this
}

// NewGitBranchRequestWithDefaults instantiates a new GitBranchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitBranchRequestWithDefaults() *GitBranchRequest {
	this := GitBranchRequest{}
	return &this
}

// GetName returns the Name field value
func (o *GitBranchRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitBranchRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitBranchRequest) SetName(v string) {
	o.Name = v
}

// GetPath returns the Path field value
func (o *GitBranchRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitBranchRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitBranchRequest) SetPath(v string) {
	o.Path = v
}

func (o GitBranchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitBranchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *GitBranchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitBranchRequest := _GitBranchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitBranchRequest)

	if err != nil {
		return err
	}

	*o = GitBranchRequest(varGitBranchRequest)

	return err
}

type NullableGitBranchRequest struct {
	value *GitBranchRequest
	isSet bool
}

func (v NullableGitBranchRequest) Get() *GitBranchRequest {
	return v.value
}

func (v *NullableGitBranchRequest) Set(val *GitBranchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitBranchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitBranchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitBranchRequest(val *GitBranchRequest) *NullableGitBranchRequest {
	return &NullableGitBranchRequest{value: val, isSet: true}
}

func (v NullableGitBranchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitBranchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
