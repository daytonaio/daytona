/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitCommitRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitCommitRequest{}

// GitCommitRequest struct for GitCommitRequest
type GitCommitRequest struct {
	Author  string `json:"author"`
	Email   string `json:"email"`
	Message string `json:"message"`
	Path    string `json:"path"`
}

type _GitCommitRequest GitCommitRequest

// NewGitCommitRequest instantiates a new GitCommitRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitCommitRequest(author string, email string, message string, path string) *GitCommitRequest {
	this := GitCommitRequest{}
	this.Author = author
	this.Email = email
	this.Message = message
	this.Path = path
	return &this
}

// NewGitCommitRequestWithDefaults instantiates a new GitCommitRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitCommitRequestWithDefaults() *GitCommitRequest {
	this := GitCommitRequest{}
	return &this
}

// GetAuthor returns the Author field value
func (o *GitCommitRequest) GetAuthor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *GitCommitRequest) GetAuthorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *GitCommitRequest) SetAuthor(v string) {
	o.Author = v
}

// GetEmail returns the Email field value
func (o *GitCommitRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *GitCommitRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *GitCommitRequest) SetEmail(v string) {
	o.Email = v
}

// GetMessage returns the Message field value
func (o *GitCommitRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *GitCommitRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *GitCommitRequest) SetMessage(v string) {
	o.Message = v
}

// GetPath returns the Path field value
func (o *GitCommitRequest) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GitCommitRequest) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GitCommitRequest) SetPath(v string) {
	o.Path = v
}

func (o GitCommitRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitCommitRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["author"] = o.Author
	toSerialize["email"] = o.Email
	toSerialize["message"] = o.Message
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *GitCommitRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"author",
		"email",
		"message",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitCommitRequest := _GitCommitRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitCommitRequest)

	if err != nil {
		return err
	}

	*o = GitCommitRequest(varGitCommitRequest)

	return err
}

type NullableGitCommitRequest struct {
	value *GitCommitRequest
	isSet bool
}

func (v NullableGitCommitRequest) Get() *GitCommitRequest {
	return v.value
}

func (v *NullableGitCommitRequest) Set(val *GitCommitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitCommitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitCommitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitCommitRequest(val *GitCommitRequest) *NullableGitCommitRequest {
	return &NullableGitCommitRequest{value: val, isSet: true}
}

func (v NullableGitCommitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitCommitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
