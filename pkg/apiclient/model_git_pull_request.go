/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GitPullRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitPullRequest{}

// GitPullRequest struct for GitPullRequest
type GitPullRequest struct {
	Branch          string `json:"branch"`
	Name            string `json:"name"`
	Sha             string `json:"sha"`
	SourceRepoId    string `json:"sourceRepoId"`
	SourceRepoName  string `json:"sourceRepoName"`
	SourceRepoOwner string `json:"sourceRepoOwner"`
	SourceRepoUrl   string `json:"sourceRepoUrl"`
}

type _GitPullRequest GitPullRequest

// NewGitPullRequest instantiates a new GitPullRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitPullRequest(branch string, name string, sha string, sourceRepoId string, sourceRepoName string, sourceRepoOwner string, sourceRepoUrl string) *GitPullRequest {
	this := GitPullRequest{}
	this.Branch = branch
	this.Name = name
	this.Sha = sha
	this.SourceRepoId = sourceRepoId
	this.SourceRepoName = sourceRepoName
	this.SourceRepoOwner = sourceRepoOwner
	this.SourceRepoUrl = sourceRepoUrl
	return &this
}

// NewGitPullRequestWithDefaults instantiates a new GitPullRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitPullRequestWithDefaults() *GitPullRequest {
	this := GitPullRequest{}
	return &this
}

// GetBranch returns the Branch field value
func (o *GitPullRequest) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *GitPullRequest) SetBranch(v string) {
	o.Branch = v
}

// GetName returns the Name field value
func (o *GitPullRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GitPullRequest) SetName(v string) {
	o.Name = v
}

// GetSha returns the Sha field value
func (o *GitPullRequest) GetSha() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sha
}

// GetShaOk returns a tuple with the Sha field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetShaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sha, true
}

// SetSha sets field value
func (o *GitPullRequest) SetSha(v string) {
	o.Sha = v
}

// GetSourceRepoId returns the SourceRepoId field value
func (o *GitPullRequest) GetSourceRepoId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceRepoId
}

// GetSourceRepoIdOk returns a tuple with the SourceRepoId field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetSourceRepoIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceRepoId, true
}

// SetSourceRepoId sets field value
func (o *GitPullRequest) SetSourceRepoId(v string) {
	o.SourceRepoId = v
}

// GetSourceRepoName returns the SourceRepoName field value
func (o *GitPullRequest) GetSourceRepoName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceRepoName
}

// GetSourceRepoNameOk returns a tuple with the SourceRepoName field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetSourceRepoNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceRepoName, true
}

// SetSourceRepoName sets field value
func (o *GitPullRequest) SetSourceRepoName(v string) {
	o.SourceRepoName = v
}

// GetSourceRepoOwner returns the SourceRepoOwner field value
func (o *GitPullRequest) GetSourceRepoOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceRepoOwner
}

// GetSourceRepoOwnerOk returns a tuple with the SourceRepoOwner field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetSourceRepoOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceRepoOwner, true
}

// SetSourceRepoOwner sets field value
func (o *GitPullRequest) SetSourceRepoOwner(v string) {
	o.SourceRepoOwner = v
}

// GetSourceRepoUrl returns the SourceRepoUrl field value
func (o *GitPullRequest) GetSourceRepoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceRepoUrl
}

// GetSourceRepoUrlOk returns a tuple with the SourceRepoUrl field value
// and a boolean to check if the value has been set.
func (o *GitPullRequest) GetSourceRepoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceRepoUrl, true
}

// SetSourceRepoUrl sets field value
func (o *GitPullRequest) SetSourceRepoUrl(v string) {
	o.SourceRepoUrl = v
}

func (o GitPullRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitPullRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branch"] = o.Branch
	toSerialize["name"] = o.Name
	toSerialize["sha"] = o.Sha
	toSerialize["sourceRepoId"] = o.SourceRepoId
	toSerialize["sourceRepoName"] = o.SourceRepoName
	toSerialize["sourceRepoOwner"] = o.SourceRepoOwner
	toSerialize["sourceRepoUrl"] = o.SourceRepoUrl
	return toSerialize, nil
}

func (o *GitPullRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branch",
		"name",
		"sha",
		"sourceRepoId",
		"sourceRepoName",
		"sourceRepoOwner",
		"sourceRepoUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGitPullRequest := _GitPullRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGitPullRequest)

	if err != nil {
		return err
	}

	*o = GitPullRequest(varGitPullRequest)

	return err
}

type NullableGitPullRequest struct {
	value *GitPullRequest
	isSet bool
}

func (v NullableGitPullRequest) Get() *GitPullRequest {
	return v.value
}

func (v *NullableGitPullRequest) Set(val *GitPullRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGitPullRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGitPullRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitPullRequest(val *GitPullRequest) *NullableGitPullRequest {
	return &NullableGitPullRequest{value: val, isSet: true}
}

func (v NullableGitPullRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitPullRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
