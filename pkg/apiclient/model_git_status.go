/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GitStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitStatus{}

// GitStatus struct for GitStatus
type GitStatus struct {
	CurrentBranch *string      `json:"currentBranch,omitempty"`
	FileStatus    []FileStatus `json:"fileStatus,omitempty"`
}

// NewGitStatus instantiates a new GitStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitStatus() *GitStatus {
	this := GitStatus{}
	return &this
}

// NewGitStatusWithDefaults instantiates a new GitStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitStatusWithDefaults() *GitStatus {
	this := GitStatus{}
	return &this
}

// GetCurrentBranch returns the CurrentBranch field value if set, zero value otherwise.
func (o *GitStatus) GetCurrentBranch() string {
	if o == nil || IsNil(o.CurrentBranch) {
		var ret string
		return ret
	}
	return *o.CurrentBranch
}

// GetCurrentBranchOk returns a tuple with the CurrentBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitStatus) GetCurrentBranchOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentBranch) {
		return nil, false
	}
	return o.CurrentBranch, true
}

// HasCurrentBranch returns a boolean if a field has been set.
func (o *GitStatus) HasCurrentBranch() bool {
	if o != nil && !IsNil(o.CurrentBranch) {
		return true
	}

	return false
}

// SetCurrentBranch gets a reference to the given string and assigns it to the CurrentBranch field.
func (o *GitStatus) SetCurrentBranch(v string) {
	o.CurrentBranch = &v
}

// GetFileStatus returns the FileStatus field value if set, zero value otherwise.
func (o *GitStatus) GetFileStatus() []FileStatus {
	if o == nil || IsNil(o.FileStatus) {
		var ret []FileStatus
		return ret
	}
	return o.FileStatus
}

// GetFileStatusOk returns a tuple with the FileStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitStatus) GetFileStatusOk() ([]FileStatus, bool) {
	if o == nil || IsNil(o.FileStatus) {
		return nil, false
	}
	return o.FileStatus, true
}

// HasFileStatus returns a boolean if a field has been set.
func (o *GitStatus) HasFileStatus() bool {
	if o != nil && !IsNil(o.FileStatus) {
		return true
	}

	return false
}

// SetFileStatus gets a reference to the given []FileStatus and assigns it to the FileStatus field.
func (o *GitStatus) SetFileStatus(v []FileStatus) {
	o.FileStatus = v
}

func (o GitStatus) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentBranch) {
		toSerialize["currentBranch"] = o.CurrentBranch
	}
	if !IsNil(o.FileStatus) {
		toSerialize["fileStatus"] = o.FileStatus
	}
	return toSerialize, nil
}

type NullableGitStatus struct {
	value *GitStatus
	isSet bool
}

func (v NullableGitStatus) Get() *GitStatus {
	return v.value
}

func (v *NullableGitStatus) Set(val *GitStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGitStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGitStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitStatus(val *GitStatus) *NullableGitStatus {
	return &NullableGitStatus{value: val, isSet: true}
}

func (v NullableGitStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
