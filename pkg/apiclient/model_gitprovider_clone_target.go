/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// GitproviderCloneTarget the model 'GitproviderCloneTarget'
type GitproviderCloneTarget string

// List of gitprovider.CloneTarget
const (
	CloneTargetBranch GitproviderCloneTarget = "branch"
	CloneTargetCommit GitproviderCloneTarget = "commit"
)

// All allowed values of GitproviderCloneTarget enum
var AllowedGitproviderCloneTargetEnumValues = []GitproviderCloneTarget{
	"branch",
	"commit",
}

func (v *GitproviderCloneTarget) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GitproviderCloneTarget(value)
	for _, existing := range AllowedGitproviderCloneTargetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GitproviderCloneTarget", value)
}

// NewGitproviderCloneTargetFromValue returns a pointer to a valid GitproviderCloneTarget
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGitproviderCloneTargetFromValue(v string) (*GitproviderCloneTarget, error) {
	ev := GitproviderCloneTarget(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GitproviderCloneTarget: valid values are %v", v, AllowedGitproviderCloneTargetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GitproviderCloneTarget) IsValid() bool {
	for _, existing := range AllowedGitproviderCloneTargetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to gitprovider.CloneTarget value
func (v GitproviderCloneTarget) Ptr() *GitproviderCloneTarget {
	return &v
}

type NullableGitproviderCloneTarget struct {
	value *GitproviderCloneTarget
	isSet bool
}

func (v NullableGitproviderCloneTarget) Get() *GitproviderCloneTarget {
	return v.value
}

func (v *NullableGitproviderCloneTarget) Set(val *GitproviderCloneTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableGitproviderCloneTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableGitproviderCloneTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitproviderCloneTarget(val *GitproviderCloneTarget) *NullableGitproviderCloneTarget {
	return &NullableGitproviderCloneTarget{value: val, isSet: true}
}

func (v NullableGitproviderCloneTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitproviderCloneTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
