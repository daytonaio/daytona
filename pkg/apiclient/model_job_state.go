/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// JobState the model 'JobState'
type JobState string

// List of JobState
const (
	JobStatePending JobState = "pending"
	JobStateRunning JobState = "running"
	JobStateError   JobState = "error"
	JobStateSuccess JobState = "success"
)

// All allowed values of JobState enum
var AllowedJobStateEnumValues = []JobState{
	"pending",
	"running",
	"error",
	"success",
}

func (v *JobState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobState(value)
	for _, existing := range AllowedJobStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobState", value)
}

// NewJobStateFromValue returns a pointer to a valid JobState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobStateFromValue(v string) (*JobState, error) {
	ev := JobState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobState: valid values are %v", v, AllowedJobStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobState) IsValid() bool {
	for _, existing := range AllowedJobStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobState value
func (v JobState) Ptr() *JobState {
	return &v
}

type NullableJobState struct {
	value *JobState
	isSet bool
}

func (v NullableJobState) Get() *JobState {
	return v.value
}

func (v *NullableJobState) Set(val *JobState) {
	v.value = val
	v.isSet = true
}

func (v NullableJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobState(val *JobState) *NullableJobState {
	return &NullableJobState{value: val, isSet: true}
}

func (v NullableJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
