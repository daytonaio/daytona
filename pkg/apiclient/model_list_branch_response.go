/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ListBranchResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListBranchResponse{}

// ListBranchResponse struct for ListBranchResponse
type ListBranchResponse struct {
	Branches []string `json:"branches"`
}

type _ListBranchResponse ListBranchResponse

// NewListBranchResponse instantiates a new ListBranchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListBranchResponse(branches []string) *ListBranchResponse {
	this := ListBranchResponse{}
	this.Branches = branches
	return &this
}

// NewListBranchResponseWithDefaults instantiates a new ListBranchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListBranchResponseWithDefaults() *ListBranchResponse {
	this := ListBranchResponse{}
	return &this
}

// GetBranches returns the Branches field value
func (o *ListBranchResponse) GetBranches() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Branches
}

// GetBranchesOk returns a tuple with the Branches field value
// and a boolean to check if the value has been set.
func (o *ListBranchResponse) GetBranchesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Branches, true
}

// SetBranches sets field value
func (o *ListBranchResponse) SetBranches(v []string) {
	o.Branches = v
}

func (o ListBranchResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListBranchResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["branches"] = o.Branches
	return toSerialize, nil
}

func (o *ListBranchResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"branches",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListBranchResponse := _ListBranchResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListBranchResponse)

	if err != nil {
		return err
	}

	*o = ListBranchResponse(varListBranchResponse)

	return err
}

type NullableListBranchResponse struct {
	value *ListBranchResponse
	isSet bool
}

func (v NullableListBranchResponse) Get() *ListBranchResponse {
	return v.value
}

func (v *NullableListBranchResponse) Set(val *ListBranchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListBranchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListBranchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListBranchResponse(val *ListBranchResponse) *NullableListBranchResponse {
	return &NullableListBranchResponse{value: val, isSet: true}
}

func (v NullableListBranchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListBranchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
