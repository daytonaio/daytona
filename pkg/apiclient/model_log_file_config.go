/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LogFileConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogFileConfig{}

// LogFileConfig struct for LogFileConfig
type LogFileConfig struct {
	Compress   *bool  `json:"compress,omitempty"`
	LocalTime  *bool  `json:"localTime,omitempty"`
	MaxAge     int32  `json:"maxAge"`
	MaxBackups int32  `json:"maxBackups"`
	MaxSize    int32  `json:"maxSize"`
	Path       string `json:"path"`
}

type _LogFileConfig LogFileConfig

// NewLogFileConfig instantiates a new LogFileConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogFileConfig(maxAge int32, maxBackups int32, maxSize int32, path string) *LogFileConfig {
	this := LogFileConfig{}
	this.MaxAge = maxAge
	this.MaxBackups = maxBackups
	this.MaxSize = maxSize
	this.Path = path
	return &this
}

// NewLogFileConfigWithDefaults instantiates a new LogFileConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogFileConfigWithDefaults() *LogFileConfig {
	this := LogFileConfig{}
	return &this
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *LogFileConfig) GetCompress() bool {
	if o == nil || IsNil(o.Compress) {
		var ret bool
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetCompressOk() (*bool, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *LogFileConfig) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given bool and assigns it to the Compress field.
func (o *LogFileConfig) SetCompress(v bool) {
	o.Compress = &v
}

// GetLocalTime returns the LocalTime field value if set, zero value otherwise.
func (o *LogFileConfig) GetLocalTime() bool {
	if o == nil || IsNil(o.LocalTime) {
		var ret bool
		return ret
	}
	return *o.LocalTime
}

// GetLocalTimeOk returns a tuple with the LocalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetLocalTimeOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalTime) {
		return nil, false
	}
	return o.LocalTime, true
}

// HasLocalTime returns a boolean if a field has been set.
func (o *LogFileConfig) HasLocalTime() bool {
	if o != nil && !IsNil(o.LocalTime) {
		return true
	}

	return false
}

// SetLocalTime gets a reference to the given bool and assigns it to the LocalTime field.
func (o *LogFileConfig) SetLocalTime(v bool) {
	o.LocalTime = &v
}

// GetMaxAge returns the MaxAge field value
func (o *LogFileConfig) GetMaxAge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetMaxAgeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAge, true
}

// SetMaxAge sets field value
func (o *LogFileConfig) SetMaxAge(v int32) {
	o.MaxAge = v
}

// GetMaxBackups returns the MaxBackups field value
func (o *LogFileConfig) GetMaxBackups() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxBackups
}

// GetMaxBackupsOk returns a tuple with the MaxBackups field value
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetMaxBackupsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBackups, true
}

// SetMaxBackups sets field value
func (o *LogFileConfig) SetMaxBackups(v int32) {
	o.MaxBackups = v
}

// GetMaxSize returns the MaxSize field value
func (o *LogFileConfig) GetMaxSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetMaxSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSize, true
}

// SetMaxSize sets field value
func (o *LogFileConfig) SetMaxSize(v int32) {
	o.MaxSize = v
}

// GetPath returns the Path field value
func (o *LogFileConfig) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *LogFileConfig) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *LogFileConfig) SetPath(v string) {
	o.Path = v
}

func (o LogFileConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogFileConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.LocalTime) {
		toSerialize["localTime"] = o.LocalTime
	}
	toSerialize["maxAge"] = o.MaxAge
	toSerialize["maxBackups"] = o.MaxBackups
	toSerialize["maxSize"] = o.MaxSize
	toSerialize["path"] = o.Path
	return toSerialize, nil
}

func (o *LogFileConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maxAge",
		"maxBackups",
		"maxSize",
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogFileConfig := _LogFileConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogFileConfig)

	if err != nil {
		return err
	}

	*o = LogFileConfig(varLogFileConfig)

	return err
}

type NullableLogFileConfig struct {
	value *LogFileConfig
	isSet bool
}

func (v NullableLogFileConfig) Get() *LogFileConfig {
	return v.value
}

func (v *NullableLogFileConfig) Set(val *LogFileConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLogFileConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLogFileConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogFileConfig(val *LogFileConfig) *NullableLogFileConfig {
	return &NullableLogFileConfig{value: val, isSet: true}
}

func (v NullableLogFileConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogFileConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
