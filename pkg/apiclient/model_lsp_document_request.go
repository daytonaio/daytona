/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LspDocumentRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LspDocumentRequest{}

// LspDocumentRequest struct for LspDocumentRequest
type LspDocumentRequest struct {
	LanguageId    string `json:"languageId"`
	PathToProject string `json:"pathToProject"`
	Uri           string `json:"uri"`
}

type _LspDocumentRequest LspDocumentRequest

// NewLspDocumentRequest instantiates a new LspDocumentRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLspDocumentRequest(languageId string, pathToProject string, uri string) *LspDocumentRequest {
	this := LspDocumentRequest{}
	this.LanguageId = languageId
	this.PathToProject = pathToProject
	this.Uri = uri
	return &this
}

// NewLspDocumentRequestWithDefaults instantiates a new LspDocumentRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLspDocumentRequestWithDefaults() *LspDocumentRequest {
	this := LspDocumentRequest{}
	return &this
}

// GetLanguageId returns the LanguageId field value
func (o *LspDocumentRequest) GetLanguageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LanguageId
}

// GetLanguageIdOk returns a tuple with the LanguageId field value
// and a boolean to check if the value has been set.
func (o *LspDocumentRequest) GetLanguageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LanguageId, true
}

// SetLanguageId sets field value
func (o *LspDocumentRequest) SetLanguageId(v string) {
	o.LanguageId = v
}

// GetPathToProject returns the PathToProject field value
func (o *LspDocumentRequest) GetPathToProject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PathToProject
}

// GetPathToProjectOk returns a tuple with the PathToProject field value
// and a boolean to check if the value has been set.
func (o *LspDocumentRequest) GetPathToProjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PathToProject, true
}

// SetPathToProject sets field value
func (o *LspDocumentRequest) SetPathToProject(v string) {
	o.PathToProject = v
}

// GetUri returns the Uri field value
func (o *LspDocumentRequest) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *LspDocumentRequest) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *LspDocumentRequest) SetUri(v string) {
	o.Uri = v
}

func (o LspDocumentRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LspDocumentRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["languageId"] = o.LanguageId
	toSerialize["pathToProject"] = o.PathToProject
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *LspDocumentRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"languageId",
		"pathToProject",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLspDocumentRequest := _LspDocumentRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLspDocumentRequest)

	if err != nil {
		return err
	}

	*o = LspDocumentRequest(varLspDocumentRequest)

	return err
}

type NullableLspDocumentRequest struct {
	value *LspDocumentRequest
	isSet bool
}

func (v NullableLspDocumentRequest) Get() *LspDocumentRequest {
	return v.value
}

func (v *NullableLspDocumentRequest) Set(val *LspDocumentRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLspDocumentRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLspDocumentRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLspDocumentRequest(val *LspDocumentRequest) *NullableLspDocumentRequest {
	return &NullableLspDocumentRequest{value: val, isSet: true}
}

func (v NullableLspDocumentRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLspDocumentRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
