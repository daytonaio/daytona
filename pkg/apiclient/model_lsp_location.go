/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LspLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LspLocation{}

// LspLocation struct for LspLocation
type LspLocation struct {
	Range LspRange `json:"range"`
	Uri   string   `json:"uri"`
}

type _LspLocation LspLocation

// NewLspLocation instantiates a new LspLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLspLocation(range_ LspRange, uri string) *LspLocation {
	this := LspLocation{}
	this.Range = range_
	this.Uri = uri
	return &this
}

// NewLspLocationWithDefaults instantiates a new LspLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLspLocationWithDefaults() *LspLocation {
	this := LspLocation{}
	return &this
}

// GetRange returns the Range field value
func (o *LspLocation) GetRange() LspRange {
	if o == nil {
		var ret LspRange
		return ret
	}

	return o.Range
}

// GetRangeOk returns a tuple with the Range field value
// and a boolean to check if the value has been set.
func (o *LspLocation) GetRangeOk() (*LspRange, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Range, true
}

// SetRange sets field value
func (o *LspLocation) SetRange(v LspRange) {
	o.Range = v
}

// GetUri returns the Uri field value
func (o *LspLocation) GetUri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uri
}

// GetUriOk returns a tuple with the Uri field value
// and a boolean to check if the value has been set.
func (o *LspLocation) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uri, true
}

// SetUri sets field value
func (o *LspLocation) SetUri(v string) {
	o.Uri = v
}

func (o LspLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LspLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["range"] = o.Range
	toSerialize["uri"] = o.Uri
	return toSerialize, nil
}

func (o *LspLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"range",
		"uri",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLspLocation := _LspLocation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLspLocation)

	if err != nil {
		return err
	}

	*o = LspLocation(varLspLocation)

	return err
}

type NullableLspLocation struct {
	value *LspLocation
	isSet bool
}

func (v NullableLspLocation) Get() *LspLocation {
	return v.value
}

func (v *NullableLspLocation) Set(val *LspLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableLspLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLspLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLspLocation(val *LspLocation) *NullableLspLocation {
	return &NullableLspLocation{value: val, isSet: true}
}

func (v NullableLspLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLspLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
