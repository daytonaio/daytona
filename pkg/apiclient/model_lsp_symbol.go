/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the LspSymbol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LspSymbol{}

// LspSymbol struct for LspSymbol
type LspSymbol struct {
	Kind     int32       `json:"kind"`
	Location LspLocation `json:"location"`
	Name     string      `json:"name"`
}

type _LspSymbol LspSymbol

// NewLspSymbol instantiates a new LspSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLspSymbol(kind int32, location LspLocation, name string) *LspSymbol {
	this := LspSymbol{}
	this.Kind = kind
	this.Location = location
	this.Name = name
	return &this
}

// NewLspSymbolWithDefaults instantiates a new LspSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLspSymbolWithDefaults() *LspSymbol {
	this := LspSymbol{}
	return &this
}

// GetKind returns the Kind field value
func (o *LspSymbol) GetKind() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *LspSymbol) GetKindOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *LspSymbol) SetKind(v int32) {
	o.Kind = v
}

// GetLocation returns the Location field value
func (o *LspSymbol) GetLocation() LspLocation {
	if o == nil {
		var ret LspLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *LspSymbol) GetLocationOk() (*LspLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *LspSymbol) SetLocation(v LspLocation) {
	o.Location = v
}

// GetName returns the Name field value
func (o *LspSymbol) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LspSymbol) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LspSymbol) SetName(v string) {
	o.Name = v
}

func (o LspSymbol) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LspSymbol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["kind"] = o.Kind
	toSerialize["location"] = o.Location
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *LspSymbol) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"kind",
		"location",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLspSymbol := _LspSymbol{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLspSymbol)

	if err != nil {
		return err
	}

	*o = LspSymbol(varLspSymbol)

	return err
}

type NullableLspSymbol struct {
	value *LspSymbol
	isSet bool
}

func (v NullableLspSymbol) Get() *LspSymbol {
	return v.value
}

func (v *NullableLspSymbol) Set(val *LspSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableLspSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableLspSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLspSymbol(val *LspSymbol) *NullableLspSymbol {
	return &NullableLspSymbol{value: val, isSet: true}
}

func (v NullableLspSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLspSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
