/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ModelsApiKeyType the model 'ModelsApiKeyType'
type ModelsApiKeyType string

// List of models.ApiKeyType
const (
	ApiKeyTypeClient    ModelsApiKeyType = "client"
	ApiKeyTypeWorkspace ModelsApiKeyType = "workspace"
	ApiKeyTypeTarget    ModelsApiKeyType = "target"
	ApiKeyTypeRunner    ModelsApiKeyType = "runner"
)

// All allowed values of ModelsApiKeyType enum
var AllowedModelsApiKeyTypeEnumValues = []ModelsApiKeyType{
	"client",
	"workspace",
	"target",
	"runner",
}

func (v *ModelsApiKeyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsApiKeyType(value)
	for _, existing := range AllowedModelsApiKeyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsApiKeyType", value)
}

// NewModelsApiKeyTypeFromValue returns a pointer to a valid ModelsApiKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsApiKeyTypeFromValue(v string) (*ModelsApiKeyType, error) {
	ev := ModelsApiKeyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsApiKeyType: valid values are %v", v, AllowedModelsApiKeyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsApiKeyType) IsValid() bool {
	for _, existing := range AllowedModelsApiKeyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.ApiKeyType value
func (v ModelsApiKeyType) Ptr() *ModelsApiKeyType {
	return &v
}

type NullableModelsApiKeyType struct {
	value *ModelsApiKeyType
	isSet bool
}

func (v NullableModelsApiKeyType) Get() *ModelsApiKeyType {
	return v.value
}

func (v *NullableModelsApiKeyType) Set(val *ModelsApiKeyType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsApiKeyType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsApiKeyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsApiKeyType(val *ModelsApiKeyType) *NullableModelsApiKeyType {
	return &NullableModelsApiKeyType{value: val, isSet: true}
}

func (v NullableModelsApiKeyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsApiKeyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
