/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ModelsBuildState the model 'ModelsBuildState'
type ModelsBuildState string

// List of models.BuildState
const (
	BuildStatePendingRun          ModelsBuildState = "pending-run"
	BuildStateRunning             ModelsBuildState = "running"
	BuildStateError               ModelsBuildState = "error"
	BuildStateSuccess             ModelsBuildState = "success"
	BuildStatePublished           ModelsBuildState = "published"
	BuildStatePendingDelete       ModelsBuildState = "pending-delete"
	BuildStatePendingForcedDelete ModelsBuildState = "pending-forced-delete"
	BuildStateDeleting            ModelsBuildState = "deleting"
)

// All allowed values of ModelsBuildState enum
var AllowedModelsBuildStateEnumValues = []ModelsBuildState{
	"pending-run",
	"running",
	"error",
	"success",
	"published",
	"pending-delete",
	"pending-forced-delete",
	"deleting",
}

func (v *ModelsBuildState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsBuildState(value)
	for _, existing := range AllowedModelsBuildStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsBuildState", value)
}

// NewModelsBuildStateFromValue returns a pointer to a valid ModelsBuildState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsBuildStateFromValue(v string) (*ModelsBuildState, error) {
	ev := ModelsBuildState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsBuildState: valid values are %v", v, AllowedModelsBuildStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsBuildState) IsValid() bool {
	for _, existing := range AllowedModelsBuildStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.BuildState value
func (v ModelsBuildState) Ptr() *ModelsBuildState {
	return &v
}

type NullableModelsBuildState struct {
	value *ModelsBuildState
	isSet bool
}

func (v NullableModelsBuildState) Get() *ModelsBuildState {
	return v.value
}

func (v *NullableModelsBuildState) Set(val *ModelsBuildState) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsBuildState) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsBuildState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsBuildState(val *ModelsBuildState) *NullableModelsBuildState {
	return &NullableModelsBuildState{value: val, isSet: true}
}

func (v NullableModelsBuildState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsBuildState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
