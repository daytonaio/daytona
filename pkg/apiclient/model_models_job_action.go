/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ModelsJobAction the model 'ModelsJobAction'
type ModelsJobAction string

// List of models.JobAction
const (
	JobActionCreate            ModelsJobAction = "create"
	JobActionStart             ModelsJobAction = "start"
	JobActionStop              ModelsJobAction = "stop"
	JobActionRestart           ModelsJobAction = "restart"
	JobActionDelete            ModelsJobAction = "delete"
	JobActionForceDelete       ModelsJobAction = "force-delete"
	JobActionRun               ModelsJobAction = "run"
	JobActionInstallProvider   ModelsJobAction = "install-provider"
	JobActionUninstallProvider ModelsJobAction = "uninstall-provider"
	JobActionUpdateProvider    ModelsJobAction = "update-provider"
)

// All allowed values of ModelsJobAction enum
var AllowedModelsJobActionEnumValues = []ModelsJobAction{
	"create",
	"start",
	"stop",
	"restart",
	"delete",
	"force-delete",
	"run",
	"install-provider",
	"uninstall-provider",
	"update-provider",
}

func (v *ModelsJobAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsJobAction(value)
	for _, existing := range AllowedModelsJobActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsJobAction", value)
}

// NewModelsJobActionFromValue returns a pointer to a valid ModelsJobAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsJobActionFromValue(v string) (*ModelsJobAction, error) {
	ev := ModelsJobAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsJobAction: valid values are %v", v, AllowedModelsJobActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsJobAction) IsValid() bool {
	for _, existing := range AllowedModelsJobActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.JobAction value
func (v ModelsJobAction) Ptr() *ModelsJobAction {
	return &v
}

type NullableModelsJobAction struct {
	value *ModelsJobAction
	isSet bool
}

func (v NullableModelsJobAction) Get() *ModelsJobAction {
	return v.value
}

func (v *NullableModelsJobAction) Set(val *ModelsJobAction) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsJobAction) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsJobAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsJobAction(val *ModelsJobAction) *NullableModelsJobAction {
	return &NullableModelsJobAction{value: val, isSet: true}
}

func (v NullableModelsJobAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsJobAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
