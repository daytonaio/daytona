/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ModelsResourceStateName the model 'ModelsResourceStateName'
type ModelsResourceStateName string

// List of models.ResourceStateName
const (
	ResourceStateNameUndefined           ModelsResourceStateName = "undefined"
	ResourceStateNamePendingRun          ModelsResourceStateName = "pending-run"
	ResourceStateNameRunning             ModelsResourceStateName = "running"
	ResourceStateNameRunSuccessful       ModelsResourceStateName = "run-successful"
	ResourceStateNamePendingCreate       ModelsResourceStateName = "pending-create"
	ResourceStateNameCreating            ModelsResourceStateName = "creating"
	ResourceStateNamePendingStart        ModelsResourceStateName = "pending-start"
	ResourceStateNameStarting            ModelsResourceStateName = "starting"
	ResourceStateNameStarted             ModelsResourceStateName = "started"
	ResourceStateNamePendingStop         ModelsResourceStateName = "pending-stop"
	ResourceStateNameStopping            ModelsResourceStateName = "stopping"
	ResourceStateNameStopped             ModelsResourceStateName = "stopped"
	ResourceStateNamePendingRestart      ModelsResourceStateName = "pending-restart"
	ResourceStateNameError               ModelsResourceStateName = "error"
	ResourceStateNameUnresponsive        ModelsResourceStateName = "unresponsive"
	ResourceStateNamePendingDelete       ModelsResourceStateName = "pending-delete"
	ResourceStateNamePendingForcedDelete ModelsResourceStateName = "pending-forced-delete"
	ResourceStateNameDeleting            ModelsResourceStateName = "deleting"
	ResourceStateNameDeleted             ModelsResourceStateName = "deleted"
)

// All allowed values of ModelsResourceStateName enum
var AllowedModelsResourceStateNameEnumValues = []ModelsResourceStateName{
	"undefined",
	"pending-run",
	"running",
	"run-successful",
	"pending-create",
	"creating",
	"pending-start",
	"starting",
	"started",
	"pending-stop",
	"stopping",
	"stopped",
	"pending-restart",
	"error",
	"unresponsive",
	"pending-delete",
	"pending-forced-delete",
	"deleting",
	"deleted",
}

func (v *ModelsResourceStateName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsResourceStateName(value)
	for _, existing := range AllowedModelsResourceStateNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsResourceStateName", value)
}

// NewModelsResourceStateNameFromValue returns a pointer to a valid ModelsResourceStateName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsResourceStateNameFromValue(v string) (*ModelsResourceStateName, error) {
	ev := ModelsResourceStateName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsResourceStateName: valid values are %v", v, AllowedModelsResourceStateNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsResourceStateName) IsValid() bool {
	for _, existing := range AllowedModelsResourceStateNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.ResourceStateName value
func (v ModelsResourceStateName) Ptr() *ModelsResourceStateName {
	return &v
}

type NullableModelsResourceStateName struct {
	value *ModelsResourceStateName
	isSet bool
}

func (v NullableModelsResourceStateName) Get() *ModelsResourceStateName {
	return v.value
}

func (v *NullableModelsResourceStateName) Set(val *ModelsResourceStateName) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsResourceStateName) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsResourceStateName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsResourceStateName(val *ModelsResourceStateName) *NullableModelsResourceStateName {
	return &NullableModelsResourceStateName{value: val, isSet: true}
}

func (v NullableModelsResourceStateName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsResourceStateName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
