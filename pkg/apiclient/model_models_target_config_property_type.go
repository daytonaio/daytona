/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ModelsTargetConfigPropertyType the model 'ModelsTargetConfigPropertyType'
type ModelsTargetConfigPropertyType string

// List of models.TargetConfigPropertyType
const (
	TargetConfigPropertyTypeString   ModelsTargetConfigPropertyType = "string"
	TargetConfigPropertyTypeOption   ModelsTargetConfigPropertyType = "option"
	TargetConfigPropertyTypeBoolean  ModelsTargetConfigPropertyType = "boolean"
	TargetConfigPropertyTypeInt      ModelsTargetConfigPropertyType = "int"
	TargetConfigPropertyTypeFloat    ModelsTargetConfigPropertyType = "float"
	TargetConfigPropertyTypeFilePath ModelsTargetConfigPropertyType = "file-path"
)

// All allowed values of ModelsTargetConfigPropertyType enum
var AllowedModelsTargetConfigPropertyTypeEnumValues = []ModelsTargetConfigPropertyType{
	"string",
	"option",
	"boolean",
	"int",
	"float",
	"file-path",
}

func (v *ModelsTargetConfigPropertyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelsTargetConfigPropertyType(value)
	for _, existing := range AllowedModelsTargetConfigPropertyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelsTargetConfigPropertyType", value)
}

// NewModelsTargetConfigPropertyTypeFromValue returns a pointer to a valid ModelsTargetConfigPropertyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelsTargetConfigPropertyTypeFromValue(v string) (*ModelsTargetConfigPropertyType, error) {
	ev := ModelsTargetConfigPropertyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelsTargetConfigPropertyType: valid values are %v", v, AllowedModelsTargetConfigPropertyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelsTargetConfigPropertyType) IsValid() bool {
	for _, existing := range AllowedModelsTargetConfigPropertyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to models.TargetConfigPropertyType value
func (v ModelsTargetConfigPropertyType) Ptr() *ModelsTargetConfigPropertyType {
	return &v
}

type NullableModelsTargetConfigPropertyType struct {
	value *ModelsTargetConfigPropertyType
	isSet bool
}

func (v NullableModelsTargetConfigPropertyType) Get() *ModelsTargetConfigPropertyType {
	return v.value
}

func (v *NullableModelsTargetConfigPropertyType) Set(val *ModelsTargetConfigPropertyType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTargetConfigPropertyType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTargetConfigPropertyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTargetConfigPropertyType(val *ModelsTargetConfigPropertyType) *NullableModelsTargetConfigPropertyType {
	return &NullableModelsTargetConfigPropertyType{value: val, isSet: true}
}

func (v NullableModelsTargetConfigPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTargetConfigPropertyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
