/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProfileData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileData{}

// ProfileData struct for ProfileData
type ProfileData struct {
	EnvVars map[string]string `json:"envVars"`
}

type _ProfileData ProfileData

// NewProfileData instantiates a new ProfileData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileData(envVars map[string]string) *ProfileData {
	this := ProfileData{}
	this.EnvVars = envVars
	return &this
}

// NewProfileDataWithDefaults instantiates a new ProfileData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDataWithDefaults() *ProfileData {
	this := ProfileData{}
	return &this
}

// GetEnvVars returns the EnvVars field value
func (o *ProfileData) GetEnvVars() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value
// and a boolean to check if the value has been set.
func (o *ProfileData) GetEnvVarsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvVars, true
}

// SetEnvVars sets field value
func (o *ProfileData) SetEnvVars(v map[string]string) {
	o.EnvVars = v
}

func (o ProfileData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["envVars"] = o.EnvVars
	return toSerialize, nil
}

func (o *ProfileData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"envVars",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfileData := _ProfileData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProfileData)

	if err != nil {
		return err
	}

	*o = ProfileData(varProfileData)

	return err
}

type NullableProfileData struct {
	value *ProfileData
	isSet bool
}

func (v NullableProfileData) Get() *ProfileData {
	return v.value
}

func (v *NullableProfileData) Set(val *ProfileData) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileData) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileData(val *ProfileData) *NullableProfileData {
	return &NullableProfileData{value: val, isSet: true}
}

func (v NullableProfileData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
