/*
Daytona Server API

Daytona Server API

API version: 0.24.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ProfileData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileData{}

// ProfileData struct for ProfileData
type ProfileData struct {
	EnvVars *map[string]string `json:"envVars,omitempty"`
}

// NewProfileData instantiates a new ProfileData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileData() *ProfileData {
	this := ProfileData{}
	return &this
}

// NewProfileDataWithDefaults instantiates a new ProfileData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileDataWithDefaults() *ProfileData {
	this := ProfileData{}
	return &this
}

// GetEnvVars returns the EnvVars field value if set, zero value otherwise.
func (o *ProfileData) GetEnvVars() map[string]string {
	if o == nil || IsNil(o.EnvVars) {
		var ret map[string]string
		return ret
	}
	return *o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileData) GetEnvVarsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.EnvVars) {
		return nil, false
	}
	return o.EnvVars, true
}

// HasEnvVars returns a boolean if a field has been set.
func (o *ProfileData) HasEnvVars() bool {
	if o != nil && !IsNil(o.EnvVars) {
		return true
	}

	return false
}

// SetEnvVars gets a reference to the given map[string]string and assigns it to the EnvVars field.
func (o *ProfileData) SetEnvVars(v map[string]string) {
	o.EnvVars = &v
}

func (o ProfileData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnvVars) {
		toSerialize["envVars"] = o.EnvVars
	}
	return toSerialize, nil
}

type NullableProfileData struct {
	value *ProfileData
	isSet bool
}

func (v NullableProfileData) Get() *ProfileData {
	return v.value
}

func (v *NullableProfileData) Set(val *ProfileData) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileData) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileData(val *ProfileData) *NullableProfileData {
	return &NullableProfileData{value: val, isSet: true}
}

func (v NullableProfileData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
