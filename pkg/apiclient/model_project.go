/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the Project type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Project{}

// Project struct for Project
type Project struct {
	Build              *ProjectBuild  `json:"build,omitempty"`
	Image              *string        `json:"image,omitempty"`
	Name               *string        `json:"name,omitempty"`
	PostCreateCommands []string       `json:"postCreateCommands,omitempty"`
	PostStartCommands  []string       `json:"postStartCommands,omitempty"`
	Repository         *GitRepository `json:"repository,omitempty"`
	State              *ProjectState  `json:"state,omitempty"`
	Target             *string        `json:"target,omitempty"`
	User               *string        `json:"user,omitempty"`
	WorkspaceId        *string        `json:"workspaceId,omitempty"`
}

// NewProject instantiates a new Project object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProject() *Project {
	this := Project{}
	return &this
}

// NewProjectWithDefaults instantiates a new Project object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectWithDefaults() *Project {
	this := Project{}
	return &this
}

// GetBuild returns the Build field value if set, zero value otherwise.
func (o *Project) GetBuild() ProjectBuild {
	if o == nil || IsNil(o.Build) {
		var ret ProjectBuild
		return ret
	}
	return *o.Build
}

// GetBuildOk returns a tuple with the Build field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetBuildOk() (*ProjectBuild, bool) {
	if o == nil || IsNil(o.Build) {
		return nil, false
	}
	return o.Build, true
}

// HasBuild returns a boolean if a field has been set.
func (o *Project) HasBuild() bool {
	if o != nil && !IsNil(o.Build) {
		return true
	}

	return false
}

// SetBuild gets a reference to the given ProjectBuild and assigns it to the Build field.
func (o *Project) SetBuild(v ProjectBuild) {
	o.Build = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *Project) GetImage() string {
	if o == nil || IsNil(o.Image) {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetImageOk() (*string, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *Project) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *Project) SetImage(v string) {
	o.Image = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Project) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Project) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Project) SetName(v string) {
	o.Name = &v
}

// GetPostCreateCommands returns the PostCreateCommands field value if set, zero value otherwise.
func (o *Project) GetPostCreateCommands() []string {
	if o == nil || IsNil(o.PostCreateCommands) {
		var ret []string
		return ret
	}
	return o.PostCreateCommands
}

// GetPostCreateCommandsOk returns a tuple with the PostCreateCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPostCreateCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.PostCreateCommands) {
		return nil, false
	}
	return o.PostCreateCommands, true
}

// HasPostCreateCommands returns a boolean if a field has been set.
func (o *Project) HasPostCreateCommands() bool {
	if o != nil && !IsNil(o.PostCreateCommands) {
		return true
	}

	return false
}

// SetPostCreateCommands gets a reference to the given []string and assigns it to the PostCreateCommands field.
func (o *Project) SetPostCreateCommands(v []string) {
	o.PostCreateCommands = v
}

// GetPostStartCommands returns the PostStartCommands field value if set, zero value otherwise.
func (o *Project) GetPostStartCommands() []string {
	if o == nil || IsNil(o.PostStartCommands) {
		var ret []string
		return ret
	}
	return o.PostStartCommands
}

// GetPostStartCommandsOk returns a tuple with the PostStartCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetPostStartCommandsOk() ([]string, bool) {
	if o == nil || IsNil(o.PostStartCommands) {
		return nil, false
	}
	return o.PostStartCommands, true
}

// HasPostStartCommands returns a boolean if a field has been set.
func (o *Project) HasPostStartCommands() bool {
	if o != nil && !IsNil(o.PostStartCommands) {
		return true
	}

	return false
}

// SetPostStartCommands gets a reference to the given []string and assigns it to the PostStartCommands field.
func (o *Project) SetPostStartCommands(v []string) {
	o.PostStartCommands = v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *Project) GetRepository() GitRepository {
	if o == nil || IsNil(o.Repository) {
		var ret GitRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetRepositoryOk() (*GitRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *Project) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given GitRepository and assigns it to the Repository field.
func (o *Project) SetRepository(v GitRepository) {
	o.Repository = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Project) GetState() ProjectState {
	if o == nil || IsNil(o.State) {
		var ret ProjectState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetStateOk() (*ProjectState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Project) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ProjectState and assigns it to the State field.
func (o *Project) SetState(v ProjectState) {
	o.State = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Project) GetTarget() string {
	if o == nil || IsNil(o.Target) {
		var ret string
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetTargetOk() (*string, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Project) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given string and assigns it to the Target field.
func (o *Project) SetTarget(v string) {
	o.Target = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *Project) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *Project) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *Project) SetUser(v string) {
	o.User = &v
}

// GetWorkspaceId returns the WorkspaceId field value if set, zero value otherwise.
func (o *Project) GetWorkspaceId() string {
	if o == nil || IsNil(o.WorkspaceId) {
		var ret string
		return ret
	}
	return *o.WorkspaceId
}

// GetWorkspaceIdOk returns a tuple with the WorkspaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Project) GetWorkspaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.WorkspaceId) {
		return nil, false
	}
	return o.WorkspaceId, true
}

// HasWorkspaceId returns a boolean if a field has been set.
func (o *Project) HasWorkspaceId() bool {
	if o != nil && !IsNil(o.WorkspaceId) {
		return true
	}

	return false
}

// SetWorkspaceId gets a reference to the given string and assigns it to the WorkspaceId field.
func (o *Project) SetWorkspaceId(v string) {
	o.WorkspaceId = &v
}

func (o Project) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Project) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Build) {
		toSerialize["build"] = o.Build
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PostCreateCommands) {
		toSerialize["postCreateCommands"] = o.PostCreateCommands
	}
	if !IsNil(o.PostStartCommands) {
		toSerialize["postStartCommands"] = o.PostStartCommands
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.WorkspaceId) {
		toSerialize["workspaceId"] = o.WorkspaceId
	}
	return toSerialize, nil
}

type NullableProject struct {
	value *Project
	isSet bool
}

func (v NullableProject) Get() *Project {
	return v.value
}

func (v *NullableProject) Set(val *Project) {
	v.value = val
	v.isSet = true
}

func (v NullableProject) IsSet() bool {
	return v.isSet
}

func (v *NullableProject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProject(val *Project) *NullableProject {
	return &NullableProject{value: val, isSet: true}
}

func (v NullableProject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
