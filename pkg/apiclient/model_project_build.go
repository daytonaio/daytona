/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ProjectBuild type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBuild{}

// ProjectBuild struct for ProjectBuild
type ProjectBuild struct {
	Devcontainer *ProjectBuildDevcontainer `json:"devcontainer,omitempty"`
	Dockerfile   *ProjectBuildDockerfile   `json:"dockerfile,omitempty"`
}

// NewProjectBuild instantiates a new ProjectBuild object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBuild() *ProjectBuild {
	this := ProjectBuild{}
	return &this
}

// NewProjectBuildWithDefaults instantiates a new ProjectBuild object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBuildWithDefaults() *ProjectBuild {
	this := ProjectBuild{}
	return &this
}

// GetDevcontainer returns the Devcontainer field value if set, zero value otherwise.
func (o *ProjectBuild) GetDevcontainer() ProjectBuildDevcontainer {
	if o == nil || IsNil(o.Devcontainer) {
		var ret ProjectBuildDevcontainer
		return ret
	}
	return *o.Devcontainer
}

// GetDevcontainerOk returns a tuple with the Devcontainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBuild) GetDevcontainerOk() (*ProjectBuildDevcontainer, bool) {
	if o == nil || IsNil(o.Devcontainer) {
		return nil, false
	}
	return o.Devcontainer, true
}

// HasDevcontainer returns a boolean if a field has been set.
func (o *ProjectBuild) HasDevcontainer() bool {
	if o != nil && !IsNil(o.Devcontainer) {
		return true
	}

	return false
}

// SetDevcontainer gets a reference to the given ProjectBuildDevcontainer and assigns it to the Devcontainer field.
func (o *ProjectBuild) SetDevcontainer(v ProjectBuildDevcontainer) {
	o.Devcontainer = &v
}

// GetDockerfile returns the Dockerfile field value if set, zero value otherwise.
func (o *ProjectBuild) GetDockerfile() ProjectBuildDockerfile {
	if o == nil || IsNil(o.Dockerfile) {
		var ret ProjectBuildDockerfile
		return ret
	}
	return *o.Dockerfile
}

// GetDockerfileOk returns a tuple with the Dockerfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBuild) GetDockerfileOk() (*ProjectBuildDockerfile, bool) {
	if o == nil || IsNil(o.Dockerfile) {
		return nil, false
	}
	return o.Dockerfile, true
}

// HasDockerfile returns a boolean if a field has been set.
func (o *ProjectBuild) HasDockerfile() bool {
	if o != nil && !IsNil(o.Dockerfile) {
		return true
	}

	return false
}

// SetDockerfile gets a reference to the given ProjectBuildDockerfile and assigns it to the Dockerfile field.
func (o *ProjectBuild) SetDockerfile(v ProjectBuildDockerfile) {
	o.Dockerfile = &v
}

func (o ProjectBuild) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBuild) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Devcontainer) {
		toSerialize["devcontainer"] = o.Devcontainer
	}
	if !IsNil(o.Dockerfile) {
		toSerialize["dockerfile"] = o.Dockerfile
	}
	return toSerialize, nil
}

type NullableProjectBuild struct {
	value *ProjectBuild
	isSet bool
}

func (v NullableProjectBuild) Get() *ProjectBuild {
	return v.value
}

func (v *NullableProjectBuild) Set(val *ProjectBuild) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBuild) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBuild) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBuild(val *ProjectBuild) *NullableProjectBuild {
	return &NullableProjectBuild{value: val, isSet: true}
}

func (v NullableProjectBuild) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBuild) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
