/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the ProjectBuildDockerfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBuildDockerfile{}

// ProjectBuildDockerfile struct for ProjectBuildDockerfile
type ProjectBuildDockerfile struct {
	Args       *map[string]string `json:"args,omitempty"`
	Context    *string            `json:"context,omitempty"`
	Dockerfile *string            `json:"dockerfile,omitempty"`
}

// NewProjectBuildDockerfile instantiates a new ProjectBuildDockerfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBuildDockerfile() *ProjectBuildDockerfile {
	this := ProjectBuildDockerfile{}
	return &this
}

// NewProjectBuildDockerfileWithDefaults instantiates a new ProjectBuildDockerfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBuildDockerfileWithDefaults() *ProjectBuildDockerfile {
	this := ProjectBuildDockerfile{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ProjectBuildDockerfile) GetArgs() map[string]string {
	if o == nil || IsNil(o.Args) {
		var ret map[string]string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBuildDockerfile) GetArgsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ProjectBuildDockerfile) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]string and assigns it to the Args field.
func (o *ProjectBuildDockerfile) SetArgs(v map[string]string) {
	o.Args = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ProjectBuildDockerfile) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBuildDockerfile) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ProjectBuildDockerfile) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *ProjectBuildDockerfile) SetContext(v string) {
	o.Context = &v
}

// GetDockerfile returns the Dockerfile field value if set, zero value otherwise.
func (o *ProjectBuildDockerfile) GetDockerfile() string {
	if o == nil || IsNil(o.Dockerfile) {
		var ret string
		return ret
	}
	return *o.Dockerfile
}

// GetDockerfileOk returns a tuple with the Dockerfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBuildDockerfile) GetDockerfileOk() (*string, bool) {
	if o == nil || IsNil(o.Dockerfile) {
		return nil, false
	}
	return o.Dockerfile, true
}

// HasDockerfile returns a boolean if a field has been set.
func (o *ProjectBuildDockerfile) HasDockerfile() bool {
	if o != nil && !IsNil(o.Dockerfile) {
		return true
	}

	return false
}

// SetDockerfile gets a reference to the given string and assigns it to the Dockerfile field.
func (o *ProjectBuildDockerfile) SetDockerfile(v string) {
	o.Dockerfile = &v
}

func (o ProjectBuildDockerfile) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBuildDockerfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.Dockerfile) {
		toSerialize["dockerfile"] = o.Dockerfile
	}
	return toSerialize, nil
}

type NullableProjectBuildDockerfile struct {
	value *ProjectBuildDockerfile
	isSet bool
}

func (v NullableProjectBuildDockerfile) Get() *ProjectBuildDockerfile {
	return v.value
}

func (v *NullableProjectBuildDockerfile) Set(val *ProjectBuildDockerfile) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBuildDockerfile) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBuildDockerfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBuildDockerfile(val *ProjectBuildDockerfile) *NullableProjectBuildDockerfile {
	return &NullableProjectBuildDockerfile{value: val, isSet: true}
}

func (v NullableProjectBuildDockerfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBuildDockerfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
