/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProviderDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderDTO{}

// ProviderDTO struct for ProviderDTO
type ProviderDTO struct {
	Label   *string `json:"label,omitempty"`
	Latest  bool    `json:"latest"`
	Name    string  `json:"name"`
	Version string  `json:"version"`
}

type _ProviderDTO ProviderDTO

// NewProviderDTO instantiates a new ProviderDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderDTO(latest bool, name string, version string) *ProviderDTO {
	this := ProviderDTO{}
	this.Latest = latest
	this.Name = name
	this.Version = version
	return &this
}

// NewProviderDTOWithDefaults instantiates a new ProviderDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderDTOWithDefaults() *ProviderDTO {
	this := ProviderDTO{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProviderDTO) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderDTO) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProviderDTO) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProviderDTO) SetLabel(v string) {
	o.Label = &v
}

// GetLatest returns the Latest field value
func (o *ProviderDTO) GetLatest() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value
// and a boolean to check if the value has been set.
func (o *ProviderDTO) GetLatestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latest, true
}

// SetLatest sets field value
func (o *ProviderDTO) SetLatest(v bool) {
	o.Latest = v
}

// GetName returns the Name field value
func (o *ProviderDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderDTO) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *ProviderDTO) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ProviderDTO) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ProviderDTO) SetVersion(v string) {
	o.Version = v
}

func (o ProviderDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["latest"] = o.Latest
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ProviderDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latest",
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderDTO := _ProviderDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderDTO)

	if err != nil {
		return err
	}

	*o = ProviderDTO(varProviderDTO)

	return err
}

type NullableProviderDTO struct {
	value *ProviderDTO
	isSet bool
}

func (v NullableProviderDTO) Get() *ProviderDTO {
	return v.value
}

func (v *NullableProviderDTO) Set(val *ProviderDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderDTO(val *ProviderDTO) *NullableProviderDTO {
	return &NullableProviderDTO{value: val, isSet: true}
}

func (v NullableProviderDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
