/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderInfo{}

// ProviderInfo struct for ProviderInfo
type ProviderInfo struct {
	AgentlessTarget      *bool                           `json:"agentlessTarget,omitempty"`
	Label                *string                         `json:"label,omitempty"`
	Name                 string                          `json:"name"`
	RunnerId             string                          `json:"runnerId"`
	RunnerName           string                          `json:"runnerName"`
	TargetConfigManifest map[string]TargetConfigProperty `json:"targetConfigManifest"`
	Version              string                          `json:"version"`
}

type _ProviderInfo ProviderInfo

// NewProviderInfo instantiates a new ProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderInfo(name string, runnerId string, runnerName string, targetConfigManifest map[string]TargetConfigProperty, version string) *ProviderInfo {
	this := ProviderInfo{}
	this.Name = name
	this.RunnerId = runnerId
	this.RunnerName = runnerName
	this.TargetConfigManifest = targetConfigManifest
	this.Version = version
	return &this
}

// NewProviderInfoWithDefaults instantiates a new ProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderInfoWithDefaults() *ProviderInfo {
	this := ProviderInfo{}
	return &this
}

// GetAgentlessTarget returns the AgentlessTarget field value if set, zero value otherwise.
func (o *ProviderInfo) GetAgentlessTarget() bool {
	if o == nil || IsNil(o.AgentlessTarget) {
		var ret bool
		return ret
	}
	return *o.AgentlessTarget
}

// GetAgentlessTargetOk returns a tuple with the AgentlessTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetAgentlessTargetOk() (*bool, bool) {
	if o == nil || IsNil(o.AgentlessTarget) {
		return nil, false
	}
	return o.AgentlessTarget, true
}

// HasAgentlessTarget returns a boolean if a field has been set.
func (o *ProviderInfo) HasAgentlessTarget() bool {
	if o != nil && !IsNil(o.AgentlessTarget) {
		return true
	}

	return false
}

// SetAgentlessTarget gets a reference to the given bool and assigns it to the AgentlessTarget field.
func (o *ProviderInfo) SetAgentlessTarget(v bool) {
	o.AgentlessTarget = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProviderInfo) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProviderInfo) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProviderInfo) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value
func (o *ProviderInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderInfo) SetName(v string) {
	o.Name = v
}

// GetRunnerId returns the RunnerId field value
func (o *ProviderInfo) GetRunnerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunnerId
}

// GetRunnerIdOk returns a tuple with the RunnerId field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetRunnerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunnerId, true
}

// SetRunnerId sets field value
func (o *ProviderInfo) SetRunnerId(v string) {
	o.RunnerId = v
}

// GetRunnerName returns the RunnerName field value
func (o *ProviderInfo) GetRunnerName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunnerName
}

// GetRunnerNameOk returns a tuple with the RunnerName field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetRunnerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunnerName, true
}

// SetRunnerName sets field value
func (o *ProviderInfo) SetRunnerName(v string) {
	o.RunnerName = v
}

// GetTargetConfigManifest returns the TargetConfigManifest field value
func (o *ProviderInfo) GetTargetConfigManifest() map[string]TargetConfigProperty {
	if o == nil {
		var ret map[string]TargetConfigProperty
		return ret
	}

	return o.TargetConfigManifest
}

// GetTargetConfigManifestOk returns a tuple with the TargetConfigManifest field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetTargetConfigManifestOk() (*map[string]TargetConfigProperty, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetConfigManifest, true
}

// SetTargetConfigManifest sets field value
func (o *ProviderInfo) SetTargetConfigManifest(v map[string]TargetConfigProperty) {
	o.TargetConfigManifest = v
}

// GetVersion returns the Version field value
func (o *ProviderInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ProviderInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ProviderInfo) SetVersion(v string) {
	o.Version = v
}

func (o ProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgentlessTarget) {
		toSerialize["agentlessTarget"] = o.AgentlessTarget
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	toSerialize["name"] = o.Name
	toSerialize["runnerId"] = o.RunnerId
	toSerialize["runnerName"] = o.RunnerName
	toSerialize["targetConfigManifest"] = o.TargetConfigManifest
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ProviderInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"runnerId",
		"runnerName",
		"targetConfigManifest",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderInfo := _ProviderInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderInfo)

	if err != nil {
		return err
	}

	*o = ProviderInfo(varProviderInfo)

	return err
}

type NullableProviderInfo struct {
	value *ProviderInfo
	isSet bool
}

func (v NullableProviderInfo) Get() *ProviderInfo {
	return v.value
}

func (v *NullableProviderInfo) Set(val *ProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderInfo(val *ProviderInfo) *NullableProviderInfo {
	return &NullableProviderInfo{value: val, isSet: true}
}

func (v NullableProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
