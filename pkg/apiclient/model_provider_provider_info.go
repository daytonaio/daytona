/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProviderProviderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProviderProviderInfo{}

// ProviderProviderInfo struct for ProviderProviderInfo
type ProviderProviderInfo struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type _ProviderProviderInfo ProviderProviderInfo

// NewProviderProviderInfo instantiates a new ProviderProviderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProviderProviderInfo(name string, version string) *ProviderProviderInfo {
	this := ProviderProviderInfo{}
	this.Name = name
	this.Version = version
	return &this
}

// NewProviderProviderInfoWithDefaults instantiates a new ProviderProviderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProviderProviderInfoWithDefaults() *ProviderProviderInfo {
	this := ProviderProviderInfo{}
	return &this
}

// GetName returns the Name field value
func (o *ProviderProviderInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProviderProviderInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProviderProviderInfo) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *ProviderProviderInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ProviderProviderInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ProviderProviderInfo) SetVersion(v string) {
	o.Version = v
}

func (o ProviderProviderInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProviderProviderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *ProviderProviderInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProviderProviderInfo := _ProviderProviderInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProviderProviderInfo)

	if err != nil {
		return err
	}

	*o = ProviderProviderInfo(varProviderProviderInfo)

	return err
}

type NullableProviderProviderInfo struct {
	value *ProviderProviderInfo
	isSet bool
}

func (v NullableProviderProviderInfo) Get() *ProviderProviderInfo {
	return v.value
}

func (v *NullableProviderProviderInfo) Set(val *ProviderProviderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderProviderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderProviderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderProviderInfo(val *ProviderProviderInfo) *NullableProviderProviderInfo {
	return &NullableProviderProviderInfo{value: val, isSet: true}
}

func (v NullableProviderProviderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderProviderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
