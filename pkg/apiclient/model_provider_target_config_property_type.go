/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"fmt"
)

// ProviderTargetConfigPropertyType the model 'ProviderTargetConfigPropertyType'
type ProviderTargetConfigPropertyType string

// List of provider.TargetConfigPropertyType
const (
	TargetConfigPropertyTypeString   ProviderTargetConfigPropertyType = "string"
	TargetConfigPropertyTypeOption   ProviderTargetConfigPropertyType = "option"
	TargetConfigPropertyTypeBoolean  ProviderTargetConfigPropertyType = "boolean"
	TargetConfigPropertyTypeInt      ProviderTargetConfigPropertyType = "int"
	TargetConfigPropertyTypeFloat    ProviderTargetConfigPropertyType = "float"
	TargetConfigPropertyTypeFilePath ProviderTargetConfigPropertyType = "file-path"
)

// All allowed values of ProviderTargetConfigPropertyType enum
var AllowedProviderTargetConfigPropertyTypeEnumValues = []ProviderTargetConfigPropertyType{
	"string",
	"option",
	"boolean",
	"int",
	"float",
	"file-path",
}

func (v *ProviderTargetConfigPropertyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderTargetConfigPropertyType(value)
	for _, existing := range AllowedProviderTargetConfigPropertyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderTargetConfigPropertyType", value)
}

// NewProviderTargetConfigPropertyTypeFromValue returns a pointer to a valid ProviderTargetConfigPropertyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderTargetConfigPropertyTypeFromValue(v string) (*ProviderTargetConfigPropertyType, error) {
	ev := ProviderTargetConfigPropertyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderTargetConfigPropertyType: valid values are %v", v, AllowedProviderTargetConfigPropertyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderTargetConfigPropertyType) IsValid() bool {
	for _, existing := range AllowedProviderTargetConfigPropertyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to provider.TargetConfigPropertyType value
func (v ProviderTargetConfigPropertyType) Ptr() *ProviderTargetConfigPropertyType {
	return &v
}

type NullableProviderTargetConfigPropertyType struct {
	value *ProviderTargetConfigPropertyType
	isSet bool
}

func (v NullableProviderTargetConfigPropertyType) Get() *ProviderTargetConfigPropertyType {
	return v.value
}

func (v *NullableProviderTargetConfigPropertyType) Set(val *ProviderTargetConfigPropertyType) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderTargetConfigPropertyType) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderTargetConfigPropertyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderTargetConfigPropertyType(val *ProviderTargetConfigPropertyType) *NullableProviderTargetConfigPropertyType {
	return &NullableProviderTargetConfigPropertyType{value: val, isSet: true}
}

func (v NullableProviderTargetConfigPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderTargetConfigPropertyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
