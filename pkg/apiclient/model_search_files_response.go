/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SearchFilesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchFilesResponse{}

// SearchFilesResponse struct for SearchFilesResponse
type SearchFilesResponse struct {
	Files []string `json:"files"`
}

type _SearchFilesResponse SearchFilesResponse

// NewSearchFilesResponse instantiates a new SearchFilesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchFilesResponse(files []string) *SearchFilesResponse {
	this := SearchFilesResponse{}
	this.Files = files
	return &this
}

// NewSearchFilesResponseWithDefaults instantiates a new SearchFilesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchFilesResponseWithDefaults() *SearchFilesResponse {
	this := SearchFilesResponse{}
	return &this
}

// GetFiles returns the Files field value
func (o *SearchFilesResponse) GetFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *SearchFilesResponse) GetFilesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *SearchFilesResponse) SetFiles(v []string) {
	o.Files = v
}

func (o SearchFilesResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchFilesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["files"] = o.Files
	return toSerialize, nil
}

func (o *SearchFilesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"files",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchFilesResponse := _SearchFilesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchFilesResponse)

	if err != nil {
		return err
	}

	*o = SearchFilesResponse(varSearchFilesResponse)

	return err
}

type NullableSearchFilesResponse struct {
	value *SearchFilesResponse
	isSet bool
}

func (v NullableSearchFilesResponse) Get() *SearchFilesResponse {
	return v.value
}

func (v *NullableSearchFilesResponse) Set(val *SearchFilesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFilesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFilesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFilesResponse(val *SearchFilesResponse) *NullableSearchFilesResponse {
	return &NullableSearchFilesResponse{value: val, isSet: true}
}

func (v NullableSearchFilesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFilesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
