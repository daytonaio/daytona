/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConfig{}

// ServerConfig struct for ServerConfig
type ServerConfig struct {
	ApiPort                   int32         `json:"apiPort"`
	BinariesPath              string        `json:"binariesPath"`
	BuildImageNamespace       *string       `json:"buildImageNamespace,omitempty"`
	BuilderImage              string        `json:"builderImage"`
	BuilderRegistryServer     string        `json:"builderRegistryServer"`
	DefaultWorkspaceImage     string        `json:"defaultWorkspaceImage"`
	DefaultWorkspaceUser      string        `json:"defaultWorkspaceUser"`
	Frps                      *FRPSConfig   `json:"frps,omitempty"`
	HeadscalePort             int32         `json:"headscalePort"`
	Id                        string        `json:"id"`
	LocalBuilderRegistryImage string        `json:"localBuilderRegistryImage"`
	LocalBuilderRegistryPort  int32         `json:"localBuilderRegistryPort"`
	LocalRunnerDisabled       *bool         `json:"localRunnerDisabled,omitempty"`
	LogFile                   LogFileConfig `json:"logFile"`
	RegistryUrl               string        `json:"registryUrl"`
	SamplesIndexUrl           *string       `json:"samplesIndexUrl,omitempty"`
	ServerDownloadUrl         string        `json:"serverDownloadUrl"`
}

type _ServerConfig ServerConfig

// NewServerConfig instantiates a new ServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConfig(apiPort int32, binariesPath string, builderImage string, builderRegistryServer string, defaultWorkspaceImage string, defaultWorkspaceUser string, headscalePort int32, id string, localBuilderRegistryImage string, localBuilderRegistryPort int32, logFile LogFileConfig, registryUrl string, serverDownloadUrl string) *ServerConfig {
	this := ServerConfig{}
	this.ApiPort = apiPort
	this.BinariesPath = binariesPath
	this.BuilderImage = builderImage
	this.BuilderRegistryServer = builderRegistryServer
	this.DefaultWorkspaceImage = defaultWorkspaceImage
	this.DefaultWorkspaceUser = defaultWorkspaceUser
	this.HeadscalePort = headscalePort
	this.Id = id
	this.LocalBuilderRegistryImage = localBuilderRegistryImage
	this.LocalBuilderRegistryPort = localBuilderRegistryPort
	this.LogFile = logFile
	this.RegistryUrl = registryUrl
	this.ServerDownloadUrl = serverDownloadUrl
	return &this
}

// NewServerConfigWithDefaults instantiates a new ServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConfigWithDefaults() *ServerConfig {
	this := ServerConfig{}
	return &this
}

// GetApiPort returns the ApiPort field value
func (o *ServerConfig) GetApiPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetApiPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiPort, true
}

// SetApiPort sets field value
func (o *ServerConfig) SetApiPort(v int32) {
	o.ApiPort = v
}

// GetBinariesPath returns the BinariesPath field value
func (o *ServerConfig) GetBinariesPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BinariesPath
}

// GetBinariesPathOk returns a tuple with the BinariesPath field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetBinariesPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BinariesPath, true
}

// SetBinariesPath sets field value
func (o *ServerConfig) SetBinariesPath(v string) {
	o.BinariesPath = v
}

// GetBuildImageNamespace returns the BuildImageNamespace field value if set, zero value otherwise.
func (o *ServerConfig) GetBuildImageNamespace() string {
	if o == nil || IsNil(o.BuildImageNamespace) {
		var ret string
		return ret
	}
	return *o.BuildImageNamespace
}

// GetBuildImageNamespaceOk returns a tuple with the BuildImageNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetBuildImageNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.BuildImageNamespace) {
		return nil, false
	}
	return o.BuildImageNamespace, true
}

// HasBuildImageNamespace returns a boolean if a field has been set.
func (o *ServerConfig) HasBuildImageNamespace() bool {
	if o != nil && !IsNil(o.BuildImageNamespace) {
		return true
	}

	return false
}

// SetBuildImageNamespace gets a reference to the given string and assigns it to the BuildImageNamespace field.
func (o *ServerConfig) SetBuildImageNamespace(v string) {
	o.BuildImageNamespace = &v
}

// GetBuilderImage returns the BuilderImage field value
func (o *ServerConfig) GetBuilderImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuilderImage
}

// GetBuilderImageOk returns a tuple with the BuilderImage field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetBuilderImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuilderImage, true
}

// SetBuilderImage sets field value
func (o *ServerConfig) SetBuilderImage(v string) {
	o.BuilderImage = v
}

// GetBuilderRegistryServer returns the BuilderRegistryServer field value
func (o *ServerConfig) GetBuilderRegistryServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuilderRegistryServer
}

// GetBuilderRegistryServerOk returns a tuple with the BuilderRegistryServer field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetBuilderRegistryServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuilderRegistryServer, true
}

// SetBuilderRegistryServer sets field value
func (o *ServerConfig) SetBuilderRegistryServer(v string) {
	o.BuilderRegistryServer = v
}

// GetDefaultWorkspaceImage returns the DefaultWorkspaceImage field value
func (o *ServerConfig) GetDefaultWorkspaceImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultWorkspaceImage
}

// GetDefaultWorkspaceImageOk returns a tuple with the DefaultWorkspaceImage field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetDefaultWorkspaceImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultWorkspaceImage, true
}

// SetDefaultWorkspaceImage sets field value
func (o *ServerConfig) SetDefaultWorkspaceImage(v string) {
	o.DefaultWorkspaceImage = v
}

// GetDefaultWorkspaceUser returns the DefaultWorkspaceUser field value
func (o *ServerConfig) GetDefaultWorkspaceUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DefaultWorkspaceUser
}

// GetDefaultWorkspaceUserOk returns a tuple with the DefaultWorkspaceUser field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetDefaultWorkspaceUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DefaultWorkspaceUser, true
}

// SetDefaultWorkspaceUser sets field value
func (o *ServerConfig) SetDefaultWorkspaceUser(v string) {
	o.DefaultWorkspaceUser = v
}

// GetFrps returns the Frps field value if set, zero value otherwise.
func (o *ServerConfig) GetFrps() FRPSConfig {
	if o == nil || IsNil(o.Frps) {
		var ret FRPSConfig
		return ret
	}
	return *o.Frps
}

// GetFrpsOk returns a tuple with the Frps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetFrpsOk() (*FRPSConfig, bool) {
	if o == nil || IsNil(o.Frps) {
		return nil, false
	}
	return o.Frps, true
}

// HasFrps returns a boolean if a field has been set.
func (o *ServerConfig) HasFrps() bool {
	if o != nil && !IsNil(o.Frps) {
		return true
	}

	return false
}

// SetFrps gets a reference to the given FRPSConfig and assigns it to the Frps field.
func (o *ServerConfig) SetFrps(v FRPSConfig) {
	o.Frps = &v
}

// GetHeadscalePort returns the HeadscalePort field value
func (o *ServerConfig) GetHeadscalePort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeadscalePort
}

// GetHeadscalePortOk returns a tuple with the HeadscalePort field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetHeadscalePortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeadscalePort, true
}

// SetHeadscalePort sets field value
func (o *ServerConfig) SetHeadscalePort(v int32) {
	o.HeadscalePort = v
}

// GetId returns the Id field value
func (o *ServerConfig) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerConfig) SetId(v string) {
	o.Id = v
}

// GetLocalBuilderRegistryImage returns the LocalBuilderRegistryImage field value
func (o *ServerConfig) GetLocalBuilderRegistryImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocalBuilderRegistryImage
}

// GetLocalBuilderRegistryImageOk returns a tuple with the LocalBuilderRegistryImage field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetLocalBuilderRegistryImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalBuilderRegistryImage, true
}

// SetLocalBuilderRegistryImage sets field value
func (o *ServerConfig) SetLocalBuilderRegistryImage(v string) {
	o.LocalBuilderRegistryImage = v
}

// GetLocalBuilderRegistryPort returns the LocalBuilderRegistryPort field value
func (o *ServerConfig) GetLocalBuilderRegistryPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LocalBuilderRegistryPort
}

// GetLocalBuilderRegistryPortOk returns a tuple with the LocalBuilderRegistryPort field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetLocalBuilderRegistryPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocalBuilderRegistryPort, true
}

// SetLocalBuilderRegistryPort sets field value
func (o *ServerConfig) SetLocalBuilderRegistryPort(v int32) {
	o.LocalBuilderRegistryPort = v
}

// GetLocalRunnerDisabled returns the LocalRunnerDisabled field value if set, zero value otherwise.
func (o *ServerConfig) GetLocalRunnerDisabled() bool {
	if o == nil || IsNil(o.LocalRunnerDisabled) {
		var ret bool
		return ret
	}
	return *o.LocalRunnerDisabled
}

// GetLocalRunnerDisabledOk returns a tuple with the LocalRunnerDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetLocalRunnerDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalRunnerDisabled) {
		return nil, false
	}
	return o.LocalRunnerDisabled, true
}

// HasLocalRunnerDisabled returns a boolean if a field has been set.
func (o *ServerConfig) HasLocalRunnerDisabled() bool {
	if o != nil && !IsNil(o.LocalRunnerDisabled) {
		return true
	}

	return false
}

// SetLocalRunnerDisabled gets a reference to the given bool and assigns it to the LocalRunnerDisabled field.
func (o *ServerConfig) SetLocalRunnerDisabled(v bool) {
	o.LocalRunnerDisabled = &v
}

// GetLogFile returns the LogFile field value
func (o *ServerConfig) GetLogFile() LogFileConfig {
	if o == nil {
		var ret LogFileConfig
		return ret
	}

	return o.LogFile
}

// GetLogFileOk returns a tuple with the LogFile field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetLogFileOk() (*LogFileConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogFile, true
}

// SetLogFile sets field value
func (o *ServerConfig) SetLogFile(v LogFileConfig) {
	o.LogFile = v
}

// GetRegistryUrl returns the RegistryUrl field value
func (o *ServerConfig) GetRegistryUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetRegistryUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistryUrl, true
}

// SetRegistryUrl sets field value
func (o *ServerConfig) SetRegistryUrl(v string) {
	o.RegistryUrl = v
}

// GetSamplesIndexUrl returns the SamplesIndexUrl field value if set, zero value otherwise.
func (o *ServerConfig) GetSamplesIndexUrl() string {
	if o == nil || IsNil(o.SamplesIndexUrl) {
		var ret string
		return ret
	}
	return *o.SamplesIndexUrl
}

// GetSamplesIndexUrlOk returns a tuple with the SamplesIndexUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetSamplesIndexUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SamplesIndexUrl) {
		return nil, false
	}
	return o.SamplesIndexUrl, true
}

// HasSamplesIndexUrl returns a boolean if a field has been set.
func (o *ServerConfig) HasSamplesIndexUrl() bool {
	if o != nil && !IsNil(o.SamplesIndexUrl) {
		return true
	}

	return false
}

// SetSamplesIndexUrl gets a reference to the given string and assigns it to the SamplesIndexUrl field.
func (o *ServerConfig) SetSamplesIndexUrl(v string) {
	o.SamplesIndexUrl = &v
}

// GetServerDownloadUrl returns the ServerDownloadUrl field value
func (o *ServerConfig) GetServerDownloadUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerDownloadUrl
}

// GetServerDownloadUrlOk returns a tuple with the ServerDownloadUrl field value
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetServerDownloadUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerDownloadUrl, true
}

// SetServerDownloadUrl sets field value
func (o *ServerConfig) SetServerDownloadUrl(v string) {
	o.ServerDownloadUrl = v
}

func (o ServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiPort"] = o.ApiPort
	toSerialize["binariesPath"] = o.BinariesPath
	if !IsNil(o.BuildImageNamespace) {
		toSerialize["buildImageNamespace"] = o.BuildImageNamespace
	}
	toSerialize["builderImage"] = o.BuilderImage
	toSerialize["builderRegistryServer"] = o.BuilderRegistryServer
	toSerialize["defaultWorkspaceImage"] = o.DefaultWorkspaceImage
	toSerialize["defaultWorkspaceUser"] = o.DefaultWorkspaceUser
	if !IsNil(o.Frps) {
		toSerialize["frps"] = o.Frps
	}
	toSerialize["headscalePort"] = o.HeadscalePort
	toSerialize["id"] = o.Id
	toSerialize["localBuilderRegistryImage"] = o.LocalBuilderRegistryImage
	toSerialize["localBuilderRegistryPort"] = o.LocalBuilderRegistryPort
	if !IsNil(o.LocalRunnerDisabled) {
		toSerialize["localRunnerDisabled"] = o.LocalRunnerDisabled
	}
	toSerialize["logFile"] = o.LogFile
	toSerialize["registryUrl"] = o.RegistryUrl
	if !IsNil(o.SamplesIndexUrl) {
		toSerialize["samplesIndexUrl"] = o.SamplesIndexUrl
	}
	toSerialize["serverDownloadUrl"] = o.ServerDownloadUrl
	return toSerialize, nil
}

func (o *ServerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiPort",
		"binariesPath",
		"builderImage",
		"builderRegistryServer",
		"defaultWorkspaceImage",
		"defaultWorkspaceUser",
		"headscalePort",
		"id",
		"localBuilderRegistryImage",
		"localBuilderRegistryPort",
		"logFile",
		"registryUrl",
		"serverDownloadUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerConfig := _ServerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varServerConfig)

	if err != nil {
		return err
	}

	*o = ServerConfig(varServerConfig)

	return err
}

type NullableServerConfig struct {
	value *ServerConfig
	isSet bool
}

func (v NullableServerConfig) Get() *ServerConfig {
	return v.value
}

func (v *NullableServerConfig) Set(val *ServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConfig(val *ServerConfig) *NullableServerConfig {
	return &NullableServerConfig{value: val, isSet: true}
}

func (v NullableServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
