/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TargetDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDTO{}

// TargetDTO struct for TargetDTO
type TargetDTO struct {
	Default bool        `json:"default"`
	Id      string      `json:"id"`
	Info    *TargetInfo `json:"info,omitempty"`
	Name    string      `json:"name"`
	// JSON encoded map of options
	Options        string             `json:"options"`
	ProviderInfo   TargetProviderInfo `json:"providerInfo"`
	WorkspaceCount int32              `json:"workspaceCount"`
}

type _TargetDTO TargetDTO

// NewTargetDTO instantiates a new TargetDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDTO(default_ bool, id string, name string, options string, providerInfo TargetProviderInfo, workspaceCount int32) *TargetDTO {
	this := TargetDTO{}
	this.Default = default_
	this.Id = id
	this.Name = name
	this.Options = options
	this.ProviderInfo = providerInfo
	this.WorkspaceCount = workspaceCount
	return &this
}

// NewTargetDTOWithDefaults instantiates a new TargetDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDTOWithDefaults() *TargetDTO {
	this := TargetDTO{}
	return &this
}

// GetDefault returns the Default field value
func (o *TargetDTO) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *TargetDTO) SetDefault(v bool) {
	o.Default = v
}

// GetId returns the Id field value
func (o *TargetDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TargetDTO) SetId(v string) {
	o.Id = v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TargetDTO) GetInfo() TargetInfo {
	if o == nil || IsNil(o.Info) {
		var ret TargetInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetInfoOk() (*TargetInfo, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TargetDTO) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given TargetInfo and assigns it to the Info field.
func (o *TargetDTO) SetInfo(v TargetInfo) {
	o.Info = &v
}

// GetName returns the Name field value
func (o *TargetDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TargetDTO) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *TargetDTO) GetOptions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetOptionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Options, true
}

// SetOptions sets field value
func (o *TargetDTO) SetOptions(v string) {
	o.Options = v
}

// GetProviderInfo returns the ProviderInfo field value
func (o *TargetDTO) GetProviderInfo() TargetProviderInfo {
	if o == nil {
		var ret TargetProviderInfo
		return ret
	}

	return o.ProviderInfo
}

// GetProviderInfoOk returns a tuple with the ProviderInfo field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetProviderInfoOk() (*TargetProviderInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderInfo, true
}

// SetProviderInfo sets field value
func (o *TargetDTO) SetProviderInfo(v TargetProviderInfo) {
	o.ProviderInfo = v
}

// GetWorkspaceCount returns the WorkspaceCount field value
func (o *TargetDTO) GetWorkspaceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WorkspaceCount
}

// GetWorkspaceCountOk returns a tuple with the WorkspaceCount field value
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetWorkspaceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkspaceCount, true
}

// SetWorkspaceCount sets field value
func (o *TargetDTO) SetWorkspaceCount(v int32) {
	o.WorkspaceCount = v
}

func (o TargetDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["default"] = o.Default
	toSerialize["id"] = o.Id
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}
	toSerialize["name"] = o.Name
	toSerialize["options"] = o.Options
	toSerialize["providerInfo"] = o.ProviderInfo
	toSerialize["workspaceCount"] = o.WorkspaceCount
	return toSerialize, nil
}

func (o *TargetDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default",
		"id",
		"name",
		"options",
		"providerInfo",
		"workspaceCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetDTO := _TargetDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetDTO)

	if err != nil {
		return err
	}

	*o = TargetDTO(varTargetDTO)

	return err
}

type NullableTargetDTO struct {
	value *TargetDTO
	isSet bool
}

func (v NullableTargetDTO) Get() *TargetDTO {
	return v.value
}

func (v *NullableTargetDTO) Set(val *TargetDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDTO(val *TargetDTO) *NullableTargetDTO {
	return &NullableTargetDTO{value: val, isSet: true}
}

func (v NullableTargetDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
