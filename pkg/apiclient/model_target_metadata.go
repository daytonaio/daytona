/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TargetMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetMetadata{}

// TargetMetadata struct for TargetMetadata
type TargetMetadata struct {
	TargetId  string `json:"targetId"`
	UpdatedAt string `json:"updatedAt"`
	Uptime    int32  `json:"uptime"`
}

type _TargetMetadata TargetMetadata

// NewTargetMetadata instantiates a new TargetMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetMetadata(targetId string, updatedAt string, uptime int32) *TargetMetadata {
	this := TargetMetadata{}
	this.TargetId = targetId
	this.UpdatedAt = updatedAt
	this.Uptime = uptime
	return &this
}

// NewTargetMetadataWithDefaults instantiates a new TargetMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetMetadataWithDefaults() *TargetMetadata {
	this := TargetMetadata{}
	return &this
}

// GetTargetId returns the TargetId field value
func (o *TargetMetadata) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *TargetMetadata) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *TargetMetadata) SetTargetId(v string) {
	o.TargetId = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *TargetMetadata) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *TargetMetadata) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *TargetMetadata) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUptime returns the Uptime field value
func (o *TargetMetadata) GetUptime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Uptime
}

// GetUptimeOk returns a tuple with the Uptime field value
// and a boolean to check if the value has been set.
func (o *TargetMetadata) GetUptimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uptime, true
}

// SetUptime sets field value
func (o *TargetMetadata) SetUptime(v int32) {
	o.Uptime = v
}

func (o TargetMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetId"] = o.TargetId
	toSerialize["updatedAt"] = o.UpdatedAt
	toSerialize["uptime"] = o.Uptime
	return toSerialize, nil
}

func (o *TargetMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetId",
		"updatedAt",
		"uptime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetMetadata := _TargetMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetMetadata)

	if err != nil {
		return err
	}

	*o = TargetMetadata(varTargetMetadata)

	return err
}

type NullableTargetMetadata struct {
	value *TargetMetadata
	isSet bool
}

func (v NullableTargetMetadata) Get() *TargetMetadata {
	return v.value
}

func (v *NullableTargetMetadata) Set(val *TargetMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetMetadata(val *TargetMetadata) *NullableTargetMetadata {
	return &NullableTargetMetadata{value: val, isSet: true}
}

func (v NullableTargetMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
