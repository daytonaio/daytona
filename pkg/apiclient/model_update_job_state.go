/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the UpdateJobState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateJobState{}

// UpdateJobState struct for UpdateJobState
type UpdateJobState struct {
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	State        JobState `json:"state"`
}

type _UpdateJobState UpdateJobState

// NewUpdateJobState instantiates a new UpdateJobState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateJobState(state JobState) *UpdateJobState {
	this := UpdateJobState{}
	this.State = state
	return &this
}

// NewUpdateJobStateWithDefaults instantiates a new UpdateJobState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateJobStateWithDefaults() *UpdateJobState {
	this := UpdateJobState{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *UpdateJobState) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateJobState) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *UpdateJobState) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *UpdateJobState) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetState returns the State field value
func (o *UpdateJobState) GetState() JobState {
	if o == nil {
		var ret JobState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *UpdateJobState) GetStateOk() (*JobState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *UpdateJobState) SetState(v JobState) {
	o.State = v
}

func (o UpdateJobState) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateJobState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	toSerialize["state"] = o.State
	return toSerialize, nil
}

func (o *UpdateJobState) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateJobState := _UpdateJobState{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateJobState)

	if err != nil {
		return err
	}

	*o = UpdateJobState(varUpdateJobState)

	return err
}

type NullableUpdateJobState struct {
	value *UpdateJobState
	isSet bool
}

func (v NullableUpdateJobState) Get() *UpdateJobState {
	return v.value
}

func (v *NullableUpdateJobState) Set(val *UpdateJobState) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateJobState) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateJobState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateJobState(val *UpdateJobState) *NullableUpdateJobState {
	return &NullableUpdateJobState{value: val, isSet: true}
}

func (v NullableUpdateJobState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateJobState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
