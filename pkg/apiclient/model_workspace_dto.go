/*
Daytona Server API

Daytona Server API

API version: v0.0.0-dev
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WorkspaceDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkspaceDTO{}

// WorkspaceDTO struct for WorkspaceDTO
type WorkspaceDTO struct {
	ApiKey              string             `json:"apiKey"`
	BuildConfig         *BuildConfig       `json:"buildConfig,omitempty"`
	EnvVars             map[string]string  `json:"envVars"`
	GitProviderConfigId *string            `json:"gitProviderConfigId,omitempty"`
	Id                  string             `json:"id"`
	Image               string             `json:"image"`
	LastJob             *Job               `json:"lastJob,omitempty"`
	Metadata            *WorkspaceMetadata `json:"metadata,omitempty"`
	Name                string             `json:"name"`
	ProviderMetadata    *string            `json:"providerMetadata,omitempty"`
	Repository          GitRepository      `json:"repository"`
	State               ResourceState      `json:"state"`
	Target              Target             `json:"target"`
	TargetId            string             `json:"targetId"`
	User                string             `json:"user"`
}

type _WorkspaceDTO WorkspaceDTO

// NewWorkspaceDTO instantiates a new WorkspaceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkspaceDTO(apiKey string, envVars map[string]string, id string, image string, name string, repository GitRepository, state ResourceState, target Target, targetId string, user string) *WorkspaceDTO {
	this := WorkspaceDTO{}
	this.ApiKey = apiKey
	this.EnvVars = envVars
	this.Id = id
	this.Image = image
	this.Name = name
	this.Repository = repository
	this.State = state
	this.Target = target
	this.TargetId = targetId
	this.User = user
	return &this
}

// NewWorkspaceDTOWithDefaults instantiates a new WorkspaceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkspaceDTOWithDefaults() *WorkspaceDTO {
	this := WorkspaceDTO{}
	return &this
}

// GetApiKey returns the ApiKey field value
func (o *WorkspaceDTO) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *WorkspaceDTO) SetApiKey(v string) {
	o.ApiKey = v
}

// GetBuildConfig returns the BuildConfig field value if set, zero value otherwise.
func (o *WorkspaceDTO) GetBuildConfig() BuildConfig {
	if o == nil || IsNil(o.BuildConfig) {
		var ret BuildConfig
		return ret
	}
	return *o.BuildConfig
}

// GetBuildConfigOk returns a tuple with the BuildConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetBuildConfigOk() (*BuildConfig, bool) {
	if o == nil || IsNil(o.BuildConfig) {
		return nil, false
	}
	return o.BuildConfig, true
}

// HasBuildConfig returns a boolean if a field has been set.
func (o *WorkspaceDTO) HasBuildConfig() bool {
	if o != nil && !IsNil(o.BuildConfig) {
		return true
	}

	return false
}

// SetBuildConfig gets a reference to the given BuildConfig and assigns it to the BuildConfig field.
func (o *WorkspaceDTO) SetBuildConfig(v BuildConfig) {
	o.BuildConfig = &v
}

// GetEnvVars returns the EnvVars field value
func (o *WorkspaceDTO) GetEnvVars() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetEnvVarsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvVars, true
}

// SetEnvVars sets field value
func (o *WorkspaceDTO) SetEnvVars(v map[string]string) {
	o.EnvVars = v
}

// GetGitProviderConfigId returns the GitProviderConfigId field value if set, zero value otherwise.
func (o *WorkspaceDTO) GetGitProviderConfigId() string {
	if o == nil || IsNil(o.GitProviderConfigId) {
		var ret string
		return ret
	}
	return *o.GitProviderConfigId
}

// GetGitProviderConfigIdOk returns a tuple with the GitProviderConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetGitProviderConfigIdOk() (*string, bool) {
	if o == nil || IsNil(o.GitProviderConfigId) {
		return nil, false
	}
	return o.GitProviderConfigId, true
}

// HasGitProviderConfigId returns a boolean if a field has been set.
func (o *WorkspaceDTO) HasGitProviderConfigId() bool {
	if o != nil && !IsNil(o.GitProviderConfigId) {
		return true
	}

	return false
}

// SetGitProviderConfigId gets a reference to the given string and assigns it to the GitProviderConfigId field.
func (o *WorkspaceDTO) SetGitProviderConfigId(v string) {
	o.GitProviderConfigId = &v
}

// GetId returns the Id field value
func (o *WorkspaceDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WorkspaceDTO) SetId(v string) {
	o.Id = v
}

// GetImage returns the Image field value
func (o *WorkspaceDTO) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *WorkspaceDTO) SetImage(v string) {
	o.Image = v
}

// GetLastJob returns the LastJob field value if set, zero value otherwise.
func (o *WorkspaceDTO) GetLastJob() Job {
	if o == nil || IsNil(o.LastJob) {
		var ret Job
		return ret
	}
	return *o.LastJob
}

// GetLastJobOk returns a tuple with the LastJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetLastJobOk() (*Job, bool) {
	if o == nil || IsNil(o.LastJob) {
		return nil, false
	}
	return o.LastJob, true
}

// HasLastJob returns a boolean if a field has been set.
func (o *WorkspaceDTO) HasLastJob() bool {
	if o != nil && !IsNil(o.LastJob) {
		return true
	}

	return false
}

// SetLastJob gets a reference to the given Job and assigns it to the LastJob field.
func (o *WorkspaceDTO) SetLastJob(v Job) {
	o.LastJob = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *WorkspaceDTO) GetMetadata() WorkspaceMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret WorkspaceMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetMetadataOk() (*WorkspaceMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *WorkspaceDTO) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given WorkspaceMetadata and assigns it to the Metadata field.
func (o *WorkspaceDTO) SetMetadata(v WorkspaceMetadata) {
	o.Metadata = &v
}

// GetName returns the Name field value
func (o *WorkspaceDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkspaceDTO) SetName(v string) {
	o.Name = v
}

// GetProviderMetadata returns the ProviderMetadata field value if set, zero value otherwise.
func (o *WorkspaceDTO) GetProviderMetadata() string {
	if o == nil || IsNil(o.ProviderMetadata) {
		var ret string
		return ret
	}
	return *o.ProviderMetadata
}

// GetProviderMetadataOk returns a tuple with the ProviderMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetProviderMetadataOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderMetadata) {
		return nil, false
	}
	return o.ProviderMetadata, true
}

// HasProviderMetadata returns a boolean if a field has been set.
func (o *WorkspaceDTO) HasProviderMetadata() bool {
	if o != nil && !IsNil(o.ProviderMetadata) {
		return true
	}

	return false
}

// SetProviderMetadata gets a reference to the given string and assigns it to the ProviderMetadata field.
func (o *WorkspaceDTO) SetProviderMetadata(v string) {
	o.ProviderMetadata = &v
}

// GetRepository returns the Repository field value
func (o *WorkspaceDTO) GetRepository() GitRepository {
	if o == nil {
		var ret GitRepository
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetRepositoryOk() (*GitRepository, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *WorkspaceDTO) SetRepository(v GitRepository) {
	o.Repository = v
}

// GetState returns the State field value
func (o *WorkspaceDTO) GetState() ResourceState {
	if o == nil {
		var ret ResourceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetStateOk() (*ResourceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *WorkspaceDTO) SetState(v ResourceState) {
	o.State = v
}

// GetTarget returns the Target field value
func (o *WorkspaceDTO) GetTarget() Target {
	if o == nil {
		var ret Target
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetTargetOk() (*Target, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *WorkspaceDTO) SetTarget(v Target) {
	o.Target = v
}

// GetTargetId returns the TargetId field value
func (o *WorkspaceDTO) GetTargetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetTargetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetId, true
}

// SetTargetId sets field value
func (o *WorkspaceDTO) SetTargetId(v string) {
	o.TargetId = v
}

// GetUser returns the User field value
func (o *WorkspaceDTO) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *WorkspaceDTO) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *WorkspaceDTO) SetUser(v string) {
	o.User = v
}

func (o WorkspaceDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkspaceDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["apiKey"] = o.ApiKey
	if !IsNil(o.BuildConfig) {
		toSerialize["buildConfig"] = o.BuildConfig
	}
	toSerialize["envVars"] = o.EnvVars
	if !IsNil(o.GitProviderConfigId) {
		toSerialize["gitProviderConfigId"] = o.GitProviderConfigId
	}
	toSerialize["id"] = o.Id
	toSerialize["image"] = o.Image
	if !IsNil(o.LastJob) {
		toSerialize["lastJob"] = o.LastJob
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ProviderMetadata) {
		toSerialize["providerMetadata"] = o.ProviderMetadata
	}
	toSerialize["repository"] = o.Repository
	toSerialize["state"] = o.State
	toSerialize["target"] = o.Target
	toSerialize["targetId"] = o.TargetId
	toSerialize["user"] = o.User
	return toSerialize, nil
}

func (o *WorkspaceDTO) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiKey",
		"envVars",
		"id",
		"image",
		"name",
		"repository",
		"state",
		"target",
		"targetId",
		"user",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkspaceDTO := _WorkspaceDTO{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkspaceDTO)

	if err != nil {
		return err
	}

	*o = WorkspaceDTO(varWorkspaceDTO)

	return err
}

type NullableWorkspaceDTO struct {
	value *WorkspaceDTO
	isSet bool
}

func (v NullableWorkspaceDTO) Get() *WorkspaceDTO {
	return v.value
}

func (v *NullableWorkspaceDTO) Set(val *WorkspaceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkspaceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkspaceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkspaceDTO(val *WorkspaceDTO) *NullableWorkspaceDTO {
	return &NullableWorkspaceDTO{value: val, isSet: true}
}

func (v NullableWorkspaceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkspaceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
