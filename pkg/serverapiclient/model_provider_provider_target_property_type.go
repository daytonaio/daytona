/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverapiclient

import (
	"encoding/json"
	"fmt"
)

// ProviderProviderTargetPropertyType the model 'ProviderProviderTargetPropertyType'
type ProviderProviderTargetPropertyType string

// List of provider.ProviderTargetPropertyType
const (
	ProviderTargetPropertyTypeString ProviderProviderTargetPropertyType = "string"
	ProviderTargetPropertyTypeOption ProviderProviderTargetPropertyType = "option"
	ProviderTargetPropertyTypeBoolean ProviderProviderTargetPropertyType = "boolean"
	ProviderTargetPropertyTypeInt ProviderProviderTargetPropertyType = "int"
	ProviderTargetPropertyTypeFloat ProviderProviderTargetPropertyType = "float"
	ProviderTargetPropertyTypeFilePath ProviderProviderTargetPropertyType = "file-path"
)

// All allowed values of ProviderProviderTargetPropertyType enum
var AllowedProviderProviderTargetPropertyTypeEnumValues = []ProviderProviderTargetPropertyType{
	"string",
	"option",
	"boolean",
	"int",
	"float",
	"file-path",
}

func (v *ProviderProviderTargetPropertyType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderProviderTargetPropertyType(value)
	for _, existing := range AllowedProviderProviderTargetPropertyTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderProviderTargetPropertyType", value)
}

// NewProviderProviderTargetPropertyTypeFromValue returns a pointer to a valid ProviderProviderTargetPropertyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderProviderTargetPropertyTypeFromValue(v string) (*ProviderProviderTargetPropertyType, error) {
	ev := ProviderProviderTargetPropertyType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderProviderTargetPropertyType: valid values are %v", v, AllowedProviderProviderTargetPropertyTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderProviderTargetPropertyType) IsValid() bool {
	for _, existing := range AllowedProviderProviderTargetPropertyTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to provider.ProviderTargetPropertyType value
func (v ProviderProviderTargetPropertyType) Ptr() *ProviderProviderTargetPropertyType {
	return &v
}

type NullableProviderProviderTargetPropertyType struct {
	value *ProviderProviderTargetPropertyType
	isSet bool
}

func (v NullableProviderProviderTargetPropertyType) Get() *ProviderProviderTargetPropertyType {
	return v.value
}

func (v *NullableProviderProviderTargetPropertyType) Set(val *ProviderProviderTargetPropertyType) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderProviderTargetPropertyType) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderProviderTargetPropertyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderProviderTargetPropertyType(val *ProviderProviderTargetPropertyType) *NullableProviderProviderTargetPropertyType {
	return &NullableProviderProviderTargetPropertyType{value: val, isSet: true}
}

func (v NullableProviderProviderTargetPropertyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderProviderTargetPropertyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

