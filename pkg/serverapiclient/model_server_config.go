/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverapiclient

import (
	"encoding/json"
)

// checks if the ServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerConfig{}

// ServerConfig struct for ServerConfig
type ServerConfig struct {
	ApiPort *int32 `json:"apiPort,omitempty"`
	Frps *FRPSConfig `json:"frps,omitempty"`
	GitProviders []GitProvider `json:"gitProviders,omitempty"`
	HeadscalePort *int32 `json:"headscalePort,omitempty"`
	Id *string `json:"id,omitempty"`
	ProvidersDir *string `json:"providersDir,omitempty"`
	RegistryUrl *string `json:"registryUrl,omitempty"`
	ServerDownloadUrl *string `json:"serverDownloadUrl,omitempty"`
	TargetsFilePath *string `json:"targetsFilePath,omitempty"`
}

// NewServerConfig instantiates a new ServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerConfig() *ServerConfig {
	this := ServerConfig{}
	return &this
}

// NewServerConfigWithDefaults instantiates a new ServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerConfigWithDefaults() *ServerConfig {
	this := ServerConfig{}
	return &this
}

// GetApiPort returns the ApiPort field value if set, zero value otherwise.
func (o *ServerConfig) GetApiPort() int32 {
	if o == nil || IsNil(o.ApiPort) {
		var ret int32
		return ret
	}
	return *o.ApiPort
}

// GetApiPortOk returns a tuple with the ApiPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetApiPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiPort) {
		return nil, false
	}
	return o.ApiPort, true
}

// HasApiPort returns a boolean if a field has been set.
func (o *ServerConfig) HasApiPort() bool {
	if o != nil && !IsNil(o.ApiPort) {
		return true
	}

	return false
}

// SetApiPort gets a reference to the given int32 and assigns it to the ApiPort field.
func (o *ServerConfig) SetApiPort(v int32) {
	o.ApiPort = &v
}

// GetFrps returns the Frps field value if set, zero value otherwise.
func (o *ServerConfig) GetFrps() FRPSConfig {
	if o == nil || IsNil(o.Frps) {
		var ret FRPSConfig
		return ret
	}
	return *o.Frps
}

// GetFrpsOk returns a tuple with the Frps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetFrpsOk() (*FRPSConfig, bool) {
	if o == nil || IsNil(o.Frps) {
		return nil, false
	}
	return o.Frps, true
}

// HasFrps returns a boolean if a field has been set.
func (o *ServerConfig) HasFrps() bool {
	if o != nil && !IsNil(o.Frps) {
		return true
	}

	return false
}

// SetFrps gets a reference to the given FRPSConfig and assigns it to the Frps field.
func (o *ServerConfig) SetFrps(v FRPSConfig) {
	o.Frps = &v
}

// GetGitProviders returns the GitProviders field value if set, zero value otherwise.
func (o *ServerConfig) GetGitProviders() []GitProvider {
	if o == nil || IsNil(o.GitProviders) {
		var ret []GitProvider
		return ret
	}
	return o.GitProviders
}

// GetGitProvidersOk returns a tuple with the GitProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetGitProvidersOk() ([]GitProvider, bool) {
	if o == nil || IsNil(o.GitProviders) {
		return nil, false
	}
	return o.GitProviders, true
}

// HasGitProviders returns a boolean if a field has been set.
func (o *ServerConfig) HasGitProviders() bool {
	if o != nil && !IsNil(o.GitProviders) {
		return true
	}

	return false
}

// SetGitProviders gets a reference to the given []GitProvider and assigns it to the GitProviders field.
func (o *ServerConfig) SetGitProviders(v []GitProvider) {
	o.GitProviders = v
}

// GetHeadscalePort returns the HeadscalePort field value if set, zero value otherwise.
func (o *ServerConfig) GetHeadscalePort() int32 {
	if o == nil || IsNil(o.HeadscalePort) {
		var ret int32
		return ret
	}
	return *o.HeadscalePort
}

// GetHeadscalePortOk returns a tuple with the HeadscalePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetHeadscalePortOk() (*int32, bool) {
	if o == nil || IsNil(o.HeadscalePort) {
		return nil, false
	}
	return o.HeadscalePort, true
}

// HasHeadscalePort returns a boolean if a field has been set.
func (o *ServerConfig) HasHeadscalePort() bool {
	if o != nil && !IsNil(o.HeadscalePort) {
		return true
	}

	return false
}

// SetHeadscalePort gets a reference to the given int32 and assigns it to the HeadscalePort field.
func (o *ServerConfig) SetHeadscalePort(v int32) {
	o.HeadscalePort = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ServerConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ServerConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ServerConfig) SetId(v string) {
	o.Id = &v
}

// GetProvidersDir returns the ProvidersDir field value if set, zero value otherwise.
func (o *ServerConfig) GetProvidersDir() string {
	if o == nil || IsNil(o.ProvidersDir) {
		var ret string
		return ret
	}
	return *o.ProvidersDir
}

// GetProvidersDirOk returns a tuple with the ProvidersDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetProvidersDirOk() (*string, bool) {
	if o == nil || IsNil(o.ProvidersDir) {
		return nil, false
	}
	return o.ProvidersDir, true
}

// HasProvidersDir returns a boolean if a field has been set.
func (o *ServerConfig) HasProvidersDir() bool {
	if o != nil && !IsNil(o.ProvidersDir) {
		return true
	}

	return false
}

// SetProvidersDir gets a reference to the given string and assigns it to the ProvidersDir field.
func (o *ServerConfig) SetProvidersDir(v string) {
	o.ProvidersDir = &v
}

// GetRegistryUrl returns the RegistryUrl field value if set, zero value otherwise.
func (o *ServerConfig) GetRegistryUrl() string {
	if o == nil || IsNil(o.RegistryUrl) {
		var ret string
		return ret
	}
	return *o.RegistryUrl
}

// GetRegistryUrlOk returns a tuple with the RegistryUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetRegistryUrlOk() (*string, bool) {
	if o == nil || IsNil(o.RegistryUrl) {
		return nil, false
	}
	return o.RegistryUrl, true
}

// HasRegistryUrl returns a boolean if a field has been set.
func (o *ServerConfig) HasRegistryUrl() bool {
	if o != nil && !IsNil(o.RegistryUrl) {
		return true
	}

	return false
}

// SetRegistryUrl gets a reference to the given string and assigns it to the RegistryUrl field.
func (o *ServerConfig) SetRegistryUrl(v string) {
	o.RegistryUrl = &v
}

// GetServerDownloadUrl returns the ServerDownloadUrl field value if set, zero value otherwise.
func (o *ServerConfig) GetServerDownloadUrl() string {
	if o == nil || IsNil(o.ServerDownloadUrl) {
		var ret string
		return ret
	}
	return *o.ServerDownloadUrl
}

// GetServerDownloadUrlOk returns a tuple with the ServerDownloadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetServerDownloadUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ServerDownloadUrl) {
		return nil, false
	}
	return o.ServerDownloadUrl, true
}

// HasServerDownloadUrl returns a boolean if a field has been set.
func (o *ServerConfig) HasServerDownloadUrl() bool {
	if o != nil && !IsNil(o.ServerDownloadUrl) {
		return true
	}

	return false
}

// SetServerDownloadUrl gets a reference to the given string and assigns it to the ServerDownloadUrl field.
func (o *ServerConfig) SetServerDownloadUrl(v string) {
	o.ServerDownloadUrl = &v
}

// GetTargetsFilePath returns the TargetsFilePath field value if set, zero value otherwise.
func (o *ServerConfig) GetTargetsFilePath() string {
	if o == nil || IsNil(o.TargetsFilePath) {
		var ret string
		return ret
	}
	return *o.TargetsFilePath
}

// GetTargetsFilePathOk returns a tuple with the TargetsFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerConfig) GetTargetsFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.TargetsFilePath) {
		return nil, false
	}
	return o.TargetsFilePath, true
}

// HasTargetsFilePath returns a boolean if a field has been set.
func (o *ServerConfig) HasTargetsFilePath() bool {
	if o != nil && !IsNil(o.TargetsFilePath) {
		return true
	}

	return false
}

// SetTargetsFilePath gets a reference to the given string and assigns it to the TargetsFilePath field.
func (o *ServerConfig) SetTargetsFilePath(v string) {
	o.TargetsFilePath = &v
}

func (o ServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiPort) {
		toSerialize["apiPort"] = o.ApiPort
	}
	if !IsNil(o.Frps) {
		toSerialize["frps"] = o.Frps
	}
	if !IsNil(o.GitProviders) {
		toSerialize["gitProviders"] = o.GitProviders
	}
	if !IsNil(o.HeadscalePort) {
		toSerialize["headscalePort"] = o.HeadscalePort
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ProvidersDir) {
		toSerialize["providersDir"] = o.ProvidersDir
	}
	if !IsNil(o.RegistryUrl) {
		toSerialize["registryUrl"] = o.RegistryUrl
	}
	if !IsNil(o.ServerDownloadUrl) {
		toSerialize["serverDownloadUrl"] = o.ServerDownloadUrl
	}
	if !IsNil(o.TargetsFilePath) {
		toSerialize["targetsFilePath"] = o.TargetsFilePath
	}
	return toSerialize, nil
}

type NullableServerConfig struct {
	value *ServerConfig
	isSet bool
}

func (v NullableServerConfig) Get() *ServerConfig {
	return v.value
}

func (v *NullableServerConfig) Set(val *ServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerConfig(val *ServerConfig) *NullableServerConfig {
	return &NullableServerConfig{value: val, isSet: true}
}

func (v NullableServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


