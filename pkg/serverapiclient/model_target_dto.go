/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package serverapiclient

import (
	"encoding/json"
)

// checks if the TargetDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetDTO{}

// TargetDTO struct for TargetDTO
type TargetDTO struct {
	Name *string `json:"name,omitempty"`
	// JSON encoded map of options
	Options *string `json:"options,omitempty"`
}

// NewTargetDTO instantiates a new TargetDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetDTO() *TargetDTO {
	this := TargetDTO{}
	return &this
}

// NewTargetDTOWithDefaults instantiates a new TargetDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetDTOWithDefaults() *TargetDTO {
	this := TargetDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TargetDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TargetDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TargetDTO) SetName(v string) {
	o.Name = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *TargetDTO) GetOptions() string {
	if o == nil || IsNil(o.Options) {
		var ret string
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetDTO) GetOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *TargetDTO) HasOptions() bool {
	if o != nil && !IsNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given string and assigns it to the Options field.
func (o *TargetDTO) SetOptions(v string) {
	o.Options = &v
}

func (o TargetDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return toSerialize, nil
}

type NullableTargetDTO struct {
	value *TargetDTO
	isSet bool
}

func (v NullableTargetDTO) Get() *TargetDTO {
	return v.value
}

func (v *NullableTargetDTO) Set(val *TargetDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetDTO(val *TargetDTO) *NullableTargetDTO {
	return &NullableTargetDTO{value: val, isSet: true}
}

func (v NullableTargetDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


