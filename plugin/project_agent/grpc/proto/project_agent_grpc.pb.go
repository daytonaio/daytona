// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: plugin/project_agent/grpc/proto/project_agent.proto

package proto

import (
	context "context"
	types "github.com/daytonaio/daytona/grpc/proto/types"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectAgent_GetName_FullMethodName              = "/ProjectAgent/GetName"
	ProjectAgent_GetVersion_FullMethodName           = "/ProjectAgent/GetVersion"
	ProjectAgent_SetConfig_FullMethodName            = "/ProjectAgent/SetConfig"
	ProjectAgent_ProjectPreInit_FullMethodName       = "/ProjectAgent/ProjectPreInit"
	ProjectAgent_ProjectPostInit_FullMethodName      = "/ProjectAgent/ProjectPostInit"
	ProjectAgent_ProjectPreStart_FullMethodName      = "/ProjectAgent/ProjectPreStart"
	ProjectAgent_ProjectPostStart_FullMethodName     = "/ProjectAgent/ProjectPostStart"
	ProjectAgent_ProjectPreStop_FullMethodName       = "/ProjectAgent/ProjectPreStop"
	ProjectAgent_GetProjectInfo_FullMethodName       = "/ProjectAgent/GetProjectInfo"
	ProjectAgent_LivenessProbe_FullMethodName        = "/ProjectAgent/LivenessProbe"
	ProjectAgent_LivenessProbeTimeout_FullMethodName = "/ProjectAgent/LivenessProbeTimeout"
)

// ProjectAgentClient is the client API for ProjectAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectAgentClient interface {
	GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNameResponse, error)
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	SetConfig(ctx context.Context, in *ProjectAgentConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPostInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPostStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreStop(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error)
	LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	LivenessProbeTimeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessProbeTimeoutResponse, error)
}

type projectAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectAgentClient(cc grpc.ClientConnInterface) ProjectAgentClient {
	return &projectAgentClient{cc}
}

func (c *projectAgentClient) GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, ProjectAgent_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, ProjectAgent_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) SetConfig(ctx context.Context, in *ProjectAgentConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) ProjectPreInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_ProjectPreInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) ProjectPostInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_ProjectPostInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) ProjectPreStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_ProjectPreStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) ProjectPostStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_ProjectPostStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) ProjectPreStop(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_ProjectPreStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error) {
	out := new(types.ProjectInfo)
	err := c.cc.Invoke(ctx, ProjectAgent_GetProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ProjectAgent_LivenessProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectAgentClient) LivenessProbeTimeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessProbeTimeoutResponse, error) {
	out := new(LivenessProbeTimeoutResponse)
	err := c.cc.Invoke(ctx, ProjectAgent_LivenessProbeTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectAgentServer is the server API for ProjectAgent service.
// All implementations must embed UnimplementedProjectAgentServer
// for forward compatibility
type ProjectAgentServer interface {
	GetName(context.Context, *empty.Empty) (*GetNameResponse, error)
	GetVersion(context.Context, *empty.Empty) (*GetVersionResponse, error)
	SetConfig(context.Context, *ProjectAgentConfig) (*empty.Empty, error)
	ProjectPreInit(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPostInit(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPreStart(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPostStart(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPreStop(context.Context, *types.Project) (*empty.Empty, error)
	GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error)
	LivenessProbe(context.Context, *empty.Empty) (*empty.Empty, error)
	LivenessProbeTimeout(context.Context, *empty.Empty) (*LivenessProbeTimeoutResponse, error)
	mustEmbedUnimplementedProjectAgentServer()
}

// UnimplementedProjectAgentServer must be embedded to have forward compatible implementations.
type UnimplementedProjectAgentServer struct {
}

func (UnimplementedProjectAgentServer) GetName(context.Context, *empty.Empty) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedProjectAgentServer) GetVersion(context.Context, *empty.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedProjectAgentServer) SetConfig(context.Context, *ProjectAgentConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedProjectAgentServer) ProjectPreInit(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreInit not implemented")
}
func (UnimplementedProjectAgentServer) ProjectPostInit(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPostInit not implemented")
}
func (UnimplementedProjectAgentServer) ProjectPreStart(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreStart not implemented")
}
func (UnimplementedProjectAgentServer) ProjectPostStart(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPostStart not implemented")
}
func (UnimplementedProjectAgentServer) ProjectPreStop(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreStop not implemented")
}
func (UnimplementedProjectAgentServer) GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedProjectAgentServer) LivenessProbe(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessProbe not implemented")
}
func (UnimplementedProjectAgentServer) LivenessProbeTimeout(context.Context, *empty.Empty) (*LivenessProbeTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessProbeTimeout not implemented")
}
func (UnimplementedProjectAgentServer) mustEmbedUnimplementedProjectAgentServer() {}

// UnsafeProjectAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectAgentServer will
// result in compilation errors.
type UnsafeProjectAgentServer interface {
	mustEmbedUnimplementedProjectAgentServer()
}

func RegisterProjectAgentServer(s grpc.ServiceRegistrar, srv ProjectAgentServer) {
	s.RegisterService(&ProjectAgent_ServiceDesc, srv)
}

func _ProjectAgent_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).GetName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectAgentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).SetConfig(ctx, req.(*ProjectAgentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_ProjectPreInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).ProjectPreInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_ProjectPreInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).ProjectPreInit(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_ProjectPostInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).ProjectPostInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_ProjectPostInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).ProjectPostInit(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_ProjectPreStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).ProjectPreStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_ProjectPreStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).ProjectPreStart(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_ProjectPostStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).ProjectPostStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_ProjectPostStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).ProjectPostStart(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_ProjectPreStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).ProjectPreStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_ProjectPreStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).ProjectPreStop(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_GetProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).GetProjectInfo(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_LivenessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).LivenessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_LivenessProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).LivenessProbe(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectAgent_LivenessProbeTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectAgentServer).LivenessProbeTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectAgent_LivenessProbeTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectAgentServer).LivenessProbeTimeout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectAgent_ServiceDesc is the grpc.ServiceDesc for ProjectAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProjectAgent",
	HandlerType: (*ProjectAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _ProjectAgent_GetName_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ProjectAgent_GetVersion_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _ProjectAgent_SetConfig_Handler,
		},
		{
			MethodName: "ProjectPreInit",
			Handler:    _ProjectAgent_ProjectPreInit_Handler,
		},
		{
			MethodName: "ProjectPostInit",
			Handler:    _ProjectAgent_ProjectPostInit_Handler,
		},
		{
			MethodName: "ProjectPreStart",
			Handler:    _ProjectAgent_ProjectPreStart_Handler,
		},
		{
			MethodName: "ProjectPostStart",
			Handler:    _ProjectAgent_ProjectPostStart_Handler,
		},
		{
			MethodName: "ProjectPreStop",
			Handler:    _ProjectAgent_ProjectPreStop_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _ProjectAgent_GetProjectInfo_Handler,
		},
		{
			MethodName: "LivenessProbe",
			Handler:    _ProjectAgent_LivenessProbe_Handler,
		},
		{
			MethodName: "LivenessProbeTimeout",
			Handler:    _ProjectAgent_LivenessProbeTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/project_agent/grpc/proto/project_agent.proto",
}
