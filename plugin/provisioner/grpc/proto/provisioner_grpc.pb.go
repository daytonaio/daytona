// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: plugin/provisioner/grpc/proto/provisioner.proto

package proto

import (
	context "context"
	types "github.com/daytonaio/daytona/grpc/proto/types"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Provisioner_GetName_FullMethodName          = "/Provisioner/GetName"
	Provisioner_GetVersion_FullMethodName       = "/Provisioner/GetVersion"
	Provisioner_Configure_FullMethodName        = "/Provisioner/Configure"
	Provisioner_CreateWorkspace_FullMethodName  = "/Provisioner/CreateWorkspace"
	Provisioner_StartWorkspace_FullMethodName   = "/Provisioner/StartWorkspace"
	Provisioner_StopWorkspace_FullMethodName    = "/Provisioner/StopWorkspace"
	Provisioner_DestroyWorkspace_FullMethodName = "/Provisioner/DestroyWorkspace"
	Provisioner_GetWorkspaceInfo_FullMethodName = "/Provisioner/GetWorkspaceInfo"
	Provisioner_CreateProject_FullMethodName    = "/Provisioner/CreateProject"
	Provisioner_StartProject_FullMethodName     = "/Provisioner/StartProject"
	Provisioner_StopProject_FullMethodName      = "/Provisioner/StopProject"
	Provisioner_DestroyProject_FullMethodName   = "/Provisioner/DestroyProject"
	Provisioner_GetProjectInfo_FullMethodName   = "/Provisioner/GetProjectInfo"
)

// ProvisionerClient is the client API for Provisioner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvisionerClient interface {
	GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNameResponse, error)
	GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	Configure(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigureResponse, error)
	CreateWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error)
	StartWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error)
	StopWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error)
	DestroyWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error)
	GetWorkspaceInfo(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*types.WorkspaceInfo, error)
	CreateProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	StartProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	StopProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	DestroyProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error)
}

type provisionerClient struct {
	cc grpc.ClientConnInterface
}

func NewProvisionerClient(cc grpc.ClientConnInterface) ProvisionerClient {
	return &provisionerClient{cc}
}

func (c *provisionerClient) GetName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, Provisioner_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) GetVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, Provisioner_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) Configure(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ConfigureResponse, error) {
	out := new(ConfigureResponse)
	err := c.cc.Invoke(ctx, Provisioner_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) CreateWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_CreateWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) StartWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_StartWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) StopWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_StopWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) DestroyWorkspace(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_DestroyWorkspace_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) GetWorkspaceInfo(ctx context.Context, in *types.Workspace, opts ...grpc.CallOption) (*types.WorkspaceInfo, error) {
	out := new(types.WorkspaceInfo)
	err := c.cc.Invoke(ctx, Provisioner_GetWorkspaceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) CreateProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) StartProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_StartProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) StopProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_StopProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) DestroyProject(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Provisioner_DestroyProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provisionerClient) GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error) {
	out := new(types.ProjectInfo)
	err := c.cc.Invoke(ctx, Provisioner_GetProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvisionerServer is the server API for Provisioner service.
// All implementations must embed UnimplementedProvisionerServer
// for forward compatibility
type ProvisionerServer interface {
	GetName(context.Context, *empty.Empty) (*GetNameResponse, error)
	GetVersion(context.Context, *empty.Empty) (*GetVersionResponse, error)
	Configure(context.Context, *empty.Empty) (*ConfigureResponse, error)
	CreateWorkspace(context.Context, *types.Workspace) (*empty.Empty, error)
	StartWorkspace(context.Context, *types.Workspace) (*empty.Empty, error)
	StopWorkspace(context.Context, *types.Workspace) (*empty.Empty, error)
	DestroyWorkspace(context.Context, *types.Workspace) (*empty.Empty, error)
	GetWorkspaceInfo(context.Context, *types.Workspace) (*types.WorkspaceInfo, error)
	CreateProject(context.Context, *types.Project) (*empty.Empty, error)
	StartProject(context.Context, *types.Project) (*empty.Empty, error)
	StopProject(context.Context, *types.Project) (*empty.Empty, error)
	DestroyProject(context.Context, *types.Project) (*empty.Empty, error)
	GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error)
	mustEmbedUnimplementedProvisionerServer()
}

// UnimplementedProvisionerServer must be embedded to have forward compatible implementations.
type UnimplementedProvisionerServer struct {
}

func (UnimplementedProvisionerServer) GetName(context.Context, *empty.Empty) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedProvisionerServer) GetVersion(context.Context, *empty.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedProvisionerServer) Configure(context.Context, *empty.Empty) (*ConfigureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedProvisionerServer) CreateWorkspace(context.Context, *types.Workspace) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkspace not implemented")
}
func (UnimplementedProvisionerServer) StartWorkspace(context.Context, *types.Workspace) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkspace not implemented")
}
func (UnimplementedProvisionerServer) StopWorkspace(context.Context, *types.Workspace) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWorkspace not implemented")
}
func (UnimplementedProvisionerServer) DestroyWorkspace(context.Context, *types.Workspace) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyWorkspace not implemented")
}
func (UnimplementedProvisionerServer) GetWorkspaceInfo(context.Context, *types.Workspace) (*types.WorkspaceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkspaceInfo not implemented")
}
func (UnimplementedProvisionerServer) CreateProject(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProvisionerServer) StartProject(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProject not implemented")
}
func (UnimplementedProvisionerServer) StopProject(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProject not implemented")
}
func (UnimplementedProvisionerServer) DestroyProject(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyProject not implemented")
}
func (UnimplementedProvisionerServer) GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedProvisionerServer) mustEmbedUnimplementedProvisionerServer() {}

// UnsafeProvisionerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvisionerServer will
// result in compilation errors.
type UnsafeProvisionerServer interface {
	mustEmbedUnimplementedProvisionerServer()
}

func RegisterProvisionerServer(s grpc.ServiceRegistrar, srv ProvisionerServer) {
	s.RegisterService(&Provisioner_ServiceDesc, srv)
}

func _Provisioner_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).GetName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).GetVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).Configure(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_CreateWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).CreateWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_CreateWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).CreateWorkspace(ctx, req.(*types.Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_StartWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).StartWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_StartWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).StartWorkspace(ctx, req.(*types.Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_StopWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).StopWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_StopWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).StopWorkspace(ctx, req.(*types.Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_DestroyWorkspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DestroyWorkspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_DestroyWorkspace_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DestroyWorkspace(ctx, req.(*types.Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_GetWorkspaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Workspace)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).GetWorkspaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_GetWorkspaceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).GetWorkspaceInfo(ctx, req.(*types.Workspace))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).CreateProject(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_StartProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).StartProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_StartProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).StartProject(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_StopProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).StopProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_StopProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).StopProject(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_DestroyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).DestroyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_DestroyProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).DestroyProject(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provisioner_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvisionerServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Provisioner_GetProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvisionerServer).GetProjectInfo(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

// Provisioner_ServiceDesc is the grpc.ServiceDesc for Provisioner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Provisioner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Provisioner",
	HandlerType: (*ProvisionerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _Provisioner_GetName_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Provisioner_GetVersion_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Provisioner_Configure_Handler,
		},
		{
			MethodName: "CreateWorkspace",
			Handler:    _Provisioner_CreateWorkspace_Handler,
		},
		{
			MethodName: "StartWorkspace",
			Handler:    _Provisioner_StartWorkspace_Handler,
		},
		{
			MethodName: "StopWorkspace",
			Handler:    _Provisioner_StopWorkspace_Handler,
		},
		{
			MethodName: "DestroyWorkspace",
			Handler:    _Provisioner_DestroyWorkspace_Handler,
		},
		{
			MethodName: "GetWorkspaceInfo",
			Handler:    _Provisioner_GetWorkspaceInfo_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Provisioner_CreateProject_Handler,
		},
		{
			MethodName: "StartProject",
			Handler:    _Provisioner_StartProject_Handler,
		},
		{
			MethodName: "StopProject",
			Handler:    _Provisioner_StopProject_Handler,
		},
		{
			MethodName: "DestroyProject",
			Handler:    _Provisioner_DestroyProject_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _Provisioner_GetProjectInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/provisioner/grpc/proto/provisioner.proto",
}
