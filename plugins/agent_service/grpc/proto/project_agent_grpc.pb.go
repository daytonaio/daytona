// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: plugins/agent_service/grpc/proto/project_agent.proto

package proto

import (
	context "context"
	types "github.com/daytonaio/daytona/common/grpc/proto/types"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgentService_Initialize_FullMethodName           = "/AgentService/Initialize"
	AgentService_GetInfo_FullMethodName              = "/AgentService/GetInfo"
	AgentService_SetConfig_FullMethodName            = "/AgentService/SetConfig"
	AgentService_ProjectPreInit_FullMethodName       = "/AgentService/ProjectPreInit"
	AgentService_ProjectPostInit_FullMethodName      = "/AgentService/ProjectPostInit"
	AgentService_ProjectPreStart_FullMethodName      = "/AgentService/ProjectPreStart"
	AgentService_ProjectPostStart_FullMethodName     = "/AgentService/ProjectPostStart"
	AgentService_ProjectPreStop_FullMethodName       = "/AgentService/ProjectPreStop"
	AgentService_GetProjectInfo_FullMethodName       = "/AgentService/GetProjectInfo"
	AgentService_LivenessProbe_FullMethodName        = "/AgentService/LivenessProbe"
	AgentService_LivenessProbeTimeout_FullMethodName = "/AgentService/LivenessProbeTimeout"
)

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	Initialize(ctx context.Context, in *InitializeAgentServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AgentServiceInfo, error)
	SetConfig(ctx context.Context, in *AgentServiceConfig, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPostInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPostStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	ProjectPreStop(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error)
	GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error)
	LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	LivenessProbeTimeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessProbeTimeoutResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Initialize(ctx context.Context, in *InitializeAgentServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_Initialize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AgentServiceInfo, error) {
	out := new(AgentServiceInfo)
	err := c.cc.Invoke(ctx, AgentService_GetInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SetConfig(ctx context.Context, in *AgentServiceConfig, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ProjectPreInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_ProjectPreInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ProjectPostInit(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_ProjectPostInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ProjectPreStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_ProjectPreStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ProjectPostStart(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_ProjectPostStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) ProjectPreStop(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_ProjectPreStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetProjectInfo(ctx context.Context, in *types.Project, opts ...grpc.CallOption) (*types.ProjectInfo, error) {
	out := new(types.ProjectInfo)
	err := c.cc.Invoke(ctx, AgentService_GetProjectInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) LivenessProbe(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, AgentService_LivenessProbe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) LivenessProbeTimeout(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LivenessProbeTimeoutResponse, error) {
	out := new(LivenessProbeTimeoutResponse)
	err := c.cc.Invoke(ctx, AgentService_LivenessProbeTimeout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations should embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	Initialize(context.Context, *InitializeAgentServiceRequest) (*empty.Empty, error)
	GetInfo(context.Context, *empty.Empty) (*AgentServiceInfo, error)
	SetConfig(context.Context, *AgentServiceConfig) (*empty.Empty, error)
	ProjectPreInit(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPostInit(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPreStart(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPostStart(context.Context, *types.Project) (*empty.Empty, error)
	ProjectPreStop(context.Context, *types.Project) (*empty.Empty, error)
	GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error)
	LivenessProbe(context.Context, *empty.Empty) (*empty.Empty, error)
	LivenessProbeTimeout(context.Context, *empty.Empty) (*LivenessProbeTimeoutResponse, error)
}

// UnimplementedAgentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) Initialize(context.Context, *InitializeAgentServiceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedAgentServiceServer) GetInfo(context.Context, *empty.Empty) (*AgentServiceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedAgentServiceServer) SetConfig(context.Context, *AgentServiceConfig) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedAgentServiceServer) ProjectPreInit(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreInit not implemented")
}
func (UnimplementedAgentServiceServer) ProjectPostInit(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPostInit not implemented")
}
func (UnimplementedAgentServiceServer) ProjectPreStart(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreStart not implemented")
}
func (UnimplementedAgentServiceServer) ProjectPostStart(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPostStart not implemented")
}
func (UnimplementedAgentServiceServer) ProjectPreStop(context.Context, *types.Project) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectPreStop not implemented")
}
func (UnimplementedAgentServiceServer) GetProjectInfo(context.Context, *types.Project) (*types.ProjectInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectInfo not implemented")
}
func (UnimplementedAgentServiceServer) LivenessProbe(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessProbe not implemented")
}
func (UnimplementedAgentServiceServer) LivenessProbeTimeout(context.Context, *empty.Empty) (*LivenessProbeTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LivenessProbeTimeout not implemented")
}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeAgentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Initialize(ctx, req.(*InitializeAgentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentServiceConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SetConfig(ctx, req.(*AgentServiceConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ProjectPreInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ProjectPreInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ProjectPreInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ProjectPreInit(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ProjectPostInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ProjectPostInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ProjectPostInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ProjectPostInit(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ProjectPreStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ProjectPreStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ProjectPreStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ProjectPreStart(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ProjectPostStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ProjectPostStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ProjectPostStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ProjectPostStart(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_ProjectPreStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).ProjectPreStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_ProjectPreStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).ProjectPreStop(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetProjectInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetProjectInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_GetProjectInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetProjectInfo(ctx, req.(*types.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_LivenessProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).LivenessProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_LivenessProbe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).LivenessProbe(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_LivenessProbeTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).LivenessProbeTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgentService_LivenessProbeTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).LivenessProbeTimeout(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _AgentService_Initialize_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _AgentService_GetInfo_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _AgentService_SetConfig_Handler,
		},
		{
			MethodName: "ProjectPreInit",
			Handler:    _AgentService_ProjectPreInit_Handler,
		},
		{
			MethodName: "ProjectPostInit",
			Handler:    _AgentService_ProjectPostInit_Handler,
		},
		{
			MethodName: "ProjectPreStart",
			Handler:    _AgentService_ProjectPreStart_Handler,
		},
		{
			MethodName: "ProjectPostStart",
			Handler:    _AgentService_ProjectPostStart_Handler,
		},
		{
			MethodName: "ProjectPreStop",
			Handler:    _AgentService_ProjectPreStop_Handler,
		},
		{
			MethodName: "GetProjectInfo",
			Handler:    _AgentService_GetProjectInfo_Handler,
		},
		{
			MethodName: "LivenessProbe",
			Handler:    _AgentService_LivenessProbe_Handler,
		},
		{
			MethodName: "LivenessProbeTimeout",
			Handler:    _AgentService_LivenessProbeTimeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/agent_service/grpc/proto/project_agent.proto",
}
