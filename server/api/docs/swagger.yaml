basePath: /
definitions:
  InstallPluginRequest:
    properties:
      downloadUrls:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  NetworkKey:
    properties:
      key:
        type: string
    type: object
  ServerConfig:
    properties:
      apiPort:
        type: integer
      frps:
        $ref: '#/definitions/types.FRPSConfig'
      headscalePort:
        type: integer
      id:
        type: string
      pluginRegistryUrl:
        type: string
      pluginsDir:
        type: string
      serverDownloadUrl:
        type: string
    type: object
  types.FRPSConfig:
    properties:
      domain:
        type: string
      port:
        type: integer
      protocol:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: Daytona Server API
  title: Daytona Server API
  version: 0.1.0
paths:
  /plugin/install/provisioner:
    post:
      consumes:
      - application/json
      description: Install a provisioner plugin
      operationId: InstallProvisionerPlugin
      parameters:
      - description: Plugin to install
        in: body
        name: plugin
        required: true
        schema:
          $ref: '#/definitions/InstallPluginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Install a provisioner plugin
      tags:
      - plugin
  /server/config:
    get:
      description: Get the server configuration
      operationId: GetConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ServerConfig'
      summary: Get the server configuration
      tags:
      - server
    post:
      consumes:
      - application/json
      description: Set the server configuration
      operationId: SetConfig
      parameters:
      - description: Server configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/ServerConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ServerConfig'
      summary: Set the server configuration
      tags:
      - server
  /server/network-key:
    post:
      description: Generate a new authentication key
      operationId: GenerateNetworkKey
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/NetworkKey'
      summary: Generate a new authentication key
      tags:
      - server
schemes:
- http
swagger: "2.0"
